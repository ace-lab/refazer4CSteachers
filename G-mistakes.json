[{"ErrorFlag":0,"Id":1,"studentId":0,"date":null,"diff":"\r\nInputObject                                          SideIndicator\r\n-----------                                          -------------\r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)      =>           \r\n        return g(n-1) + 2* g * (n-2) + 3 * g * (n-3) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n    \treturn n\n    else:\n    \treturn g(n-1) + 2* g * (n-2) + 3 * g * (n-3)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n    \treturn n\n    else:\n    \treturn g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 197, in g","    return g(n-1) + 2* g * (n-2) + 3 * g * (n-3)","TypeError: unsupported operand type(s) for *: 'int' and 'function'","","# Error: expected","#     10","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":2,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n    if n <= 3:                              =>           \r\n        return n                            =>           \r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n    else:                                   =>           \r\n    def helper(j):                          <=           \r\n        if n <= 3:                          <=           \r\n            return n                        <=           \r\n        else:                               <=           \r\n            g(n-1) + 2*g(n-2) + 3*g(n-3)    <=           \r\n    return helper(1)                        <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(j):\n    \tif n <= 3:\n    \t\treturn n\n    \telse:\n    \t\tg(n-1) + 2*g(n-2) + 3*g(n-3)\n    return helper(1)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n    \treturn n\n    else:\n    \treturn g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","","# Error: expected","#     10","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":3,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                                            Side\r\n                                                                                                                       Indi\r\n                                                                                                                       cato\r\n                                                                                                                       r   \r\n-----------                                                                                                            ----\r\n                                                                                                                       =>  \r\n    if n<=3:                                                                                                           =>  \r\n        return n                                                                                                       =>  \r\n        return g(n-1)+2 * g(n-2)+3 * g(n-3)                                                                            =>  \r\n                                                                                                                       =>  \r\n                                                                                                                       =>  \r\n    else:                                                                                                              =>  \r\n    minusnum=1                                                                                                         <=  \r\n    addnum=2                                                                                                           <=  \r\n    def secondcase(n, minusnum, addnum):                                                                               <=  \r\n        if n<=3:                                                                                                       <=  \r\n            return n                                                                                                   <=  \r\n        elif minusnum==3:                                                                                              <=  \r\n            return secondcase(n-minusnum, minusnum+1, addnum)                                                          <=  \r\n        elif minusnum>3:                                                                                               <=  \r\n            return 1                                                                                                   <=  \r\n        else:                                                                                                          <=  \r\n            return (secondcase(n-minusnum, minusnum, addnum)+ addnum)*secondcase(n-(minusnum+1), minusnum+1, addnum+1) <=  \r\n    return secondcase(n, minusnum, addnum)                                                                             <=  \r\n                                                                                                                       <=  \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    minusnum=1\n    addnum=2   \n    def secondcase(n, minusnum, addnum):\n        if n<=3:\n            return n\n        elif minusnum==3:\n            return secondcase(n-minusnum, minusnum+1, addnum)\n        elif minusnum>3:\n            return 1\n        else:\n            return (secondcase(n-minusnum, minusnum, addnum)+ addnum)*secondcase(n-(minusnum+1), minusnum+1, addnum+1)\n    return secondcase(n, minusnum, addnum)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    if n<=3:\n        return n\n    else:\n        return g(n-1)+2 * g(n-2)+3 * g(n-3) \n    \n    \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","36","","# Error: expected","#     22","# but got","#     36","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":4,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n    if n <= 3:                                        =>           \r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)           =>           \r\n    i = 1                                             =>           \r\n    if n <= 3:                                        =>           \r\n        return n                                      =>           \r\n    else:                                             =>           \r\n        while i <= n:                                 =>           \r\n            return g(n-1) + 2 * g(n-2) + 3 * g(n-3)   =>           \r\n    else:                                             =>           \r\n                                                      =>           \r\n                                                      =>           \r\n    i = 2                                             <=           \r\n    k = 3                                             <=           \r\n    j = 4                                             <=           \r\n    if n > 3:                                         <=           \r\n        n = n - 1                                     <=           \r\n        while n > 0:                                  <=           \r\n            return g(n) + i * g(n-1) + k * g(n-2) + j <=           \r\n            i += 1                                    <=           \r\n            k += 1                                    <=           \r\n            j += 1                                    <=           \r\n    else:                                             <=           \r\n    \"*** YOUR CODE HERE ***\"                          <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 2\n    k = 3\n    j = 4\n    if n > 3: \n        n = n - 1\n        while n > 0:\n            return g(n) + i * g(n-1) + k * g(n-2) + j\n            i += 1\n            k += 1\n            j += 1\n    else: \n        return n\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3: \n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":5,"studentId":0,"date":null,"diff":"\r\nInputObject                                                 SideIndicator\r\n-----------                                                 -------------\r\n    k = 1                                                   =>           \r\n        return g(n-1) + (k + 1)*(g(n-2)) + (k + 2)*(g(n-3)) =>           \r\n    k = 0                                                   <=           \r\n        return g(n-1) + (k + 1)*(g(n-2))                    <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                          if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),     if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k = 0\n    if n <= 3:\n        return n\n    if n > 3:\n        return g(n-1) + (k + 1)*(g(n-2))\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                          if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),     if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k = 1\n    if n <= 3:\n        return n\n    if n > 3:\n        return g(n-1) + (k + 1)*(g(n-2)) + (k + 2)*(g(n-3))\n\n    \"*** YOUR CODE HERE ***\"\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","5","","# Error: expected","#     10","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":6,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    return G(n-1) + 2 * G(n-2) + 3 * G(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 196, in g","    return G(n-1) + 2 * G(n-2) + 3 * G(n-3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":7,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 1) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    elif n > 3:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 1)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    elif n > 3:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    elif n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","16","","# Error: expected","#     10","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":8,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 187, in g","    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":9,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n        return g(n-1) + 2*g(n-2) + 3*g(n-2) <=           \r\n\r\n\r\n","before":"def g(n):\n\t\"\"\"Return the value of G(n), computed recursively.\n\n\t>>> g(1)\n\t1\n\t>>> g(2)\n\t2\n\t>>> g(3)\n\t3\n\t>>> g(4)\n\t10\n\t>>> g(5)\n\t22\n\t>>> from construct_check import check\n\t>>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n\tTrue\n\t\"\"\"\n\n\tif n <= 3:\n\t\treturn n\n\telse:\n\t\treturn g(n-1) + 2*g(n-2) + 3*g(n-2)\n\n","after":"def g(n):\n\t\"\"\"Return the value of G(n), computed recursively.\n\n\t>>> g(1)\n\t1\n\t>>> g(2)\n\t2\n\t>>> g(3)\n\t3\n\t>>> g(4)\n\t10\n\t>>> g(5)\n\t22\n\t>>> from construct_check import check\n\t>>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n\tTrue\n\t\"\"\"\n\n\tif n <= 3:\n\t\treturn n\n\telse:\n\t\treturn g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","13","","# Error: expected","#     10","# but got","#     13","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":10,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n    '''x = 1                                =>           \r\n    total = 0                               =>           \r\n    while x <= n:                           =>           \r\n        if x <= 3:                          =>           \r\n            total += n                      =>           \r\n        else:                               =>           \r\n            total += '''                    =>           \r\n                                            =>           \r\n                                            =>           \r\n        return (n-1)*g(n-1) + 1             <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return (n-1)*g(n-1) + 1\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","41","","# Error: expected","#     22","# but got","#     41","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":11,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n        return g(n-1)+(2*g(n-2))+(3*g(n-3))   =>           \r\n        return n+g(n-1)+(2*g(n-2))+(3*g(n-3)) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return n+g(n-1)+(2*g(n-2))+(3*g(n-3))\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1)+(2*g(n-2))+(3*g(n-3))\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":12,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(n-1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(n-1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 195, in g","    return g(n-1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":13,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n        return g(n-1) + 2*g(n-2) + n        <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + n\n        \n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n        \n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","11","","# Error: expected","#     10","# but got","#     11","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":14,"studentId":0,"date":null,"diff":"\r\nInputObject                                                SideIndicator\r\n-----------                                                -------------\r\n    if n <= 3:                                             =>           \r\n        return n                                           =>           \r\n    else:                                                  =>           \r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)            =>           \r\n                                                           =>           \r\n                                                           =>           \r\n#G(n) = n,                                       if n <= 3 =>           \r\n#G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3  =>           \r\n    def count(x):                                          <=           \r\n        if x == 0:                                         <=           \r\n            return 1                                       <=           \r\n        if x <= 3:                                         <=           \r\n            return x                                       <=           \r\n        else:                                              <=           \r\n            return (x+1) * count(x-1)                      <=           \r\n    return count(n)                                        <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def count(x):\n        if x == 0:\n            return 1\n        if x <= 3:\n            return x\n        else:\n            return (x+1) * count(x-1)\n    return count(n)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n\n#G(n) = n,                                       if n <= 3\n#G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":15,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n        g(n-1) + 2 * g(n-2) + 3 * g(n-3)        <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","","# Error: expected","#     10","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":16,"studentId":0,"date":null,"diff":"\r\nInputObject                                            SideIndicator\r\n-----------                                            -------------\r\n    return  1 * g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n    # counter = 0                                      <=           \r\n    # if n > 3:                                        <=           \r\n    #     return (counter + 1) * g(n - 1)              <=           \r\n    x = 0                                              <=           \r\n    x += 1                                             <=           \r\n    # print (x)                                        <=           \r\n    print (x)                                          <=           \r\n    return  x * g(n - 1)                               <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    # counter = 0\n    # if n > 3:\n    #     return (counter + 1) * g(n - 1)\n    x = 0\n    x += 1 \n    # print (x)\n    if n <= 3:\n        return n\n    print (x)\n    return  x * g(n - 1)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return  1 * g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","1","3","","# Error: expected","#     10","# but got","#     1","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":17,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        return n          =>           \r\n        print(n)          <=           \r\n        return n + g(n-1) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n    \treturn 0\n    elif n <= 3:\n    \tprint(n)\n    \treturn n + g(n-1)\n    return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n    \treturn 0\n    elif n <= 3:\n    \treturn n \n    return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1","1","","# Error: expected","#     1","# but got","#     1","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":18,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                  SideIndicator\r\n-----------                                                                  -------------\r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)                                  =>           \r\n                                                                             =>           \r\n                                                                             =>           \r\n    def recurse(n2, count, const):                                           <=           \r\n        if n2<=3:                                                            <=           \r\n            return n2                                                        <=           \r\n        elif count == 1:                                                     <=           \r\n            return 3*g(n2-3)                                                 <=           \r\n        else:                                                                <=           \r\n            return (const * g(n2-1)) + recurse((n2-1), (count-1), (const+1)) <=           \r\n        return recurse(n, 3, 1)                                              <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def recurse(n2, count, const):\n        if n2<=3:\n            return n2\n        elif count == 1:\n            return 3*g(n2-3)\n        else:\n            return (const * g(n2-1)) + recurse((n2-1), (count-1), (const+1))\n    if n <= 3:\n        return n\n    else:\n        return recurse(n, 3, 1)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":19,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n    if n <=3:                              =>           \r\n        return n                           =>           \r\n        return g(n-1) + 2*g(n-2) +3*g(n-3) =>           \r\n    if n == 1:                             <=           \r\n        return 1                           <=           \r\n        return g(n-1)                      <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return g(n-1)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) +3*g(n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","1","","# Error: expected","#     2","# but got","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":20,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n        return total   =>           \r\n        return total-1 <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        total = g(n-1) + 2*g(n-2) + 3*g(n-3)\n        return total-1\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        total = g(n-1) + 2*g(n-2) + 3*g(n-3)\n        return total\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        total = g(n-1)+2*g(n-2)+3*g(n-3)\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","9","","# Error: expected","#     10","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":21,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n    return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n    return g(n-1) + g(n-2) + 3*g(n-3)   <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    return g(n-1) + g(n-2) + 3*g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","8","","# Error: expected","#     10","# but got","#     8","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":22,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n        return g(n-1)+2*g(n-2)+3*g(n-3) =>           \r\n    else:                               =>           \r\n    def ghelper(n,i):                   <=           \r\n        total = 0                       <=           \r\n        if i < n:                       <=           \r\n            total += i * g(n-i)         <=           \r\n        else:                           <=           \r\n            return total                <=           \r\n    return ghelper(n,i)                 <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 1\n    if n <= 3:\n        return n\n    def ghelper(n,i):\n        total = 0\n        if i < n:\n            total += i * g(n-i)\n        else:\n            return total\n    return ghelper(n,i)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 1\n    if n <= 3:\n        return n\n    else:\n        return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","","# Error: expected","#     10","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":23,"studentId":0,"date":null,"diff":"\r\nInputObject                                                      SideIndicator\r\n-----------                                                      -------------\r\n    if n <= 3:                                                   =>           \r\n        return n                                                 =>           \r\n    if n > 3:                                                    =>           \r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n - 3)                =>           \r\n    def helper(x):                                               <=           \r\n        if n <= 3:                                               <=           \r\n            return n                                             <=           \r\n        elif n > 3:                                              <=           \r\n            return g(n-1)(x) + x+1 * g(n-2)(x) + x+2 * g(n-3)(x) <=           \r\n    return helper(1)                                             <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x):\n        if n <= 3:\n            return n\n        elif n > 3:\n            return g(n-1)(x) + x+1 * g(n-2)(x) + x+2 * g(n-3)(x)\n    return helper(1)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    if n > 3:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 210, in g","    return helper(1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 209, in helper","    return g(n-1)(x) + x+1 * g(n-2)(x) + x+2 * g(n-3)(x)","TypeError: 'int' object is not callable","","# Error: expected","#     10","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":24,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n        return g(n-1) + g(n-2) + 3 * g(n-3)     <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + g(n-2) + 3 * g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","8","","# Error: expected","#     10","# but got","#     8","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":25,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n        return g(n-1)+2*g(n-2)+3*g(n-3) =>           \r\n    x=n                                 =>           \r\n    while x>3:                          =>           \r\n        x-=1                            =>           \r\n        return 3*(x-3)+2*(x-2)+x-1      =>           \r\n    if x<=3:                            =>           \r\n        return x                        =>           \r\n        return g(n-1)+g(n-2)+g(n-3)     <=           \r\n    \"*** YOUR CODE HERE ***\"            <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:\n        return g(n-1)+g(n-2)+g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:\n        return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":26,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n    if n <= 3:                                  =>           \r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n    if n == 0:                                  <=           \r\n        return 0                                <=           \r\n    elif n == 1:                                <=           \r\n        return n * g(n-1)                       <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return n\n    else:\n        return n * g(n-1)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","6","","# Error: expected","#     3","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":27,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n        return g(n-1)+2*g(n-2)+3*g(n-3) =>           \r\n    if n<=3:                            =>           \r\n        return n                        =>           \r\n    else:                               =>           \r\n    return g(n-1)+2*g(n-2)+3*g(n-3)     <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 187, in g","    return g(n-1)+2*g(n-2)+3*g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 187, in g","    return g(n-1)+2*g(n-2)+3*g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 187, in g","    return g(n-1)+2*g(n-2)+3*g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 187, in g","    return g(n-1)+2*g(n-2)+3*g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 187, in g","    return g(n-1)+2*g(n-2)+3*g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 187, in g","    return g(n-1)+2*g(n-2)+3*g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 187, in g","    return g(n-1)+2*g(n-2)+3*g(n-3)","RecursionError: maximum recursion depth exceeded","","# Error: expected","#     1","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":28,"studentId":0,"date":null,"diff":"\r\nInputObject                                                   SideIndicator\r\n-----------                                                   -------------\r\n        sum_g = sum_g + 1 * g(n-1) + 2 * g(n-2) + 3 * g(n-3)  =>           \r\n        i += 1                                                <=           \r\n        sum_g = sum_g +  i * g(n-i)                           <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    sum_g = 0\n    i = 0\n    if n <=3:\n        return n\n    else:\n        i += 1\n        sum_g = sum_g +  i * g(n-i) \n    return sum_g\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    sum_g = 0\n    i = 0\n    if n <=3:\n        return n\n    else:\n        sum_g = sum_g + 1 * g(n-1) + 2 * g(n-2) + 3 * g(n-3) \n    return sum_g\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":29,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n        return g(n-1) + 2*g(n-2)+ 3*g(n-3) =>           \r\n        return g(n-1) + 2*g(n-2)+g(n-3)    <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2)+g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2)+ 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","8","","# Error: expected","#     10","# but got","#     8","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":30,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n        return g(n-1) * g(n-2) * g(n-3)         <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) * g(n-2) * g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":31,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                             SideIndicator\r\n-----------                                                                             -------------\r\n    return                                                                              =>           \r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))                 =>           \r\n    return accumulate(add, 0, n, term)                                                  =>           \r\n    return accumulate(mul, 1, n, term)                                                  =>           \r\n    return accumulate(lambda x,y: combiner(x,y) if pred(x) else y, base, n, term)       =>           \r\n        return g(n-1)+2*g(n-2)+3*g(n-3)                                                 =>           \r\n    if n==1:                                                                            <=           \r\n        return int(term(n))                                                             <=           \r\n        return int(term(n))*product(n-1,term)                                           <=           \r\n    return product(n,identity)                                                          <=           \r\n        return combiner(term(n),  accumulate(combiner,base,n-1,term))                   <=           \r\n    return accumulate(add,0,n,term)                                                     <=           \r\n    return accumulate(mul,1,n,term)                                                     <=           \r\n    return accumulate(lambda x,y: combiner(x,y) if pred(x) else y,   base,   n,   term) <=           \r\n                                                                                        <=           \r\n                                                                                        <=           \r\n        count=0                                                                         <=           \r\n        while count<n:                                                                  <=           \r\n            total+=count*g(n-1)                                                         <=           \r\n            count+=1                                                                    <=           \r\n        return total                                                                    <=           \r\n    else:                                                                               <=           \r\n    \"*** YOUR CODE HERE ***\"                                                            <=           \r\n                                                                                        <=           \r\n    \"*** YOUR CODE HERE ***\"                                                            <=           \r\n                                                                                        <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        count=0\n        while count<n:\n            total+=count*g(n-1)\n            count+=1\n        return total\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 194, in g","    total+=count*g(n-1)","UnboundLocalError: local variable 'total' referenced before assignment","","# Error: expected","#     10","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":32,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n        return g(n-1)*n + n                           <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1)*n + n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","16","","# Error: expected","#     10","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":33,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n    else:                                       =>           \r\n    def helper(k):                              <=           \r\n        if k == n:                              <=           \r\n            return k*(g(n-k))                   <=           \r\n    total = 0                                   <=           \r\n        total = total + k*(g(n-k))              <=           \r\n        k +=1                                   <=           \r\n    return total                                <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    total = 0\n    def helper(k):\n        if k == n:\n            return k*(g(n-k))\n        total = total + k*(g(n-k))\n        k +=1\n    return total\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","0","","# Error: expected","#     10","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":34,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        result = n\n        return result\n    else:\n        result = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n        return result\n    return g(n)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        result = n\n        return result\n    else:\n        result = g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n        return result\n    return g(n)\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        result = n\r\n        return result\r\n    else:\r\n        result = g(n-1)+2*g(n-2)+3*g(n-3)\r\n        return result\r\n    return g(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 198, in g","    result = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":35,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n        return g(n-1)+ 2*g(n-2) + 3*g(n-3) =>           \r\n        return n + n-1 + i*(n-i)           <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = n-1\n    if n <= 3:\n        return n\n    else:\n        return n + n-1 + i*(n-i)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = n-1\n    if n <= 3:\n        return n\n    else:\n        return g(n-1)+ 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","13","","# Error: expected","#     22","# but got","#     13","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":36,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n        g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)        <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","","# Error: expected","#     10","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":37,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1)+ 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1)+ 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 196, in g","    return g(n-1)+ 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":38,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <=3:\n        return n\n    else:\n        return G(n-1)+2*G(n-2)+3*G(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <=3:\n        return n\n    else:\n        return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 196, in g","    return G(n-1)+2*G(n-2)+3*G(n-3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":39,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n    if n in [1,2,3]:                    =>           \r\n        return n                        =>           \r\n        return g(n-1)+2*g(n-2)+3*g(n-3) =>           \r\n    else:                               =>           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n in [1,2,3]:\n        return n\n    else:\n        return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","","# Error: expected","#     1","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":40,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n        return g(n-1)*1 + g(n-2)*2 + g(n-3)*3 =>           \r\n        return g(n-1)*1 + g(n-2)*2 + g(n-3)*2 <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1)*1 + g(n-2)*2 + g(n-3)*2\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1)*1 + g(n-2)*2 + g(n-3)*3\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)*1+g(n-2)*2+g(n-3)*3","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","9","","# Error: expected","#     10","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":41,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        total=g(n-1) + 2*g(n-2) + 3*g(n-3)  =>           \r\n        total+=g(n-1) + 2*g(n-2) + 3*g(n-3) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        total+=g(n-1) + 2*g(n-2) + 3*g(n-3)\n        return total\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        total=g(n-1) + 2*g(n-2) + 3*g(n-3)\n        return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 192, in g","    total+=g(n-1) + 2*g(n-2) + 3*g(n-3)","UnboundLocalError: local variable 'total' referenced before assignment","","# Error: expected","#     10","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":42,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3) \n        \n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) \n        \n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 188, in g","    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":43,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 190, in g","    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":44,"studentId":0,"date":null,"diff":"\r\nInputObject                                                SideIndicator\r\n-----------                                                -------------\r\n    if n <= 3:                                             =>           \r\n        return n                                           =>           \r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)      =>           \r\n    else:                                                  =>           \r\n    def check_direction_swap(p):                           <=           \r\n        if(p % 7 == 0):                                    <=           \r\n            return True                                    <=           \r\n        def check_contains_7(q):                           <=           \r\n            if(q == 0):                                    <=           \r\n                return False                               <=           \r\n            elif(q % 10 == 7):                             <=           \r\n                return True                                <=           \r\n                return check_contains_7((q - q % 10) / 10) <=           \r\n        return check_contains_7(p)                         <=           \r\n            else:                                          <=           \r\n    \"\"\"                                                    <=           \r\n    \"\"\"                                                    <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","","# Error: expected","#     1","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":45,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    if n <= 3: =>           \r\n    if n >= 3: <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    if n >= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) \n\n    \"*** YOUR CODE HERE ***\"\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) \n\n    \"*** YOUR CODE HERE ***\"\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\"))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\"))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(LeafWildcard(\"BinaryExpressionNode\")), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 216, in g","    return g(n-1) + 2 * g(n-2) + 3 * g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 216, in g","    return g(n-1) + 2 * g(n-2) + 3 * g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 216, in g","    return g(n-1) + 2 * g(n-2) + 3 * g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 216, in g","    return g(n-1) + 2 * g(n-2) + 3 * g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 216, in g","    return g(n-1) + 2 * g(n-2) + 3 * g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 216, in g","    return g(n-1) + 2 * g(n-2) + 3 * g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 213, in g","    if n >= 3:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     1","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":46,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    if n > 3:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3) \n    return n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    if n > 3:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) \n    return n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n==1:\r\n        return 1\r\n    if n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    return n","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 218, in g","    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":47,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return G(n-1)+2*G(n-2)+3*G(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 191, in g","    return G(n-1)+2*G(n-2)+3*G(n-3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":48,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n        return g(n-1) + 2 * g(n-2) + 3*g(n-3) =>           \r\n        g(n-1) + 2 * g(n-2) + 3*g(n-3)        <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    if n <= 3:\n        return n\n    else:\n        g(n-1) + 2 * g(n-2) + 3*g(n-3)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3*g(n-3)\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","","# Error: expected","#     10","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":49,"studentId":0,"date":null,"diff":"\r\nInputObject                                                SideIndicator\r\n-----------                                                -------------\r\n    return g(n-1) + 2 * g(n-2) + 3 * g(n-3)                =>           \r\n    return g_iter(n-1) + 2 * g_iter(n-2) + 3 * g_iter(n-3) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    x, y, z = 1, 2, 3\n    while n > 3:\n        x, y, z = y, z, z + 2*y + 3*x\n        n -= 1\n    return z\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    x, y, z = 1, 2, 3\r\n    while n>3:\r\n        x, y, z = y, z, z+2*y+3*x\r\n        n -= 1\r\n    return z","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","22",">>> from construct_check import check",">>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\construct_check.py\", line 86, in check","    return ExclusionChecker(disallow).check(source_file, checked_funcs, source)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\construct_check.py\", line 170, in check","    p = parse(open(source_file).read(), source_file)","  File \"C:\\Users\\Gustavo\\Anaconda3\\lib\\ast.py\", line 35, in parse","    return compile(source, filename, mode, PyCF_ONLY_AST)","  File \"hw02.py\", line 1","    ???HW_SOURCE_FILE = 'hw02.py'","                    ^","SyntaxError: invalid character in identifier","","# Error: expected","#     True","# but got","#     SyntaxError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":50,"studentId":0,"date":null,"diff":"\r\nInputObject                         SideIndicator\r\n-----------                         -------------\r\n    return g(n-1)+2*g(n-2)+3*g(n-3) =>           \r\n    def pain(k,i,result):           <=           \r\n        if k == n:                  <=           \r\n            return result           <=           \r\n        print (result ,g(k-1))      <=           \r\n    return pain(n,0,0)              <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    def pain(k,i,result):\n        if k == n:\n            return result\n        print (result ,g(k-1))\n    return pain(n,0,0)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","0","","# Error: expected","#     10","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":51,"studentId":0,"date":null,"diff":"\r\nInputObject                                      SideIndicator\r\n-----------                                      -------------\r\n        return n                                 =>           \r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)  =>           \r\n                                                 =>           \r\n        g(n) == n                                <=           \r\n        g(n) == g(n-1) + 2 * g(n-2) + 3 * g(n-3) <=           \r\n                                                 <=           \r\n    \"*** YOUR CODE HERE ***\"                     <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        g(n) == n\n        \n    else: \n        g(n) == g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n        \n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n \n    else: \n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n        \n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 205, in g","    g(n) == n","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 205, in g","    g(n) == n","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 205, in g","    g(n) == n","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 205, in g","    g(n) == n","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 205, in g","    g(n) == n","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 205, in g","    g(n) == n","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 204, in g","    if n <= 3:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     1","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":52,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)     =>           \r\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) + 4 <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) + 4\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":53,"studentId":0,"date":null,"diff":"\r\nInputObject                                      SideIndicator\r\n-----------                                      -------------\r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)  =>           \r\n        g(n-1) + 2 * g(n-2) + 3 * g(n-3)         <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return identity(n)\n    else: \n        g(n-1) + 2 * g(n-2) + 3 * g(n-3) \n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return identity(n)\n    else: \n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","","# Error: expected","#     10","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":54,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n        return 2 * g(n - 1) + 2 * n                   <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return 2 * g(n - 1) + 2 * n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":55,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n    return g(n-1) + 2*g(n-2) + 3*g(n-3)     =>           \r\n    #def counter(i):                        =>           \r\n    #    if i == 4:                         =>           \r\n    #        return 1                       =>           \r\n    #    return g(n-i) + ((i+1)*g(n-(i+1))) =>           \r\n    #return counter(1)                      =>           \r\n    def counter(i):                         <=           \r\n        if i == 4:                          <=           \r\n            return 1                        <=           \r\n        return g(n-i) + ((i+1)*g(n-(i+1)))  <=           \r\n    return counter(1)                       <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def counter(i):\n        if i == 4:\n            return 1\n        return g(n-i) + ((i+1)*g(n-(i+1)))\n    return counter(1)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(n-1) + 2*g(n-2) + 3*g(n-3)\n    #def counter(i):\n    #    if i == 4:\n    #        return 1\n    #    return g(n-i) + ((i+1)*g(n-(i+1)))\n    #return counter(1)\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","7","","# Error: expected","#     10","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":56,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n                                            =>           \r\n        return (n-1) + 2*(n-2) + 3*(n-3)    <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return (n-1) + 2*(n-2) + 3*(n-3)\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","16","","# Error: expected","#     22","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":57,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n        g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)        <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n    \n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n    \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","","# Error: expected","#     10","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":58,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n            =>           \r\n            <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<= 3:\n        return n \n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n        \n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<= 3:\n        return n \n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 197, in g","    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":59,"studentId":0,"date":null,"diff":"\r\nInputObject                                             SideIndicator\r\n-----------                                             -------------\r\n        if i <= 3:                                      =>           \r\n            return i                                    =>           \r\n        if i > 3:                                       =>           \r\n            return G(i - 1) + 2*G(i - 2) + 3 * G(i - 3) =>           \r\n                                                        =>           \r\n    i = 0                                               <=           \r\n    p = 0                                               <=           \r\n    sum = 0                                             <=           \r\n        if n <= 3:                                      <=           \r\n            return n                                    <=           \r\n        if n > 3:                                       <=           \r\n            return sum + ((i + 1) * G(n - (p - 1)))     <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 0\n    p = 0\n    sum = 0\n    def G(i):\n        if n <= 3:\n            return n\n        if n > 3:\n            return sum + ((i + 1) * G(n - (p - 1)))\n\n    return G(n)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    def G(i):\n        if i <= 3:\n            return i\n        if i > 3:\n            return G(i - 1) + 2*G(i - 2) + 3 * G(i - 3)\n\n    return G(n)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 202, in G","    return sum + ((i + 1) * G(n - (p - 1)))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 202, in G","    return sum + ((i + 1) * G(n - (p - 1)))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 202, in G","    return sum + ((i + 1) * G(n - (p - 1)))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 202, in G","    return sum + ((i + 1) * G(n - (p - 1)))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 202, in G","    return sum + ((i + 1) * G(n - (p - 1)))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 202, in G","    return sum + ((i + 1) * G(n - (p - 1)))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 199, in G","    if n <= 3:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     10","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":60,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    if n <= 3: =>           \r\n    if n < 3:  <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n < 3:\n        return n\n    else: \n        return g(n - 1) + (2 * g(n - 2)) + (3 * g(n - 3))\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return g(n - 1) + (2 * g(n - 2)) + (3 * g(n - 3))\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+(2*g(n-2))+(3*g(n-3))","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\"))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\"))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(LeafWildcard(\"BinaryExpressionNode\")), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","4","","# Error: expected","#     3","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":61,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n    total = 1                                         <=           \r\n    k = 1                                             <=           \r\n    i = 2                                             <=           \r\n        total *= (g(n - k) + i)                       <=           \r\n        k += 1                                        <=           \r\n        i += 1                                        <=           \r\n    return total                                      <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total = 1\n    k = 1\n    i = 2\n    if n <= 3:\n        return n\n    else:\n        total *= (g(n - k) + i)\n        k += 1\n        i += 1\n    return total\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","5","","# Error: expected","#     10","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":62,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n        return g(n-1) + g(n-2) + 3 * g(n-3)     <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + g(n-2) + 3 * g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","8","","# Error: expected","#     10","# but got","#     8","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":63,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n    total = 0                               =>           \r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n                                            <=           \r\n        return n * g(n-1)                   <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    if n <= 3:\n        return n\n    else:\n        return n * g(n-1)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total = 0\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","12","","# Error: expected","#     10","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":64,"studentId":0,"date":null,"diff":"\r\nInputObject  SideIndicator\r\n-----------  -------------\r\n    if n<=3: =>           \r\n    if n>=3: <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n>=3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\"))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\"))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(LeafWildcard(\"BinaryExpressionNode\")), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 189, in g","    return g(n-1) + 2 * g(n-2) + 3 * g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 189, in g","    return g(n-1) + 2 * g(n-2) + 3 * g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 189, in g","    return g(n-1) + 2 * g(n-2) + 3 * g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 189, in g","    return g(n-1) + 2 * g(n-2) + 3 * g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 189, in g","    return g(n-1) + 2 * g(n-2) + 3 * g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 189, in g","    return g(n-1) + 2 * g(n-2) + 3 * g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 186, in g","    if n>=3:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     1","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":65,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n        return g(n - 1) + 2 * g(n-2)                  <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n \n    else:\n        return g(n - 1) + 2 * g(n-2)\n\n    #G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n \n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n    #G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","7","","# Error: expected","#     10","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":66,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n        return g(n-1) + 2*g(n-2) + 2*g(n-3) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 2*g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","9","","# Error: expected","#     10","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":67,"studentId":0,"date":null,"diff":"\r\nInputObject                                             SideIndicator\r\n-----------                                             -------------\r\n    def compute_G(i, value):                            =>           \r\n        elif i < 4:                                     =>           \r\n            return compute_G(i + 1, value + i*g(n - i)) =>           \r\n        return value                                    =>           \r\n    return compute_G(1, 0)                              =>           \r\n                                                        =>           \r\n                                                        =>           \r\n                                                        =>           \r\n                                                        =>           \r\n    def compute_G(i):                                   <=           \r\n        elif i < 5:                                     <=           \r\n            i += 1                                      <=           \r\n            return (i-1)*g(n - (i-1))                   <=           \r\n    return compute_G(1)                                 <=           \r\n                                                        <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    \n\n    def compute_G(i):\n\n        if n <= 3:\n            return n\n        elif i < 5:\n            i += 1\n            return (i-1)*g(n - (i-1))\n\n    return compute_G(1)\n\n    \n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    def compute_G(i, value):\n\n        if n <= 3:\n            return n\n\n\n        elif i < 4:\n\n            return compute_G(i + 1, value + i*g(n - i))\n\n        return value\n\n\n    return compute_G(1, 0)\n\n    \n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    def compute_G(i):\r\n        if n<=3:\r\n            return n\r\n        elif i<5:\r\n            i += 1\r\n            return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    return compute_G(1)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":68,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                                     SideIndicat\r\n                                                                                                                or         \r\n-----------                                                                                                     -----------\r\n            return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)                                                       =>         \r\n            return g(recursive_helper(n - 1)) + 2 * g(recursive_helper(n - 2)) + 3 * g(recursive_helper(n - 3)) <=         \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def recursive_helper(i):\n        if n <= 3:\n            return n\n        else:\n            return g(recursive_helper(n - 1)) + 2 * g(recursive_helper(n - 2)) + 3 * g(recursive_helper(n - 3))\n    return recursive_helper(n)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def recursive_helper(i):\n        if n <= 3:\n            return n\n        else:\n            return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n    return recursive_helper(n)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    def recursive_helper(i):\r\n        if n<=3:\r\n            return n\r\n        else:\r\n            return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    return recursive_helper(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 202, in recursive_helper","    return g(recursive_helper(n - 1)) + 2 * g(recursive_helper(n - 2)) + 3 * g(recursive_helper(n - 3))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 202, in recursive_helper","    return g(recursive_helper(n - 1)) + 2 * g(recursive_helper(n - 2)) + 3 * g(recursive_helper(n - 3))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 202, in recursive_helper","    return g(recursive_helper(n - 1)) + 2 * g(recursive_helper(n - 2)) + 3 * g(recursive_helper(n - 3))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 202, in recursive_helper","    return g(recursive_helper(n - 1)) + 2 * g(recursive_helper(n - 2)) + 3 * g(recursive_helper(n - 3))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 202, in recursive_helper","    return g(recursive_helper(n - 1)) + 2 * g(recursive_helper(n - 2)) + 3 * g(recursive_helper(n - 3))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 202, in recursive_helper","    return g(recursive_helper(n - 1)) + 2 * g(recursive_helper(n - 2)) + 3 * g(recursive_helper(n - 3))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 199, in recursive_helper","    if n <= 3:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     10","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":69,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 191, in g","    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":70,"studentId":0,"date":null,"diff":"\r\nInputObject                                                      SideIndicator\r\n-----------                                                      -------------\r\n        return g(n - 1) + 2 * g(n-2) + 3 * g(n-3)                =>           \r\n        return g_iter(n - 1) + 2 * g_iter(n-2) + 3 * g_iter(n-3) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g_iter(n - 1) + 2 * g_iter(n-2) + 3 * g_iter(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 192, in g","    return g_iter(n - 1) + 2 * g_iter(n-2) + 3 * g_iter(n-3)","TypeError: unsupported operand type(s) for *: 'int' and 'NoneType'","","# Error: expected","#     10","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":71,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n        return g(n-1) + 2 + g(n-2) + 3 * g(n-3) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 + g(n-2) + 3 * g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","21","","# Error: expected","#     22","# but got","#     21","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":72,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    if n <= 3: =>           \r\n               =>           \r\n    if n < 3:  <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n < 3:\n        return n\n    return g(n-1) + (2 * g(n-2)) + (3 * g(n-3))\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n\n    return g(n-1) + (2 * g(n-2)) + (3 * g(n-3))\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+(2*g(n-2))+(3*g(n-3))","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\"))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\"))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(LeafWildcard(\"BinaryExpressionNode\")), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","4","","# Error: expected","#     3","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":73,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n        return g(n-1) + 2*g(n-2) + 3 * g(n-3) =>           \r\n        return g(n-1) + 2*g(n-2) + g(n-3)     <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else :\n        return g(n-1) + 2*g(n-2) + g(n-3)\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else :\n        return g(n-1) + 2*g(n-2) + 3 * g(n-3)\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","8","","# Error: expected","#     10","# but got","#     8","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":74,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 216, in g","    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":75,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n        return g(n - 1) * g(n - 2) * g(n - 3)         <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) * g(n - 2) * g(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":76,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n    return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n    return g(n-1)*(n)                   <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if(n <= 3):\n        return n\n    return g(n-1)*(n)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if(n <= 3):\n        return n\n    return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if (n<=3):\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","12","","# Error: expected","#     10","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":77,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 203, in g","    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":78,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 192, in g","    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":79,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n    if n <= 3:                                        =>           \r\n        return n                                      =>           \r\n    if n > 3:                                         =>           \r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n    a,b,c, = 1,2,3                                    =>           \r\n    if n < 3:                                         =>           \r\n        return n                                      =>           \r\n        for i in range(3,n):                          =>           \r\n            a,b,c=b,c,c+2*b+3*a                       =>           \r\n        return c                                      =>           \r\n    else:                                             =>           \r\n                                                      =>           \r\n                                                      <=           \r\n    \"*** YOUR CODE HERE ***\"                          <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n\n    if n > 3:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","","# Error: expected","#     1","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":80,"studentId":0,"date":null,"diff":"\r\nInputObject                                                     SideIndicator\r\n-----------                                                     -------------\r\n    k = 1                                                       =>           \r\n        result = k*g(n-k) + (k+1)*g(n-(k+1)) + (k+2)*g(n-(k+2)) =>           \r\n        result = (n-1)*g(n-1) + result                          <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    result = 0\n    if n <= 0:\n        result = 0\n    if n<=3:\n        result = n\n    else: \n        result = (n-1)*g(n-1) + result\n    return result\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k = 1\n    result = 0\n    if n <= 0:\n        result = 0\n    if n<=3:\n        result = n\n    else: \n        result = k*g(n-k) + (k+1)*g(n-(k+1)) + (k+2)*g(n-(k+2))\n    return result\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","9","","# Error: expected","#     10","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":81,"studentId":0,"date":null,"diff":"\r\nInputObject                         SideIndicator\r\n-----------                         -------------\r\n        total += count * g(n)       =>           \r\n                                    =>           \r\n                                    =>           \r\n    while n > 2:                    <=           \r\n        return                      <=           \r\n    []                              <=           \r\n        total += count * g(n-count) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    while n > 2:\n        return\n    if n <= 3:\n        return identity(n)\n    return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return identity(n)\n    return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return identity(n)\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"any\"))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","","# Error: expected","#     3","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":82,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 198, in g","    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":83,"studentId":0,"date":null,"diff":"\r\nInputObject                                                       SideIndicator\r\n-----------                                                       -------------\r\n    if n <=3:                                                     =>           \r\n        return n                                                  =>           \r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)             =>           \r\n    else:                                                         =>           \r\n    l=[n]                                                         <=           \r\n    [print (n) for n in l if n <=3]                               <=           \r\n    [ (g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)) for n in l if n>3] <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    l=[n]\n    [print (n) for n in l if n <=3]\n    [ (g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)) for n in l if n>3]\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <=3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","3","2","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 219, in g","    [ (g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)) for n in l if n>3]","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 219, in <listcomp>","    [ (g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)) for n in l if n>3]","TypeError: unsupported operand type(s) for *: 'int' and 'NoneType'","","# Error: expected","#     10","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":84,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n        return n =>           \r\n        return 3 <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return 3\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","3","","# Error: expected","#     1","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":85,"studentId":0,"date":null,"diff":"\r\nInputObject  SideIndicator\r\n-----------  -------------\r\n    if n<=3: =>           \r\n    if q<=3: <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if q<=3:\n        return n\n    else:\n        return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 184, in g","    if q<=3:","NameError: name 'q' is not defined","","# Error: expected","#     1","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":86,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n > 3:\n        return G(n - 1)+ 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n > 3:\n        return g(n - 1)+ 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    if n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 198, in g","    return G(n - 1)+ 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":87,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n        return 1 * g(n-1) + 2* g(n-2) + 3* g(n-3) =>           \r\n        return n* g(n-1)                          <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if(n <= 3):\n        return n\n    else:\n        return n* g(n-1) \n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if(n <= 3):\n        return n\n    else:\n        return 1 * g(n-1) + 2* g(n-2) + 3* g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if (n<=3):\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","12","","# Error: expected","#     10","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":88,"studentId":0,"date":null,"diff":"\r\nInputObject                                                  SideIndicator\r\n-----------                                                  -------------\r\n    return accumulate(combiner, base, pred(n) == True, term) =>           \r\n        G = g(n-1) + 2 * g(n-2) + 3 * g(n - 3)               =>           \r\n    if n <= 3:                                               =>           \r\n        return n                                             =>           \r\n                                                             =>           \r\n                                                             =>           \r\n    return accumulate(combiner, base, n, term)               <=           \r\n        g = (n-1) + 2 * (n-2) + 3 * (n - 3)                  <=           \r\n        g = g + g(n-1)                                       <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    g = 0\n    if n <= 3:\n        return n\n    else:\n        g = (n-1) + 2 * (n-2) + 3 * (n - 3)\n        g = g + g(n-1)\n        return g\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    G = 0\n    if n <= 3:\n        return n\n    else:\n        G = g(n-1) + 2 * g(n-2) + 3 * g(n - 3)\n        return G\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 197, in g","    g = g + g(n-1)","TypeError: 'int' object is not callable","","# Error: expected","#     10","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":89,"studentId":0,"date":null,"diff":"\r\nInputObject                                               SideIndicator\r\n-----------                                               -------------\r\n            return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n            g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)        <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n > 0:\n        if n <= 3:\n            return n\n        else:\n            g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n > 0:\n        if n <= 3:\n            return n\n        else:\n            return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","","# Error: expected","#     10","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":90,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n    if n <= 3:                                  =>           \r\n        return n                                =>           \r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n    if x <= 3:                                  <=           \r\n        return x                                <=           \r\n        return g(x-1) + 2 * g(x-2) + 3 * g(x-3) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if x <= 3:\n        return x\n    else:\n        return g(x-1) + 2 * g(x-2) + 3 * g(x-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 188, in g","    if x <= 3:","NameError: name 'x' is not defined","","# Error: expected","#     1","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":91,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n    return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n    tot = 0                             <=           \r\n    for i in range(1,4):                <=           \r\n        tot+= i * g(n-i)                <=           \r\n    return tot                          <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<4:\n        return n\n    tot = 0\n    for i in range(1,4):\n        tot+= i * g(n-i)\n    return tot\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<4:\n        return n\n    return g(n-1) + 2*g(n-2) + 3*g(n-3)\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<4:\r\n        return n\r\n    tot = 0\r\n    for i in range(1, 4):\r\n        tot += i*g(n-i)\r\n    return tot","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","22",">>> from construct_check import check",">>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\construct_check.py\", line 86, in check","    return ExclusionChecker(disallow).check(source_file, checked_funcs, source)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\construct_check.py\", line 170, in check","    p = parse(open(source_file).read(), source_file)","  File \"C:\\Users\\Gustavo\\Anaconda3\\lib\\ast.py\", line 35, in parse","    return compile(source, filename, mode, PyCF_ONLY_AST)","  File \"hw02.py\", line 1","    ???HW_SOURCE_FILE = 'hw02.py'","                    ^","SyntaxError: invalid character in identifier","","# Error: expected","#     True","# but got","#     SyntaxError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":92,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n    return G(n)                             =>           \r\ndef G(n):                                   =>           \r\n        return G(n-1) + 2*G(n-2) + 3*G(n-3) =>           \r\n    if n <= 3:                              =>           \r\n        return n                            =>           \r\n    else:                                   =>           \r\n                                            <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n   \n\n\n    def G(n):\n        if n <= 3:\n            return n\n        else:\n            return G(n-1) + 2*G(n-2) + 3*G(n-3)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        if n <= 3:\n            return n\n        else:\n            return G(n-1) + 2*G(n-2) + 3*G(n-3)\n    return G(n)\n\n\ndef G(n):\n    if n <= 3:\n        return n\n    else:\n        return G(n-1) + 2*G(n-2) + 3*G(n-3)\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","","# Error: expected","#     1","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":93,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 190, in g","    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":94,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n    while n == 3: <=           \r\n        return 1  <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    while n == 3:\n        return 1\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2  * g(n-2) + 3 * g(n-3)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2  * g(n-2) + 3 * g(n-3)\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    while n==3:\r\n        return 3\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","1","","# Error: expected","#     3","# but got","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":95,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return G(n-1) + 2*G(n-2) + 3*G(n-3)\n        \n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n        \n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 200, in g","    return G(n-1) + 2*G(n-2) + 3*G(n-3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":96,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        return g(n-1)+2 * g(n-2)+3 * g(n-3)  =>           \r\n        return g(n-1)*2 + g(n-2)*3 + g(n-3)  <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    else:\n        return g(n-1)*2 + g(n-2)*3 + g(n-3) \n\n\n\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    else:\n        return g(n-1)+2 * g(n-2)+3 * g(n-3) \n\n\n\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","13","","# Error: expected","#     10","# but got","#     13","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":97,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n        return g(n-1) + 2*g(n-2) + 3*(n-3) =>           \r\n        result = result + i * g(n-i)       <=           \r\n        return result                      <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    i=1\n    result=0\n    if n <=3:\n        return n\n    else:\n        result = result + i * g(n-i)\n        return result\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    i=1\n    result=0\n    if n <=3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*(n-3)\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    i = 1\r\n    result = 0\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        result = result+i*g(n-i)\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":98,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 189, in g","    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":99,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n \n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n \n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 188, in g","    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":100,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n        return g(n-1) + 2*g(n-2) + g(n-3)   <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n \n    else:\n        return g(n-1) + 2*g(n-2) + g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n \n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","8","","# Error: expected","#     10","# but got","#     8","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":101,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 185, in g","    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":102,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)   =>           \r\n        return n*g(n-1) + 2*g(n-2) + 3*g(n-3) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return n*g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","19","","# Error: expected","#     10","# but got","#     19","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":103,"studentId":0,"date":null,"diff":"\r\nInputObject   SideIndicator\r\n-----------   -------------\r\n    if n <=3: =>           \r\n    if n >=3: <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n >=3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\"))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\"))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(LeafWildcard(\"BinaryExpressionNode\")), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 184, in g","    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 184, in g","    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 184, in g","    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 184, in g","    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 184, in g","    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 184, in g","    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 181, in g","    if n >=3:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     1","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":104,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)    =>           \r\n        return g(n)                            <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:    \n        return g(n)    \n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:    \n        return g(n-1) + 2*g(n-2) + 3*g(n-3)   \n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 206, in g","    return g(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 206, in g","    return g(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 206, in g","    return g(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 206, in g","    return g(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 206, in g","    return g(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 206, in g","    return g(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 203, in g","    if n <=3:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     10","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":105,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n    if n <= 3:                                        =>           \r\n        return n                                      =>           \r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n    else:                                             =>           \r\n    \"*** YOUR CODE HERE ***\"                          <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","","# Error: expected","#     1","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":106,"studentId":0,"date":null,"diff":"\r\nInputObject                                          SideIndicator\r\n-----------                                          -------------\r\n        return g(n - 1) + 2 *g(n - 2) + 3 * g(n - 3) =>           \r\n        return g(n - 1) * g(n - 2) * g(n - 3)        <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) * g(n - 2) * g(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 *g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":107,"studentId":0,"date":null,"diff":"\r\nInputObject                                                 SideIndicator\r\n-----------                                                 -------------\r\n    if n <= 3:                                              =>           \r\n        return n                                            =>           \r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)       =>           \r\n    else:                                                   =>           \r\n                                                            =>           \r\n    return n if n <= 3 else g(n) * g(n-1) * g(n-2) * g(n-3) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    return n if n <= 3 else g(n) * g(n-1) * g(n-2) * g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 184, in g","    return n if n <= 3 else g(n) * g(n-1) * g(n-2) * g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 184, in g","    return n if n <= 3 else g(n) * g(n-1) * g(n-2) * g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 184, in g","    return n if n <= 3 else g(n) * g(n-1) * g(n-2) * g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 184, in g","    return n if n <= 3 else g(n) * g(n-1) * g(n-2) * g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 184, in g","    return n if n <= 3 else g(n) * g(n-1) * g(n-2) * g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 184, in g","    return n if n <= 3 else g(n) * g(n-1) * g(n-2) * g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 184, in g","    return n if n <= 3 else g(n) * g(n-1) * g(n-2) * g(n-3)","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     10","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":108,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n                                            =>           \r\n                                            =>           \r\n    def mult_seven(k):                      =>           \r\n        if k % 7 == 0:                      =>           \r\n            return True                     =>           \r\n        else:                               =>           \r\n            return False                    =>           \r\n    def pingpong1(pos, val):                =>           \r\n        if pos == n:                        =>           \r\n            return val                      =>           \r\n        if mult_seven(val):                 =>           \r\n            return val-1                    =>           \r\n        if has_seven(val):                  =>           \r\n            return val-1                    =>           \r\n        return pingpong1(pos,val)           =>           \r\n    pingpong1(1, 1)                         =>           \r\n                                            =>           \r\n        return n* g(n-1) + g(n-1)           <=           \r\n            n -= 1                          <=           \r\n            n -= 1                          <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return n* g(n-1) + g(n-1)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":109,"studentId":0,"date":null,"diff":"\r\nInputObject                                                   SideIndicator\r\n-----------                                                   -------------\r\n    return n if n <= 3 else g(n -1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n    return n if n <= 3 else g(n -1) * g(n-2) * g(n-3)         <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    return n if n <= 3 else g(n -1) * g(n-2) * g(n-3)\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    return n if n <= 3 else g(n -1) + 2 * g(n-2) + 3 * g(n-3)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":110,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n    result=0                                      <=           \r\n    a=1                                           <=           \r\n    def G(a):                                     <=           \r\n        nextnumber=a*(n-a)                        <=           \r\n        if n-a>3:                                 <=           \r\n            nextnumber=0                          <=           \r\n        result=result+nextnumber                  <=           \r\n        if n-a>3:                                 <=           \r\n            return G(a+1)                         <=           \r\n        if a==3:                                  <=           \r\n            return result                         <=           \r\n        return G(a+1)                             <=           \r\n    def value(a):                                 <=           \r\n        if n-a>3:                                 <=           \r\n            n=n-1                                 <=           \r\n            result=0                              <=           \r\n            return G(a)                           <=           \r\n    return G(a)+value(a)                          <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    result=0\n    a=1\n    def G(a):\n        nextnumber=a*(n-a)\n        if n-a>3:\n            nextnumber=0\n        result=result+nextnumber\n        if n-a>3:\n            return G(a+1)\n        if a==3:\n            return result\n        return G(a+1)\n    def value(a):\n        if n-a>3:\n            n=n-1\n            result=0\n            return G(a)\n    return G(a)+value(a)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    result = 0\r\n    a = 1\r\n    def G(a):\r\n        nextnumber = a*(n-a)\r\n        if n-a>3:\r\n            nextnumber = 0\r\n        result = result+nextnumber\r\n        if n-a>3:\r\n            return \r\n        if a==3:\r\n            return result\r\n        return G(a+1)\r\n    def value(a):\r\n        if n-a>3:\r\n            n = n-1\r\n            result = 0\r\n            return G(a)\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 208, in g","    return G(a)+value(a)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 197, in G","    result=result+nextnumber","UnboundLocalError: local variable 'result' referenced before assignment","","# Error: expected","#     10","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":111,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n        return 0                                      <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return 0\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","0","","# Error: expected","#     10","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":112,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    if n <= 3: =>           \r\n    if g <= 3: <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if g <= 3:\n        return n \n    return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n \n    return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 189, in g","    if g <= 3:","TypeError: unorderable types: function() <= int()","","# Error: expected","#     1","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":113,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<= 3:\n        return n\n\n    return g(n-1) + 2*G(n-2) + 3*G(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<= 3:\n        return n\n\n    return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 197, in g","    return g(n-1) + 2*G(n-2) + 3*G(n-3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":114,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n    if n <= 3:                                        =>           \r\n        return n                                      =>           \r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n    current, next = 0, 1                              =>           \r\n    while n >= 3:                                     =>           \r\n        current, next = next,                         =>           \r\n    else:                                             =>           \r\n                                                      =>           \r\n                                                      =>           \r\n                                                      =>           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","","# Error: expected","#     1","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":115,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    if n <= 3: =>           \r\n    if n < 3:  <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #G(4) = G(3) + 2 G(2) + 3 G(1) + 4 G(0)\n\n    if n < 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n\n\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #G(4) = G(3) + 2 G(2) + 3 G(1) + 4 G(0)\n\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n\n\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\"))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\"))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(LeafWildcard(\"BinaryExpressionNode\")), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","4","","# Error: expected","#     3","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":116,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    if n <= 3: =>           \r\n    if n < 3:  <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #G(4) = G(3) + 2 G(2) + 3 G(1) + 4 G(0)\n\n    if n < 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n\n\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #G(4) = G(3) + 2 G(2) + 3 G(1) + 4 G(0)\n\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n\n\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\"))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\"))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(LeafWildcard(\"BinaryExpressionNode\")), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","4","","# Error: expected","#     3","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":117,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        k = 1\n        return G(n-1) + 2*G(n-2) + 3*G(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        k = 1\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        k = 1\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 192, in g","    return G(n-1) + 2*G(n-2) + 3*G(n-3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":118,"studentId":0,"date":null,"diff":"\r\nInputObject                                                       SideIndicator\r\n-----------                                                       -------------\r\n        else:                                                     =>           \r\n            return helper(x-1) + 2 * helper(x-2) + 3* helper(x-3) =>           \r\n        elif x<=5:                                                <=           \r\n            helper(x-1) + 2 * helper(x-2) + 3 * helper(x-3)       <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def helper(x):\n        if x <=3:\n            return x\n        elif x<=5:\n            helper(x-1) + 2 * helper(x-2) + 3 * helper(x-3)\n\n    return helper(n)\n\n\n    #G(n) = n,                                       if n <= 3\n    #G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def helper(x):\n        if x <=3:\n            return x\n        else:\n            return helper(x-1) + 2 * helper(x-2) + 3* helper(x-3)\n\n    return helper(n)\n\n\n    #G(n) = n,                                       if n <= 3\n    #G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","","# Error: expected","#     10","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":119,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n        return g(n-1) + g(n-2) + g(n-3)               <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return g(n-1) + g(n-2) + g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n==1:\r\n        return 1\r\n    elif n==2:\r\n        return 2\r\n    elif n==3:\r\n        return 3\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":120,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        return g_term(n)                              =>           \r\n        return g(n-1) + 2*g(n-2) +3*g(n-3)            =>           \r\n    else:                                             =>           \r\n    return g_term(n-1) + 2*g_term(n-2) +3*g_term(n-3) <=           \r\n        return n                                      <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def g_term(n):\n        if n<=3:\n            return n\n        else:\n            return g_term(n-1)\n    if n<=3:\n        return n\n    return g_term(n-1) + 2*g_term(n-2) +3*g_term(n-3)\n\n\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def g_term(n):\n        if n<=3:\n            return n\n        else:\n            return g_term(n-1)\n    if n<=3:\n        return g_term(n)\n    else:\n        return g(n-1) + 2*g(n-2) +3*g(n-3)\n\n\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    def g_term(n):\r\n        if n<=3:\r\n            return n\r\n        else:\r\n            return g(n-1)\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g_term(n-2)+3*g_term(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","15","","# Error: expected","#     22","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":121,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return G(n-1)+2 * G(n-2)+3 *G(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return g(n-1)+2 * g(n-2)+3 *g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 188, in g","    return G(n-1)+2 * G(n-2)+3 *G(n-3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":122,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n            return b + rec(x+1, b-1)       =>           \r\n            return x * rec(x+1, b-1)       =>           \r\n            return b + recusrion(x+1, b-1) <=           \r\n            return x * recusrion(x+1, b-1) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    def rec(x, b):\n        if x == n+1:\n            return n\n        elif b <= 3:\n            return b + recusrion(x+1, b-1)\n        else:\n            return x * recusrion(x+1, b-1)\n    return rec(1, n)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    def rec(x, b):\n        if x == n+1:\n            return n\n        elif b <= 3:\n            return b + rec(x+1, b-1)\n        else:\n            return x * rec(x+1, b-1)\n    return rec(1, n)\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    def rec(x, b):\r\n        if x==n+1:\r\n            return \r\n        elif b<=3:\r\n            return b+recusrion(x+1, b-1)\r\n        else:\r\n            return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    return rec(1, n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 202, in g","    return rec(1, n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 201, in rec","    return x * recusrion(x+1, b-1)","NameError: name 'recusrion' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":123,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n        return g(n-1) + 2 * g(n-2) + 3          <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","19","","# Error: expected","#     22","# but got","#     19","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":124,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    if n <= 3: =>           \r\n    if n >= 3: <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n >= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\"))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\"))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(LeafWildcard(\"BinaryExpressionNode\")), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 181, in g","    return g(n-1) + 2*g(n-2) + 3*g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 181, in g","    return g(n-1) + 2*g(n-2) + 3*g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 181, in g","    return g(n-1) + 2*g(n-2) + 3*g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 181, in g","    return g(n-1) + 2*g(n-2) + 3*g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 181, in g","    return g(n-1) + 2*g(n-2) + 3*g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 181, in g","    return g(n-1) + 2*g(n-2) + 3*g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 178, in g","    if n >= 3:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     1","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":125,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n    return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n    return n(n-1) + 2*g(n-2) + 3*g(n-3) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return n(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 186, in g","    return n(n-1) + 2*g(n-2) + 3*g(n-3)","TypeError: 'int' object is not callable","","# Error: expected","#     10","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":126,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        return g(n-1)+2 * g(n-2)+3 * g(n-3) =>           \r\n        return g(n-1)+1 * g(n-2)+3 * g(n-3) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else: \n        return g(n-1)+1 * g(n-2)+3 * g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else: \n        return g(n-1)+2 * g(n-2)+3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","8","","# Error: expected","#     10","# but got","#     8","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":127,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n    if n>= 0 and n<=3:                      =>           \r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n    if n >= 0 and n<=3:                     <=           \r\n        return n-1 * g(n-1)                 <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n >= 0 and n<=3:\n        return n\n    else:\n        return n-1 * g(n-1)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n>= 0 and n<=3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","1","","# Error: expected","#     10","# but got","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":128,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def identity(n): \n        return n\n    def other_cases(n): \n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n    if n <= 3:\n        return identity(n)\n    if n > 3: \n        return other_cases(n)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def identity(n): \n        return n\n    def other_cases(n): \n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n    if n <= 3:\n        return identity(n)\n    if n > 3: \n        return other_cases(n)\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    def identity(n):\r\n        return n\r\n    def other_cases(n):\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    if n<=3:\r\n        return identity(n)\r\n    if n>3:\r\n        return other_cases(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 191, in g","    return other_cases(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 187, in other_cases","    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":129,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return G(n-1) + 2 * G(n-2) + 3 * G(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 182, in g","    return G(n-1) + 2 * G(n-2) + 3 * G(n-3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":130,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n        g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)    <=           \r\n    else:                                         <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","","# Error: expected","#     10","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":131,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n        return g(n-1) + 2*g(n-2) + 3*(n-3) =>           \r\n        while i <= 3:                      =>           \r\n            result += i*(n - i)            =>           \r\n            i += 1                         =>           \r\n        return result                      =>           \r\n    else:                                  =>           \r\n        g(n-1) + 2*g(n-2) + 3*(n-3)        <=           \r\n    while n >= i:                          <=           \r\n        result += i*(n - i)                <=           \r\n        i += 1                             <=           \r\n    return result                          <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        g(n-1) + 2*g(n-2) + 3*(n-3)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*(n-3)\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","","# Error: expected","#     10","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":132,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n    if n <= 3:                               =>           \r\n        return g(n-1) + 2*g(n-2) + 3 *g(n-3) =>           \r\n    if n <=3:                                <=           \r\n        return g(n-1) + 2*g(n-1) + 3 *g(n-3) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-1) + 3 *g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3 *g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","12","","# Error: expected","#     10","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":133,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)   =>           \r\n    return n*g(n-1)+2*g(n-2)+3*g(n-3) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if(n<4):\n        return n\n    return n*g(n-1)+2*g(n-2)+3*g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if(n<4):\n        return n\n    return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if (n<4):\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\"))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"any\"))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","19","","# Error: expected","#     10","# but got","#     19","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":134,"studentId":0,"date":null,"diff":"\r\nInputObject                                               SideIndicator\r\n-----------                                               -------------\r\n        return g(n - 1) + (2 * g(n - 2)) + (3 * g(n - 3)) =>           \r\n    stop = n - 3                                          <=           \r\n        return (n - 1) + g(n - 1)                         <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    stop = n - 3\n    if n <= 3:\n        return n\n    else: \n        return (n - 1) + g(n - 1)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else: \n        return g(n - 1) + (2 * g(n - 2)) + (3 * g(n - 3))\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    stop = n-3\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":135,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n    return z(n - 1) + 2 * z(n - 2) + 3 * z(n - 3) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return z(n - 1) + 2 * z(n - 2) + 3 * z(n - 3)\n\n#     tot = 0\n#     count = 1\n#     if n <= 3:\n#         return identity(n)\n#         tot += n\n#     elif:\n#         tot += g(n - 1) * counter\n#         return tot\n\n\n#     def counter:\n#         if count <= n - 1:\n#             return count += 1 \n      \n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n#     tot = 0\n#     count = 1\n#     if n <= 3:\n#         return identity(n)\n#         tot += n\n#     elif:\n#         tot += g(n - 1) * counter\n#         return tot\n\n\n#     def counter:\n#         if count <= n - 1:\n#             return count += 1 \n      \n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 226, in g","    return z(n - 1) + 2 * z(n - 2) + 3 * z(n - 3)","NameError: name 'z' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":136,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 197, in g","    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":137,"studentId":0,"date":null,"diff":"\r\nInputObject                                            SideIndicator\r\n-----------                                            -------------\r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)  =>           \r\n#        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) <=           \r\n    sum = 0                                            <=           \r\n        for i in range(1,4):                           <=           \r\n            sum = sum + i * g_iter(n-i)                <=           \r\n        return sum                                     <=           \r\n#    if n <= 3:                                        <=           \r\n#        return n                                      <=           \r\n#    else:                                             <=           \r\n                                                       <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n#    if n <= 3:\n#        return n\n#    else:\n#        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n    sum = 0\n    if n <= 3:\n        return n\n    else:\n        for i in range(1,4):\n            sum = sum + i * g_iter(n-i)\n        return sum\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","22",">>> from construct_check import check",">>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\construct_check.py\", line 86, in check","    return ExclusionChecker(disallow).check(source_file, checked_funcs, source)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\construct_check.py\", line 170, in check","    p = parse(open(source_file).read(), source_file)","  File \"C:\\Users\\Gustavo\\Anaconda3\\lib\\ast.py\", line 35, in parse","    return compile(source, filename, mode, PyCF_ONLY_AST)","  File \"hw02.py\", line 1","    ???HW_SOURCE_FILE = 'hw02.py'","                    ^","SyntaxError: invalid character in identifier","","# Error: expected","#     True","# but got","#     SyntaxError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":138,"studentId":0,"date":null,"diff":"\r\nInputObject                                         SideIndicator\r\n-----------                                         -------------\r\n        return g(n-1) + 2 * (g(n-2)) + 3 * (g(n-3)) =>           \r\n        return g(n-1) + 2(g(n-2)) + 3(g(n-3))       <=           \r\n\r\n\r\n","before":"def g(n):\n\t\"\"\"Return the value of G(n), computed recursively.\n\n\t>>> g(1)\n\t1\n\t>>> g(2)\n\t2\n\t>>> g(3)\n\t3\n\t>>> g(4)\n\t10\n\t>>> g(5)\n\t22\n\t>>> from construct_check import check\n\t>>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n\tTrue\n\t\"\"\"\n\tif n <= 3:\n\t\treturn n\n\telse:\n\t\treturn g(n-1) + 2(g(n-2)) + 3(g(n-3))\n\n","after":"def g(n):\n\t\"\"\"Return the value of G(n), computed recursively.\n\n\t>>> g(1)\n\t1\n\t>>> g(2)\n\t2\n\t>>> g(3)\n\t3\n\t>>> g(4)\n\t10\n\t>>> g(5)\n\t22\n\t>>> from construct_check import check\n\t>>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n\tTrue\n\t\"\"\"\n\tif n <= 3:\n\t\treturn n\n\telse:\n\t\treturn g(n-1) + 2 * (g(n-2)) + 3 * (g(n-3))\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 180, in g","    return g(n-1) + 2(g(n-2)) + 3(g(n-3))","TypeError: 'int' object is not callable","","# Error: expected","#     10","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":139,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n    if n == 4:                              <=           \r\n        return 10                           <=           \r\n        return g(n-3) + 10                  <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    if n == 4:\n        return 10\n    else:\n        return g(n-3) + 10\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    if n==4:\r\n        return 10\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","12","","# Error: expected","#     22","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":140,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return G(n-1)+2*G(n-2)+3*G(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 191, in g","    return G(n-1)+2*G(n-2)+3*G(n-3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":141,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        return g(n-1)+2 * g(n-2)+3 * g(n-3) =>           \r\n        return g(n-1) * g(n-2) * g(n-3)     <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) * g(n-2) * g(n-3)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1)+2 * g(n-2)+3 * g(n-3)\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":142,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n        return g(n-1) + 2 * g(n-2) + 3 * (n-3) =>           \r\n        return g*g(n-1)                        <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g*g(n-1)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * (n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 193, in g","    return g*g(n-1)","TypeError: unsupported operand type(s) for *: 'function' and 'int'","","# Error: expected","#     10","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":143,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n        return g(n-1) + 2 * g(n-2) * g(n-3)     <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) * g(n-3)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","7","","# Error: expected","#     10","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":144,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n        n -= 1                                        <=           \r\n        return (n - 2) * g(n - (n - 3))               <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        n -= 1\n        return (n - 2) * g(n - (n - 3))\n\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":145,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n    else:                                       =>           \r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n    if n > 3:                                   <=           \r\n        return n + n * g(n-1)                   <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    if n > 3:\n        return n + n * g(n-1)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    if n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","16","","# Error: expected","#     10","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":146,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n    if n > 3:                                   =>           \r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n        return n                                =>           \r\n    return g(n)                                 =>           \r\n    \"\"\"def add_function(n):                     =>           \r\n            return g(n-1)                       =>           \r\n    return add_function(n)\"\"\"                   =>           \r\n    else:                                       =>           \r\n                                                =>           \r\n                                                =>           \r\n    def add_function(n):                        <=           \r\n            return g(n-1) + 5                   <=           \r\n    return add_function(n)                      <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    \"\"\"def add_function(n):\n        if n > 3:\n            return n+g(n-1) + 3 \n        else:\n            return n\n\n    return add_function(n)  #problem- stopping when n<3\"\"\"\n\n\n    def add_function(n):\n        if n > 3:\n            return g(n-1) + 5\n        else:\n            return n\n\n    return add_function(n)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    \"\"\"def add_function(n):\n        if n > 3:\n            return n+g(n-1) + 3 \n        else:\n            return n\n\n    return add_function(n)  #problem- stopping when n<3\"\"\"\n\n    if n > 3:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n    else:\n        return n\n\n    return g(n)\n\n\n    \"\"\"def add_function(n):\n        if n > 3:\n            return g(n-1) \n        else:\n            return n\n\n    return add_function(n)\"\"\"\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    def add_function(n):\r\n        if n>3:\r\n            return g(n-1)+2*g(n-2)+3*g(n-3)\r\n        else:\r\n            return n\r\n    return add_function(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","8","","# Error: expected","#     10","# but got","#     8","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":147,"studentId":0,"date":null,"diff":"\r\nInputObject   SideIndicator\r\n-----------   -------------\r\n    >>> g(5)  =>           \r\n    >>> g(5)e <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)e\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\\\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\\\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)e","Traceback (most recent call last):","    g(5)e","        ^","SyntaxError: invalid syntax","","# Error: expected","#     22","# but got","#     SyntaxError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":148,"studentId":0,"date":null,"diff":"\r\nInputObject                                               SideIndicator\r\n-----------                                               -------------\r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)     =>           \r\n    def coefficient_func(x, m):                           <=           \r\n        maximu = m                                        <=           \r\n        if x == maximu:                                   <=           \r\n            return x                                      <=           \r\n        elif m == 3:                                      <=           \r\n            return 3 * (maximu - 1)                       <=           \r\n            return x * m + coefficient_func(x + 1, m - 1) <=           \r\n        return coefficient_func(1, n)                     <=           \r\n        else:                                             <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x, m):\n        maximu = m\n        if x == maximu:\n            return x\n        elif m == 3:\n            return 3 * (maximu - 1)\n        else:\n            return x * m + coefficient_func(x + 1, m - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(1, n)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    def coefficient_func(x, m):\r\n        maximu = m\r\n        if x==maximu:\r\n            return \r\n        elif m==3:\r\n            return 3*(maximu-1)\r\n        else:\r\n            return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return coefficient_func(1, n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","16","","# Error: expected","#     22","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":149,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n        return g(n-1)+ (2*g(n-2)) + (3*g(n-3)) =>           \r\n        return g(n-1)*g(n-2)                   <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else: \n        return g(n-1)*g(n-2)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else: \n        return g(n-1)+ (2*g(n-2)) + (3*g(n-3))\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":150,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n    if n <= 3:                                  =>           \r\n        return n                                =>           \r\n    if n > 3:                                   =>           \r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n    \"*** YOUR CODE HERE ***\"                    <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n > 3:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","","# Error: expected","#     1","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":151,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n        return g((n - 1) + 2 * (n - 2) + 3 * (n - 3)) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g((n - 1) + 2 * (n - 2) + 3 * (n - 3))\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 212, in g","    return g((n - 1) + 2 * (n - 2) + 3 * (n - 3))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 212, in g","    return g((n - 1) + 2 * (n - 2) + 3 * (n - 3))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 212, in g","    return g((n - 1) + 2 * (n - 2) + 3 * (n - 3))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 212, in g","    return g((n - 1) + 2 * (n - 2) + 3 * (n - 3))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 212, in g","    return g((n - 1) + 2 * (n - 2) + 3 * (n - 3))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 212, in g","    return g((n - 1) + 2 * (n - 2) + 3 * (n - 3))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 209, in g","    if n<=3:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     10","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":152,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n        if n == 0 or x == 4: =>           \r\n        if n == 0:           <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def computer(n, x):\n        if n == 0:\n            return 0\n        return x*g(n-1) + computer(n-1, x+1)\n    return computer(n, 1)\n\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def computer(n, x):\n        if n == 0 or x == 4:\n            return 0\n        return x*g(n-1) + computer(n-1, x+1)\n    return computer(n, 1)\n\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    def computer(n, x):\r\n        if n==0:\r\n            return 0\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    return computer(n, 1)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","26","","# Error: expected","#     22","# but got","#     26","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":153,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return G(n-1) + 2*G(n-2) + 3*G(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 191, in g","    return G(n-1) + 2*G(n-2) + 3*G(n-3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":154,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n    if n == 0:                                        =>           \r\n        return 0                                      =>           \r\n    elif n <= 3:                                      =>           \r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n    if n <= 3:                                        <=           \r\n        return accumulate(add, 0, n, G)               <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return accumulate(add, 0, n, G)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 187, in g","    return accumulate(add, 0, n, G)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":155,"studentId":0,"date":null,"diff":"\r\nInputObject                                         SideIndicator\r\n-----------                                         -------------\r\n                                                    =>           \r\n        return g(n-1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n                                                    =>           \r\n    counter = 0                                     <=           \r\n        counter += 1                                <=           \r\n        counter * g(n-1)                            <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    counter = 0\n    if n <= 3:\n        return n\n    else:\n        counter += 1\n        counter * g(n-1)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","","# Error: expected","#     10","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":156,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n        answer = g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n        while n > counter:                        <=           \r\n            answer = (g(n-counter) * counter)     <=           \r\n            counter += 1                          <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    answer = n\n    counter = 1\n    if n <= 3:\n        return answer\n    else:\n        while n > counter:\n            answer = (g(n-counter) * counter)\n            counter += 1\n    return answer\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    answer = n\n    counter = 1\n    if n <= 3:\n        return answer\n    else:\n        answer = g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n    return answer\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    answer = n\r\n    counter = 1\r\n    if n<=3:\r\n        return answer\r\n    else:\r\n        while n>counter:\r\n            answer = (g(n-counter)*counter)\r\n            counter += 1\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":157,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n    return g(n-1) + 2 * g(n-2) + 3* g(n-3) =>           \r\n    return g(n-1) + g(n-2) + g(n-3)        <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    return g(n-1) + g(n-2) + g(n-3)\n\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    return g(n-1) + 2 * g(n-2) + 3* g(n-3)\n\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":158,"studentId":0,"date":null,"diff":"\r\nInputObject     SideIndicator\r\n-----------     -------------\r\n    print (n-1) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n       return n\n    print (n-1)\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n       return n\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    print(n-1)\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","3","10","","# Error: expected","#     10","# but got","#     3","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":159,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n    if n < 4:                                   =>           \r\n        return n                                =>           \r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n    if n <= 3:                                  <=           \r\n        return (n-1)*n                          <=           \r\n        return g(n-1) + n                       <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return (n-1)*n\n    else:\n        return g(n-1) + n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n < 4:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","0","","# Error: expected","#     1","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":160,"studentId":0,"date":null,"diff":"\r\nInputObject                                               SideIndicator\r\n-----------                                               -------------\r\n            return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n            return (n - 1) + 2 * (n - 2) + 3 * (n - 3)    <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def helper(n):\n        if n <= 3:\n            return n\n        else:\n            return (n - 1) + 2 * (n - 2) + 3 * (n - 3)\n    return helper(n)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def helper(n):\n        if n <= 3:\n            return n\n        else:\n            return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n    return helper(n)\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    def helper(n):\r\n        if n<=3:\r\n            return n\r\n        else:\r\n            return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    return helper(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","16","","# Error: expected","#     22","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":161,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"def counter(n, i):\n        if n - i <= 3:\n            return n - i\n        else:\n            i += 1\n            return i * counter(n - i, i) + counter(n - (i + 1), i +1)\n    return counter(n, 0)\"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * G(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"def counter(n, i):\n        if n - i <= 3:\n            return n - i\n        else:\n            i += 1\n            return i * counter(n - i, i) + counter(n - (i + 1), i +1)\n    return counter(n, 0)\"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 205, in g","    return g(n - 1) + 2 * g(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":162,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n    if n <= 3:                                  =>           \r\n        return n                                =>           \r\n    elif n > 3:                                 =>           \r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n    # if n == 1:                                =>           \r\n    #     return 1                              =>           \r\n    # if n <=3:                                 =>           \r\n    #     G = lambda n: n                       =>           \r\n    #     return G(n)                           =>           \r\n    # if n > 3:                                 =>           \r\n    #     G = lambda n: g(n-1)                  =>           \r\n    #     return G(n) + g(n-1)                  =>           \r\n                                                =>           \r\n                                                =>           \r\n                                                =>           \r\n    if n == 1:                                  <=           \r\n        return 1                                <=           \r\n    if n <=3:                                   <=           \r\n        G = lambda n: n                         <=           \r\n        return G(n)                             <=           \r\n    if n > 3:                                   <=           \r\n        G = lambda n: g(n-1)                    <=           \r\n        return G(n) + g(n-1)                    <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    if n <=3:\n        G = lambda n: n\n        return G(n) \n    if n > 3:\n        G = lambda n: g(n-1)\n        return G(n) + g(n-1)\n        \n     \n    \n    \n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    elif n > 3:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n\n\n    # if n == 1:\n    #     return 1\n    # if n <=3:\n    #     G = lambda n: n\n    #     return G(n) \n    # if n > 3:\n    #     G = lambda n: g(n-1)\n    #     return G(n) + g(n-1)\n        \n     \n    \n    \n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n==1:\r\n        return 1\r\n    if n<=3:\r\n        G = lambda n: n\r\n        return G(n)\r\n    if n>3:\r\n        G = lambda n: g(n-1)\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":163,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return (G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3))\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return (g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3))\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return (g(n-1)+2*g(n-2)+3*g(n-3))","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 201, in g","    return (G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3))","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":164,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    if n <= 3: =>           \r\n    if n > 3:  <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n > 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\"))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\"))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(LeafWildcard(\"BinaryExpressionNode\")), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 152, in g","    return g(n-1) + 2*g(n-2) + 3*g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 152, in g","    return g(n-1) + 2*g(n-2) + 3*g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 152, in g","    return g(n-1) + 2*g(n-2) + 3*g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 152, in g","    return g(n-1) + 2*g(n-2) + 3*g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 152, in g","    return g(n-1) + 2*g(n-2) + 3*g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 152, in g","    return g(n-1) + 2*g(n-2) + 3*g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 149, in g","    if n > 3:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     1","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":165,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    if n > 3:  =>           \r\n    if n >= 3: <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n >= 3:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n    else:\n        return n\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n > 3:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n    else:\n        return n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","4","","# Error: expected","#     3","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":166,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 189, in g","    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":167,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    if n <= 3: =>           \r\n    if n<= 3:  <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<= 3:\n        return(n)\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return(n)\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return (n)\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 198, in g","    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":168,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n        return g(n-1)+2*g(n-2)+3*g(n-3) =>           \r\n        return g(n-1)*g(n-2)*g(n-3)     <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1)*g(n-2)*g(n-3)\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1)+2*g(n-2)+3*g(n-3)\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":169,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n    return g_recursive(n) =>           \r\n    return g_recursive    <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def g_recursive(n):\n        if n <= 0:\n            return 0\n        if n <= 3:\n            return n\n        else:\n            return g_recursive(n - 1) + 2 * g_recursive(n - 2) + 3 * g_recursive(n - 3)\n    return g_recursive\n\n    \n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def g_recursive(n):\n        if n <= 0:\n            return 0\n        if n <= 3:\n            return n\n        else:\n            return g_recursive(n - 1) + 2 * g_recursive(n - 2) + 3 * g_recursive(n - 3)\n    return g_recursive(n)\n\n    \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","<function g.<locals>.g_recursive at 0x00000240EEA58598>","","# Error: expected","#     1","# but got","#     <function g.<locals>.g_recursive at 0x00000240EEA58598>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":170,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                 SideIndicator\r\n-----------                                                                                 -------------\r\n    if n <= 3:                                                                              =>           \r\n        G_output = n                                                                        =>           \r\n    if n > 3:                                                                               =>           \r\n        G_output = g(n-1) + 2 * g(n-2) + 3 * g(n-3)                                         =>           \r\n    return G_output                                                                         =>           \r\n    def G_helper(n, i):                                                                     <=           \r\n        if n <= 3:                                                                          <=           \r\n            return n                                                                        <=           \r\n        if n > 3:                                                                           <=           \r\n            if i == n:                                                                      <=           \r\n                return                                                                      <=           \r\n            else:                                                                           <=           \r\n                return G_helper(n-1, n-1) + 2 * G_helper(n-2, n-1) + 3 * G_helper(n-3, n-1) <=           \r\n    return G_helper(n, n)                                                                   <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def G_helper(n, i):\n        if n <= 3:\n            return n\n        if n > 3:\n            if i == n:\n                return\n            else:\n                return G_helper(n-1, n-1) + 2 * G_helper(n-2, n-1) + 3 * G_helper(n-3, n-1)\n    return G_helper(n, n)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        G_output = n\n    if n > 3:\n        G_output = g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n    return G_output\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","","# Error: expected","#     10","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":171,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n        return g(n-1) + g(n-2) + g(n-3)         <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + g(n-2) + g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":172,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n        g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)        <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    if n <= 3:\n        return n\n    else:\n        g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n        \n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n        \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","","# Error: expected","#     10","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":173,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n    first_number = base                               =>           \r\n    i = 0                                             =>           \r\n    while  i <= n:                                    =>           \r\n        i = i+ 1                                      =>           \r\n        first_number = combiner(term(i),first_number) =>           \r\n    return first_number                               =>           \r\n        return g(n-1)+2*g(n-2)+3*g(n-3)               =>           \r\n    return combiner(base,)                            <=           \r\n        return g(n-1)*g(n-2)*g(n-3)                   <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n > 3:\n        return g(n-1)*g(n-2)*g(n-3)\n    else:\n        return n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n > 3:\n        return g(n-1)+2*g(n-2)+3*g(n-3)\n    else:\n        return n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    else:\r\n        return n","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":174,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        return n                            =>           \r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n                                            =>           \r\n    if n<=3:                                =>           \r\n        return n                            =>           \r\n    while n>3:                              =>           \r\n        i= 1                                =>           \r\n                                            =>           \r\n                                            =>           \r\n                                            =>           \r\n                                            =>           \r\n                                            =>           \r\n                                            =>           \r\n                                            =>           \r\n                                            =>           \r\n        g = n                               <=           \r\n        return g                            <=           \r\n        k=n                                 <=           \r\n        return g(k-1) + 2*g(k-2) + 3*g(k-3) <=           \r\n        k -= 1                              <=           \r\n    \"*** YOUR CODE HERE ***\"                <=           \r\n    \"*** YOUR CODE HERE ***\"                <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        g = n\n        return g\n    else:\n        k=n\n        return g(k-1) + 2*g(k-2) + 3*g(k-3)\n        k -= 1\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n       \n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 207, in g","    return g(k-1) + 2*g(k-2) + 3*g(k-3)","UnboundLocalError: local variable 'g' referenced before assignment","","# Error: expected","#     10","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":175,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * G(n-2) + 3 * g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 190, in g","    return g(n-1) + 2 * G(n-2) + 3 * g(n-3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":176,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    if n <= 3: =>           \r\n    if n < 3:  <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n < 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\"))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\"))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(LeafWildcard(\"BinaryExpressionNode\")), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","4","","# Error: expected","#     3","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":177,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n        return g(n-1)+2*g(n-2)+3*g(n-3) =>           \r\n        return g(n-1)                   <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":178,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        return rest(3)   =>           \r\n        return rest(n-1) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<= 3:\n        return n\n    else:\n        def rest(i):\n            if i ==1:\n                return i*g(n-i)\n            else:\n                k = i*g(n-i)\n                return k + rest(i-1)\n        return rest(n-1)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<= 3:\n        return n\n    else:\n        def rest(i):\n            if i ==1:\n                return i*g(n-i)\n            else:\n                k = i*g(n-i)\n                return k + rest(i-1)\n        return rest(3)\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        def rest(i):\r\n            if i==1:\r\n                return \r\n            else:\r\n                k = i*g(n-i)\r\n                return g(n-1)+2*g(n-2)+3*g(n-3)\r\n        return rest(n-1)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","26","","# Error: expected","#     22","# but got","#     26","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":179,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 204, in g","    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":180,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n                                            <=           \r\n        return g(n-1) + g(n-2) + g(n-3)     <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    if n <= 3:\n        return n\n    else:\n       \n        return g(n-1) + g(n-2) + g(n-3)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n       \n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":181,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n                      =>           \r\n            print (n) <=           \r\nmove_stack(3, 1, 3)   <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def G(n):\n        if n <= 3:\n            return n\n        else:\n            print (n)\n            return G(n-1) + 2 * G(n-2) + 3 * G(n-3)\n\n    return G(n)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def G(n):\n        if n <= 3:\n            return n\n        else:\n            return G(n-1) + 2 * G(n-2) + 3 * G(n-3)\n\n    return G(n)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    def G(n):\r\n        if n<=3:\r\n            return n\r\n        else:\r\n            print(n)\r\n            return g(n-1)+2*G(n-2)+3*G(n-3)\r\n    return G(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","Move the top disk from rod 1 to rod 3","Move the top disk from rod 1 to rod 2","Move the top disk from rod 3 to rod 2","Move the top disk from rod 1 to rod 3","Move the top disk from rod 2 to rod 1","Move the top disk from rod 2 to rod 3","Move the top disk from rod 1 to rod 3","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","4","10","","# Error: expected","#     10","# but got","#     4","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":182,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n            =>           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n > 3:\n        return counter(n)\n    \n    def counter(k):\n        return g(k - 1) + 2*g(k-2) + 3*g(k-3)\n\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    \n    def counter(k):\n        return g(k - 1) + 2*g(k-2) + 3*g(k-3)\n\n    if n > 3:\n        return counter(n)\n    \n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    if n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    def counter(k):\r\n        return g(k-1)+2*g(k-2)+3*g(k-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 204, in g","    return counter(n)","UnboundLocalError: local variable 'counter' referenced before assignment","","# Error: expected","#     10","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":183,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n    return g(n-1) + (2 * g(n-2)) + (3 * g(n-3)) =>           \r\n    return (n-1) + (2 * g(n-1)) + (3 * g(n-2))  <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return (n-1) + (2 * g(n-1)) + (3 * g(n-2))\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(n-1) + (2 * g(n-2)) + (3 * g(n-3))\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":184,"studentId":0,"date":null,"diff":"\r\nInputObject                                         SideIndicator\r\n-----------                                         -------------\r\n    if n<=3:                                        =>           \r\n        return n                                    =>           \r\n    return g(n-1)+ 2*g(n-2)+3*g(n-3)                =>           \r\n                                                    =>           \r\n                                                    =>           \r\n                                                    =>           \r\n    x=0                                             <=           \r\n    def gre3(n):                                    <=           \r\n        if n<=3:                                    <=           \r\n            return n                                <=           \r\n        x+1                                         <=           \r\n        return x*gre3(n-1)+ x*gre3(n-2)+x*gre3(n-3) <=           \r\n    return gre3(n)                                  <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    x=0\n    def gre3(n):\n        if n<=3:\n            return n\n        x+1\n        return x*gre3(n-1)+ x*gre3(n-2)+x*gre3(n-3)\n    return gre3(n)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n\n    if n<=3:\n        return n\n\n    return g(n-1)+ 2*g(n-2)+3*g(n-3)\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    x = 0\r\n    def gre3(n):\r\n        if n<=3:\r\n            return n\r\n        x+1\r\n        return gre3(n-1)+2*g(n-2)+3*g(n-3)\r\n    return gre3(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","0","","# Error: expected","#     10","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":185,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n        return g(n - 1) + g(n - 2) + 3 * g(n - 3)     <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + g(n - 2) + 3 * g(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","8","","# Error: expected","#     10","# but got","#     8","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":186,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n        return n*g(n-1)                     <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n    \treturn n\n    else:\n    \treturn n*g(n-1)\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n    \treturn n\n    else:\n    \treturn g(n-1) + 2*g(n-2) + 3*g(n-3)\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","12","","# Error: expected","#     10","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":187,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n    if n <= 3:                                  =>           \r\n        return n                                =>           \r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n    else:                                       =>           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","","# Error: expected","#     1","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":188,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n        return g(n - 1) + 2(g(n - 2)) + 3(g(n - 3))   <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    # def helper(n):\n    #     total = 0\n    #     if n == 3:\n    #         total += n\n    #     else:\n    #         total = helper(n-1) + (2 * helper(n-2)) + (3 * helper(n-3))\n    #     return total\n    # return helper(n)\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2(g(n - 2)) + 3(g(n - 3))\n\n    \"\"\"4 = 3 + 2(2) +\n    5 = 10 + 2(3) + 3(2) = 22\"\"\"\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    # def helper(n):\n    #     total = 0\n    #     if n == 3:\n    #         total += n\n    #     else:\n    #         total = helper(n-1) + (2 * helper(n-2)) + (3 * helper(n-3))\n    #     return total\n    # return helper(n)\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n    \"\"\"4 = 3 + 2(2) +\n    5 = 10 + 2(3) + 3(2) = 22\"\"\"\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 204, in g","    return g(n - 1) + 2(g(n - 2)) + 3(g(n - 3))","TypeError: 'int' object is not callable","","# Error: expected","#     10","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":189,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n        return g(n-1)+2*g(n-2)+3*g(n-3) =>           \r\n        return g(n-1)+2*g(n-1)+3*g(n-3) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1)+2*g(n-1)+3*g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","12","","# Error: expected","#     10","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":190,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n        return 6*n -14                      <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return 6*n -14\n  \n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n  \n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","16","","# Error: expected","#     22","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":191,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n            return counter(i, n, total) =>           \r\n            counter(i, n, total)        <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, n, total):\n        if i < 4:\n            total = total + i * g(n-i)\n            i += 1\n            counter(i, n, total)\n        return total\n\n    if n <= 3:\n        return n\n    else:\n        return counter(1,n,0)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, n, total):\n        if i < 4:\n            total = total + i * g(n-i)\n            i += 1\n            return counter(i, n, total)\n        return total\n\n    if n <= 3:\n        return n\n    else:\n        return counter(1,n,0)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    def counter(i, n, total):\r\n        if i<4:\r\n            total = total+i*g(n-i)\r\n            i += 1\r\n            counter(i, n, total)\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return counter(1, n, 0)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":192,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n    if n in [1,2,3]:     =>           \r\n    if n==(1 or 2 or 3): <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n==(1 or 2 or 3):\n        return n\n    else: \n        return g(n-1)+2*g(n-2)+3*g(n-3)\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n in [1,2,3]:\n        return n\n    else: \n        return g(n-1)+2*g(n-2)+3*g(n-3)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 188, in g","    return g(n-1)+2*g(n-2)+3*g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 188, in g","    return g(n-1)+2*g(n-2)+3*g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 188, in g","    return g(n-1)+2*g(n-2)+3*g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 188, in g","    return g(n-1)+2*g(n-2)+3*g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 188, in g","    return g(n-1)+2*g(n-2)+3*g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 188, in g","    return g(n-1)+2*g(n-2)+3*g(n-3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 185, in g","    if n==(1 or 2 or 3):","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     2","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":193,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n    return G(n)      =>           \r\n        if n==1:     <=           \r\n            return 1 <=           \r\n    return G         <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        if n==1:\n            return 1\n        if n<=3:\n            return n\n        if n>3:\n            return G(n-1) + 2*G(n-2) + 3*G(n-3)\n    return G\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        if n<=3:\n            return n\n        if n>3:\n            return G(n-1) + 2*G(n-2) + 3*G(n-3)\n    return G(n)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","<function g.<locals>.G at 0x000002A80BDE76A8>","","# Error: expected","#     1","# but got","#     <function g.<locals>.G at 0x000002A80BDE76A8>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":194,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n        return g(k-1) + 2 * g(k-2) + 3 * g(k-3) =>           \r\n    elif k == (n - 3):                          <=           \r\n        return 3 * (n - 3)                      <=           \r\n        return g(k-1) + 2 * g(k-2)              <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k = n\n    if n <= 3:\n        return n\n    elif k == (n - 3):\n        return 3 * (n - 3)\n    elif k > 3:\n        return g(k-1) + 2 * g(k-2)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k = n\n    if n <= 3:\n        return n\n    elif k > 3:\n        return g(k-1) + 2 * g(k-2) + 3 * g(k-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    k = n\r\n    if n<=3:\r\n        return n\r\n    elif k==(n-3):\r\n        return 3*(n-3)\r\n    elif k>3:\r\n        return g(k-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","7","","# Error: expected","#     10","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":195,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n        g(n-1) + 2*g(n-2) + 3*g(n-3)        <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","","# Error: expected","#     10","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":196,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                  SideIndicator\r\n-----------                                                                  -------------\r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)                        =>           \r\n        i = 0                                                                <=           \r\n        return mul()((g(n - (i + 1)) + (i + 2)), (g(n - (i + 1)) + (i + 2))) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:\n        i = 0\n        return mul()((g(n - (i + 1)) + (i + 2)), (g(n - (i + 1)) + (i + 2)))\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        i = 0\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 195, in g","    return mul()((g(n - (i + 1)) + (i + 2)), (g(n - (i + 1)) + (i + 2)))","TypeError: op_mul expected 2 arguments, got 0","","# Error: expected","#     10","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":197,"studentId":0,"date":null,"diff":"\r\nInputObject                                            SideIndicator\r\n-----------                                            -------------\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)                =>           \r\n        return g(n-1)+2*g(n-2)+3*g(n-3)                =>           \r\n        return g(n-1)*n                                <=           \r\n        return g_iter(n-1)+2*g_iter(n-2)+3*g_iter(n-3) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1)*n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","12","","# Error: expected","#     10","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":198,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:\n        return G(n-1) + 2 * G(n-2) + 3 * G(n-3)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 208, in g","    return G(n-1) + 2 * G(n-2) + 3 * G(n-3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":199,"studentId":0,"date":null,"diff":"\r\nInputObject                                                 SideIndicator\r\n-----------                                                 -------------\r\n    test_then_operate = compose1(term, inner)               =>           \r\n    return accumulate(combiner, base, n, test_then_operate) =>           \r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)                 =>           \r\n    if n <= 3:                                              =>           \r\n    test = compose1(term, inner)                            <=           \r\n    return accumulate(combiner, base, n, test)              <=           \r\n    i = 0                                                   <=           \r\n    def count_up(x):                                        <=           \r\n        i += 1                                              <=           \r\n        return i*x                                          <=           \r\n        return 1                                            <=           \r\n    elif n <= 3:                                            <=           \r\n        return accumulate(mul, 1, n, count_up)              <=           \r\n    if n == 0:                                              <=           \r\n                                                            <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 0\n    def count_up(x):\n        i += 1\n        return i*x\n\n    if n == 0:\n        return 1\n    elif n <= 3:\n        return n\n    else:\n        return accumulate(mul, 1, n, count_up)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    i = 0\r\n    def count_up(x):\r\n        i += 1\r\n        return \r\n    if n==0:\r\n        return 1\r\n    elif n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 193, in g","    return accumulate(mul, 1, n, count_up)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 72, in accumulate","    return combiner(term(n), accumulate(combiner, base, n-1, term))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 185, in count_up","    i += 1","UnboundLocalError: local variable 'i' referenced before assignment","","# Error: expected","#     10","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":200,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n        return g(n-1) + 2*g(n-2) + 3+g(n-3) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3+g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","11","","# Error: expected","#     10","# but got","#     11","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":201,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n            return G(n-1) + 2*G(n-2) + 3*G(n-3) =>           \r\n            return G(n-1)+2*(G(n-2))+3(G(n-3))  <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        if n <= 3:\n            return n\n        else:\n            return G(n-1)+2*(G(n-2))+3(G(n-3))\n\n    return G(n)\n\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        if n <= 3:\n            return n\n        else:\n            return G(n-1) + 2*G(n-2) + 3*G(n-3)\n\n    return G(n)\n\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    def G(n):\r\n        if n<=3:\r\n            return n\r\n        else:\r\n            return G(n-1)+2*g(n-2)+3*g(n-3)\r\n    return G(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 215, in g","    return G(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 213, in G","    return G(n-1)+2*(G(n-2))+3(G(n-3))","TypeError: 'int' object is not callable","","# Error: expected","#     10","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":202,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n    if n <= 3:                              =>           \r\n        return n                            =>           \r\n    if n > 3:                               =>           \r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n    return g(n)                             =>           \r\n                                            =>           \r\n    \"*** YOUR CODE HERE ***\"                <=           \r\n    \"*** YOUR CODE HERE ***\"                <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n > 3:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n    return g(n)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","","# Error: expected","#     1","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":203,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n    if n <= 3:                                =>           \r\n        return n                              =>           \r\n    else:                                     =>           \r\n        return g(n-1)*1 + g(n-2)*2 + g(n-3)*3 =>           \r\n    def counter(i, total):                    <=           \r\n        if n <= 3:                            <=           \r\n            return n                          <=           \r\n        elif i == 3:                          <=           \r\n            return total                      <=           \r\n        else:                                 <=           \r\n            total = total + i*g(n-i)          <=           \r\n            return counter(i + 1, total)      <=           \r\n    return counter(1, 0)                      <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, total):\n        if n <= 3:\n            return n\n        elif i == 3:\n            return total \n        else:\n            total = total + i*g(n-i)\n            return counter(i + 1, total)\n    return counter(1, 0)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return g(n-1)*1 + g(n-2)*2 + g(n-3)*3\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    def counter(i, total):\r\n        if n<=3:\r\n            return n\r\n        elif i==3:\r\n            return g(n-1)+2*g(n-2)+3*g(n-3)\r\n        else:\r\n            total = total+i*g(n-i)\r\n            return counter(i+1, total)\r\n    return counter(1, 0)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","7","","# Error: expected","#     10","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":204,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n    else:                                   =>           \r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n    elif n > 3:                             <=           \r\n        return (g(n + 1)) * (g(n - 1))      <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    elif n > 3: \n        return (g(n + 1)) * (g(n - 1))\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    elif n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 195, in g","    return (g(n + 1)) * (g(n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 195, in g","    return (g(n + 1)) * (g(n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 195, in g","    return (g(n + 1)) * (g(n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 195, in g","    return (g(n + 1)) * (g(n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 195, in g","    return (g(n + 1)) * (g(n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 195, in g","    return (g(n + 1)) * (g(n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 192, in g","    if n <= 3:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     10","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":205,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 202, in g","    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":206,"studentId":0,"date":null,"diff":"\r\nInputObject                                        SideIndicator\r\n-----------                                        -------------\r\n        return g(n -1) + 2 * g(n-2) + 3 * g(n - 3) =>           \r\n                                                   =>           \r\n        return g(n-1) * 2 + 2                      <=           \r\n    \"*** YOUR CODE HERE ***\"                       <=           \r\n                                                   <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) * 2 + 2\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n -1) + 2 * g(n-2) + 3 * g(n - 3)\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","8","","# Error: expected","#     10","# but got","#     8","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":207,"studentId":0,"date":null,"diff":"\r\nInputObject                                              SideIndicator\r\n-----------                                              -------------\r\n        return g(n - 1) + 2  * g(n - 2) + 3 * g(n-3)     =>           \r\n        return (g(n - 1) + 2)  * (g(n - 2) + 3) * g(n-3) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return (g(n - 1) + 2)  * (g(n - 2) + 3) * g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2  * g(n - 2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","25","","# Error: expected","#     10","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":208,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n > 3:\n        return g(n-1) + 2 * G(n-2) + 3 * g(n-3)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n > 3:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    if n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 198, in g","    return g(n-1) + 2 * G(n-2) + 3 * g(n-3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":209,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n        return g(n-1) + (2*g(n-2)) + (3*g(n-3)) =>           \r\n        return g(n-1) + (2*g(n-2)) + (3*g(n-2)) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + (2*g(n-2)) + (3*g(n-2))\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + (2*g(n-2)) + (3*g(n-3))\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+(2*g(n-2))+(3*g(n-3))","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","13","","# Error: expected","#     10","# but got","#     13","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":210,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n            return x*g(n-x) + multiplier(x+1) =>           \r\n            return x*g(n-x) + multiplier(x-1) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def multiplier(x):\n        if n <= 3:\n            return n\n        if x > 3:\n            return 0\n        else:\n            return x*g(n-x) + multiplier(x-1)\n    return multiplier(1)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def multiplier(x):\n        if n <= 3:\n            return n\n        if x > 3:\n            return 0\n        else:\n            return x*g(n-x) + multiplier(x+1)\n    return multiplier(1)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    def multiplier(x):\r\n        if n<=3:\r\n            return n\r\n        if x>3:\r\n            return \r\n        else:\r\n            return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    return multiplier(1)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 196, in g","    return multiplier(1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 195, in multiplier","    return x*g(n-x) + multiplier(x-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 195, in multiplier","    return x*g(n-x) + multiplier(x-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 196, in g","    return multiplier(1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 195, in multiplier","    return x*g(n-x) + multiplier(x-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 196, in g","    return multiplier(1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 190, in multiplier","    if n <= 3:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     10","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":211,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n    if n == 1 or n == 2 or n == 3:                    =>           \r\n        return n                                      =>           \r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n    total = 5                                         =>           \r\n    else:                                             =>           \r\n    \"*** YOUR CODE HERE ***\"                          <=           \r\n    \"*** YOUR CODE HERE ***\"                          <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1 or n == 2 or n == 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","","# Error: expected","#     1","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":212,"studentId":0,"date":null,"diff":"\r\nInputObject                                                          SideIndicator\r\n-----------                                                          -------------\r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)                =>           \r\n        return helper(n - 1) + 2 * helper(n - 2) + 3 * helper(n - 3) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n \n    if n <= 3:\n        return n\n    else:\n        return helper(n - 1) + 2 * helper(n - 2) + 3 * helper(n - 3)\n\n\n\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n \n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n\n\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 197, in g","    return helper(n - 1) + 2 * helper(n - 2) + 3 * helper(n - 3)","NameError: name 'helper' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":213,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n    return g(n-1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n    return                                      <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return \n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(n-1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","","# Error: expected","#     10","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":214,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n            return G(n-1) + 2*G(n-2) + 3*G(n-3) =>           \r\n            return G(n-1) + G(n-2)              <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        if n <= 3:\n            return n\n        if n > 3:\n            return G(n-1) + G(n-2)\n    return G(n)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        if n <= 3:\n            return n\n        if n > 3:\n            return G(n-1) + 2*G(n-2) + 3*G(n-3)\n    return G(n)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    def G(n):\r\n        if n<=3:\r\n            return n\r\n        if n>3:\r\n            return G(n-1)+2*g(n-2)+3*g(n-3)\r\n    return G(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","5","","# Error: expected","#     10","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":215,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n    return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n    return 2 * g(n-1)                       <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return 2 * g(n-1)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":216,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        return x*g(n-1) + (x+1)*g(n-2) + (x+2)*g(n-3) =>           \r\n        return x*g(n-1) + (x+1)*g(n-2)                <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def func_g(n, x):\n        x+=1\n        if n <= 3:\n            return n\n        return x*g(n-1) + (x+1)*g(n-2)\n    return func_g(n, 0)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def func_g(n, x):\n        x+=1\n        if n <= 3:\n            return n\n        return x*g(n-1) + (x+1)*g(n-2) + (x+2)*g(n-3)\n    return func_g(n, 0)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    def func_g(n, x):\r\n        x += 1\r\n        if n<=3:\r\n            return n\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    return func_g(n, 0)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","7","","# Error: expected","#     10","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":217,"studentId":0,"date":null,"diff":"\r\nInputObject                         SideIndicator\r\n-----------                         -------------\r\n    return g(n-1)+2*g(n-2)+3*g(n-3) =>           \r\n    return g(n-1)*2*g(n-2)*3*g(n-3) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    return g(n-1)*2*g(n-2)*3*g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","36","","# Error: expected","#     10","# but got","#     36","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":218,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    elif n>3:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    elif n>3:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    elif n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 190, in g","    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":219,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3: \n        return n\n    else: \n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3: \n        return n\n    else: \n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 203, in g","    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":220,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n        return g(n-1) + 2 *(n-2)+ 3*g(n-3)    =>           \r\n    else:                                     =>           \r\n    elif n<=4:                                <=           \r\n        return n + (x+1)* g(n-1)              <=           \r\n    elif n>=5:                                <=           \r\n        x +=1                                 <=           \r\n        return n + (x+1)* (n-1)+ (x+2)*g(n-2) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x=1\n    if n <= 3:\n        return n\n    elif n<=4:\n        return n + (x+1)* g(n-1)\n    elif n>=5:\n        x +=1\n        return n + (x+1)* (n-1)+ (x+2)*g(n-2)\n    \n       \n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x=1\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 *(n-2)+ 3*g(n-3)\n    \n       \n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    x = 1\r\n    if n<=3:\r\n        return n\r\n    elif n<=4:\r\n        return n+(x+1)*g(n-1)\r\n    elif n>=5:\r\n        x += 1\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","29","","# Error: expected","#     22","# but got","#     29","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":221,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        x = G(n-1) + 2 * G(n-2) + 3 * G(n - 3)\n        return x\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        x = g(n-1) + 2 * g(n-2) + 3 * g(n - 3)\n        return x\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        x = g(n-1)+2*g(n-2)+3*g(n-3)\r\n        return x","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 202, in g","    x = G(n-1) + 2 * G(n-2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":222,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n    if n<=3:                              =>           \r\n        return g(n-1)+2*g(n-2)+3*g(n-3)   =>           \r\n    else:                                 =>           \r\n    if n <= 3:                            <=           \r\n    a, b, c = 1, 2, 3                     <=           \r\n    while n > 3:                          <=           \r\n        a, b, c = b, c, c + 2 * b + 3 * a <=           \r\n        n -= 1                            <=           \r\n    return c                              <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    a, b, c = 1, 2, 3\n    while n > 3:\n        a, b, c = b, c, c + 2 * b + 3 * a\n        n -= 1\n    return c\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1)+2*g(n-2)+3*g(n-3)\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    a, b, c = 1, 2, 3\r\n    while n>3:\r\n        a, b, c = b, c, c+2*b+3*a\r\n        n -= 1\r\n    return c","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","22",">>> from construct_check import check",">>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\construct_check.py\", line 86, in check","    return ExclusionChecker(disallow).check(source_file, checked_funcs, source)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\construct_check.py\", line 170, in check","    p = parse(open(source_file).read(), source_file)","  File \"C:\\Users\\Gustavo\\Anaconda3\\lib\\ast.py\", line 35, in parse","    return compile(source, filename, mode, PyCF_ONLY_AST)","  File \"hw02.py\", line 1","    ???HW_SOURCE_FILE = 'hw02.py'","                    ^","SyntaxError: invalid character in identifier","","# Error: expected","#     True","# but got","#     SyntaxError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":223,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n        return g(n-1) + 2 * g(n-2) * g(n-3)     <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) * g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","7","","# Error: expected","#     10","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":224,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n    if n <= 3:                                  =>           \r\n        return n                                =>           \r\n    else:                                       =>           \r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)     =>           \r\n                                                =>           \r\n    def help(i):                                <=           \r\n        if n <= 3:                              <=           \r\n            return n                            <=           \r\n        else:                                   <=           \r\n            return g(n-1) + 2*g(n-2) + 3*g(n-3) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def help(i):\n        if n <= 3:\n            return n\n        else:\n            return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","","# Error: expected","#     1","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":225,"studentId":0,"date":null,"diff":"\r\nInputObject                                      SideIndicator\r\n-----------                                      -------------\r\n        return g(n-1) + 2* g(n-2) + 3 * g(n-3)   =>           \r\n        return print(n)                          <=           \r\n        # return g(n-1) + 2* g(n-2) + 3 * g(n-3) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return print(n)\n        # return g(n-1) + 2* g(n-2) + 3 * g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2* g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","4","","# Error: expected","#     10","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":226,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n    if n<= 3:                                         =>           \r\n        return n                                      =>           \r\n    if n > 3:                                         =>           \r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)     <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<= 3:\n        return n\n    if n > 3:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 186, in g","    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 186, in g","    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 186, in g","    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 186, in g","    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 186, in g","    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 186, in g","    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 186, in g","    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)","RecursionError: maximum recursion depth exceeded","","# Error: expected","#     1","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":227,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n    if n<=3:                                          =>           \r\n        return n                                      =>           \r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n    else:                                             =>           \r\n    \"*** YOUR CODE HERE ***\"                          <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","","# Error: expected","#     1","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":228,"studentId":0,"date":null,"diff":"\r\nInputObject                                                               SideIndicator\r\n-----------                                                               -------------\r\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)                         =>           \r\n        prev1, prev2, curr = prev2, curr, (prev1 * 3 + prev2 * 2 + curr)  =>           \r\n    return g(g(n-1) + n)                                                  <=           \r\n        prev1, prev2, curr = prev2, prev3, (prev1 * 3 + prev2 * 2 + curr) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(g(n-1) + n)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 188, in g","    return g(g(n-1) + n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 188, in g","    return g(g(n-1) + n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 188, in g","    return g(g(n-1) + n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 188, in g","    return g(g(n-1) + n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 188, in g","    return g(g(n-1) + n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 188, in g","    return g(g(n-1) + n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 186, in g","    if n <= 3:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     10","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":229,"studentId":0,"date":null,"diff":"\r\nInputObject                         SideIndicator\r\n-----------                         -------------\r\n    return g(n-1)+2*g(n-2)+3*g(n-3) =>           \r\n    return (n-2)*g(n-1)             <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if (n<=3): return n\n    return (n-2)*g(n-1)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if (n<=3): return n\n    return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if (n<=3):\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":230,"studentId":0,"date":null,"diff":"\r\nInputObject                                         SideIndicator\r\n-----------                                         -------------\r\n    if n > 3:                                       =>           \r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n-3) =>           \r\n    elif n > 3:                                     <=           \r\n        return (n - 1) + 2 * (n - 2)                <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n \n    elif n > 3:\n        return (n - 1) + 2 * (n - 2) \n\n    \n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n \n    if n > 3:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n-3)\n\n    \n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    elif n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","7","","# Error: expected","#     10","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":231,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 198, in g","    return g(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":232,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)       =>           \r\n        return (n-1)+2*(n-2)+3*(n-3) + g(n-1) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n \n    else:\n        return (n-1)+2*(n-2)+3*(n-3) + g(n-1)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n \n    else:\n        return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","13","","# Error: expected","#     10","# but got","#     13","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":233,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n    \"\"\"def g_helper(i):                               =>           \r\n    return g_helper(1)\"\"\"                             =>           \r\n    if n<=3:                                          =>           \r\n        return n                                      =>           \r\n    else:                                             =>           \r\n                                                      =>           \r\n                                                      =>           \r\n                                                      =>           \r\n    def g_helper(i):                                  <=           \r\n    return g_helper(1)                                <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n\n    def g_helper(i):\n        if n-i<=2:\n            return n\n        elif n-i>2:\n            if i<=n:\n                return i*g_helper(n-i) + (i+1)*g_helper(n-(i+1))\n    return g_helper(1)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    \n    if n<=3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n\n\n    \"\"\"def g_helper(i):\n        if n-i<=2:\n            return n\n        elif n-i>2:\n            if i<=n:\n                return i*g_helper(n-i) + (i+1)*g_helper(n-(i+1))\n    return g_helper(1)\"\"\"\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    def g_helper(i):\r\n        if n-i<=2:\r\n            return n\r\n        elif n-i>2:\r\n            if i<=n:\r\n                return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    return g_helper(1)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","12","","# Error: expected","#     10","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":234,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n       total=g(n-1)+(2*g(n-2))+(3*g(n-3)) =>           \r\n    return total                          =>           \r\n                                          =>           \r\n        i=1                               <=           \r\n        k=2                               <=           \r\n        total=1                           <=           \r\n        while i<=n:                       <=           \r\n            total=total*g(n-i)+k          <=           \r\n            i=i+1                         <=           \r\n            if k<=3:                      <=           \r\n                k=k+1                     <=           \r\n            else:                         <=           \r\n                k=0                       <=           \r\n        return total                      <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        i=1\n        k=2\n        total=1\n        while i<=n:\n            total=total*g(n-i)+k\n            i=i+1\n            if k<=3:\n                k=k+1\n            else:\n                k=0\n        return total\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n       total=g(n-1)+(2*g(n-2))+(3*g(n-3))\n    return total\n       \n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        i = 1\r\n        k = 2\r\n        total = 1\r\n        while i<=n:\r\n            total = total*g(n-i)+k\r\n            i = i+1\r\n            if k<=3:\r\n                k = k+1\r\n            else:\r\n                k = 0\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","0","","# Error: expected","#     10","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":235,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n        return g(n-1) + 2*(n-2) + 3*(n-3) =>           \r\n        return g(n-1) + 2(n-2) + 3(n-3)   <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2(n-2) + 3(n-3)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*(n-2) + 3*(n-3)\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 184, in g","    return g(n-1) + 2(n-2) + 3(n-3)","TypeError: 'int' object is not callable","","# Error: expected","#     10","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":236,"studentId":0,"date":null,"diff":"\r\nInputObject                         SideIndicator\r\n-----------                         -------------\r\n    return g(n-1)+2*g(n-2)+3*g(n-3) =>           \r\n    return g(n-1)*g(n-2)*g(n-3)     <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:  \n        return n\n    return g(n-1)*g(n-2)*g(n-3)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:  \n        return n\n    return g(n-1)+2*g(n-2)+3*g(n-3)\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":237,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <=3:\n        return n\n    else:\n        return G(n-1) + 2*G(n-2) + 3*G(n-3)\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <=3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 189, in g","    return G(n-1) + 2*G(n-2) + 3*G(n-3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":238,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n    return g(n-1) + (2 * g(n-2)) + (3 * g(n-3)) =>           \r\n    return g(n-1) + 2(g(n-2)) + 3(g(n-3))       <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    new = (1,2,3)\n    if n in new:\n        return n\n    return g(n-1) + 2(g(n-2)) + 3(g(n-3))\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    new = (1,2,3)\n    if n in new:\n        return n\n    return g(n-1) + (2 * g(n-2)) + (3 * g(n-3))\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    new = 1, 2, 3\r\n    if n in new:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 239, in g","    return g(n-1) + 2(g(n-2)) + 3(g(n-3))","TypeError: 'int' object is not callable","","# Error: expected","#     10","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":239,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n                                                =>           \r\n        return g(n)                             <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        return g(n)\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n        \n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 205, in g","    return g(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 205, in g","    return g(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 205, in g","    return g(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 205, in g","    return g(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 205, in g","    return g(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 205, in g","    return g(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 202, in g","    if n <= 3:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     10","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":240,"studentId":0,"date":null,"diff":"\r\nInputObject   SideIndicator\r\n-----------   -------------\r\n    if n < 4: =>           \r\n    if n < 3: <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n < 3:\n        return n \n    else: \n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n < 4:\n        return n \n    else: \n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\"))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\"))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(LeafWildcard(\"BinaryExpressionNode\")), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","4","","# Error: expected","#     3","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":241,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n    return g(n - 1) * g(n - 2) * g(n - 3)         <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(n - 1) * g(n - 2) * g(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":242,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    elif n > 3:\n        return G(n-1) + 2*G(n-2) + 3*G(n-3)\n\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    elif n > 3:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    elif n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 200, in g","    return G(n-1) + 2*G(n-2) + 3*G(n-3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":243,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n        return n    =>           \r\n        return g(n) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return g(n)\n    else:\n        return g(n-1)+2 * g(n-2)+3 * g(n-3)\n    \n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1)+2 * g(n-2)+3 * g(n-3)\n    \n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\"))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"any\"))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 193, in g","    return g(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 193, in g","    return g(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 193, in g","    return g(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 193, in g","    return g(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 193, in g","    return g(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 193, in g","    return g(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 192, in g","    if n <= 3:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     1","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":244,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return G(n-1) + 2 * G(n-2) + 3 * G(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 190, in g","    return G(n-1) + 2 * G(n-2) + 3 * G(n-3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":245,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    if n>3:\n        return G(n-1)+2*G(n-2)+3*G(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    if n>3:\n        return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    if n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 189, in g","    return G(n-1)+2*G(n-2)+3*G(n-3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":246,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n    if (n <= 3):                                  =>           \r\n        return n                                  =>           \r\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n    if (n == 1):                                  <=           \r\n        return G(n)                               <=           \r\n    return G(g(n-1))                              <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if (n == 1):\n        return G(n)\n    return G(g(n-1))\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if (n <= 3):\n        return n\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 187, in g","    return G(n)","NameError: name 'G' is not defined","","# Error: expected","#     1","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":247,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    if n <= 3: =>           \r\n    if n < 3:  <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n < 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\"))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\"))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(LeafWildcard(\"BinaryExpressionNode\")), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","4","","# Error: expected","#     3","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":248,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n    if n <= 3:                                  =>           \r\n        return n                                =>           \r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n    if n <= 3 and n > 0:                        <=           \r\n        return n + (n-1)                        <=           \r\n        g(n-1) + 2 * g(n-2) + 3 * g(n-3)        <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3 and n > 0:\n        return n + (n-1)\n    else: \n        g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n \n    else: \n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","3","","# Error: expected","#     2","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":249,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return G(n-1) + 2 * G(n-2) + 3 * G(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 189, in g","    return G(n-1) + 2 * G(n-2) + 3 * G(n-3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":250,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n        return (g(n-1)+2)*(g(n-2)+3)*(g(n-3))         <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <=3:\n        return n\n    else: \n        return (g(n-1)+2)*(g(n-2)+3)*(g(n-3))\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <=3:\n        return n\n    else: \n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","25","","# Error: expected","#     10","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":251,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    if n <= 3: =>           \r\n    if n >= 3: <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n >= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\"))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\"))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(LeafWildcard(\"BinaryExpressionNode\")), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 190, in g","    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 190, in g","    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 190, in g","    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 190, in g","    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 190, in g","    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 190, in g","    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 187, in g","    if n >= 3:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     1","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":252,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n            return m * i                =>           \r\n    return obligatory_description(n, 1) =>           \r\n            return m                    <=           \r\n    return obligatory_description(n, 2) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def obligatory_description(m, i):\n        if m <= 3:\n            return m\n        else:\n            return m * i + obligatory_description(m - 1, i + 1)\n    return obligatory_description(n, 2)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def obligatory_description(m, i):\n        if m <= 3:\n            return m * i\n        else:\n            return m * i + obligatory_description(m - 1, i + 1)\n    return obligatory_description(n, 1)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    def obligatory_description(m, i):\r\n        if m<=3:\r\n            return m\r\n        else:\r\n            return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    return obligatory_description(n, 2)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","11","","# Error: expected","#     10","# but got","#     11","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":253,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n    if n<=3:                               =>           \r\n        return n                           =>           \r\n    if n>3:                                =>           \r\n        return g(n-1) +2*g(n-2) + 3*g(n-3) =>           \r\n    k=0                                    <=           \r\n    if k<=n:                               <=           \r\n        return n                           <=           \r\n        k=k+1                              <=           \r\n        g(n-1)*n                           <=           \r\n    else:                                  <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=0\n    if k<=n:\n        return n  \n    else:\n        k=k+1\n        g(n-1)*n \n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n \n    if n>3:\n        return g(n-1) +2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","4","","# Error: expected","#     10","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":254,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n        return g(n-1) + g(n-2) + g(n-3)         <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n>3:\n        return g(n-1) + g(n-2) + g(n-3)\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n>3:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    if n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":255,"studentId":0,"date":null,"diff":"\r\nInputObject                                               SideIndicator\r\n-----------                                               -------------\r\n        return g(n - 1) + (2*(g(n - 2))) + (3*(g(n - 3))) =>           \r\n        return g(n - 1) + g(n - 2) + g(n - 3)             <=           \r\n                                                          <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n#G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n    if n <= 3:\n        return n\n    if n > 3:\n        return g(n - 1) + g(n - 2) + g(n - 3)\n    \n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n#G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n    if n <= 3:\n        return n\n    if n > 3:\n        return g(n - 1) + (2*(g(n - 2))) + (3*(g(n - 3)))\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    if n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":256,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\ndef g(n):   =>           \r\ndef g(n,x): <=           \r\n\r\n\r\n","before":"def g(n,x):\n    \"\"\"Return the value of G(n), computed recursively.\n    \n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n > 3:\n        return g(n - 1) + 2*g(n - 2) + 3*g(n - 3)\n    return n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    \n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n > 3:\n        return g(n - 1) + 2*g(n - 2) + 3*g(n - 3)\n    return n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","TypeError: g() missing 1 required positional argument: 'x'","","# Error: expected","#     1","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":257,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n        g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)        <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n    \treturn n\n    else:\n    \tg(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n    \treturn n\n    else:\n    \treturn g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","","# Error: expected","#     10","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":258,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n    if n <= 3 and n > 0:                          =>           \r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)       =>           \r\n    multiplier = 1                                =>           \r\n    total = 0                                     =>           \r\n    if n <= 3:                                    =>           \r\n        return n                                  =>           \r\n    for i in range(0,4):                          =>           \r\n        if i(n-i) > 3:                            =>           \r\n            total += i(n-i)                       =>           \r\n            total += n                            =>           \r\n        '''if 2(n-2) > 3:                         =>           \r\n            total += 2(n-2)                       =>           \r\n            total += n                            =>           \r\n        if 3(n-3) > 3:                            =>           \r\n            total += 3(n-3)                       =>           \r\n            total += n'''                         =>           \r\n        '''while multiplier <= 3:                 =>           \r\n            if (n-multiplier) > 3:                =>           \r\n                total += multiplier(n-multiplier) =>           \r\n                total += n                        =>           \r\n            multiplier += 1'''                    =>           \r\n    return total                                  =>           \r\n        else:                                     =>           \r\n            else:                                 =>           \r\n        else:                                     =>           \r\n        else:                                     =>           \r\n                                                  =>           \r\n                                                  =>           \r\n                                                  =>           \r\n                                                  =>           \r\n    if n == 0:                                    <=           \r\n        return                                    <=           \r\n    elif n <= 3 and n > 0:                        <=           \r\n        return g(n-1) + 2*g(n-2) + g(n-3)         <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 0:\n        return\n    elif n <= 3 and n > 0:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3 and n > 0:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","8","","# Error: expected","#     10","# but got","#     8","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":259,"studentId":0,"date":null,"diff":"\r\nInputObject                                               SideIndicator\r\n-----------                                               -------------\r\n    def G(n):                                             =>           \r\n        if n <=3:                                         =>           \r\n            return n                                      =>           \r\n        else:                                             =>           \r\n            return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3) =>           \r\n    return G(n)                                           =>           \r\n                                                          =>           \r\n                                                          =>           \r\n    if n <=3:                                             <=           \r\n        return n                                          <=           \r\n        def G(n):                                         <=           \r\n            def another(x):                               <=           \r\n                if n==1:                                  <=           \r\n                    return 1                              <=           \r\n                else:                                     <=           \r\n                    return x                              <=           \r\n            return n+another(x+1)                         <=           \r\n        return G(n-1)                                     <=           \r\n    else:                                                 <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n \n    else:\n        def G(n):\n            def another(x):\n                if n==1:\n                    return 1\n                else:\n                    return x\n            return n+another(x+1)\n        return G(n-1)\n\n\n\n\n    \"\"\"x=2\n    if n<=3:\n        return n\n    def function(n,x):\n        if n==2:\n            return 1\n        return (n-1+x)*function(n-1,x+1)\n    return function(n,x)\"\"\"\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        if n <=3:\n            return n \n        else:\n            return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n    return G(n)\n        \n    \n\n\n\n\n    \"\"\"x=2\n    if n<=3:\n        return n\n    def function(n,x):\n        if n==2:\n            return 1\n        return (n-1+x)*function(n-1,x+1)\n    return function(n,x)\"\"\"\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        def G(n):\r\n            def another(x):\r\n                if n==1:\r\n                    return \r\n                else:\r\n                    return x\r\n            return n+another(x+1)\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 200, in g","    return G(n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 199, in G","    return n+another(x+1)","NameError: name 'x' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":260,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n    if n <= 3:                                        =>           \r\n        return n                                      =>           \r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n    if n == 1:                                        <=           \r\n        return G(1)                                   <=           \r\n        return G(n) + g(n-1)                          <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1:\n        return G(1)\n    else:\n        return G(n) + g(n-1)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 192, in g","    return G(1)","NameError: name 'G' is not defined","","# Error: expected","#     1","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":261,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return G(n-1) + 2*G(n-2) + 3*G(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 186, in g","    return G(n-1) + 2*G(n-2) + 3*G(n-3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":262,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n        i = 0                                         <=           \r\n        x = 1                                         <=           \r\n        while i != 3:                                 <=           \r\n            return x * g(n - 1)                       <=           \r\n            i += 1                                    <=           \r\n            x += 1                                    <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        i = 0\n        x = 1\n        while i != 3:\n            return x * g(n - 1)\n            i += 1\n            x += 1\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        i = 0\r\n        x = 1\r\n        while i!=3:\r\n            return g(n-1)+2*g(n-2)+3*g(n-3)\r\n            i += 1\r\n            x += 1","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":263,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 193, in g","    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":264,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n    if n > 3:                                         =>           \r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n        n = n + g(n - 1)                              <=           \r\n    else:                                             <=           \r\n                                                      <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    else:\n        n = n + g(n - 1)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n > 3:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","","# Error: expected","#     10","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":265,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n        return (g(n-1))+2*(g(n-2))+3*(g(n-3)) =>           \r\n        return (g(n-1))+(g(n-2))+(g(n-1))     <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <=3:\n        return n\n    else: \n        return (g(n-1))+(g(n-2))+(g(n-1))\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <=3:\n        return n\n    else: \n        return (g(n-1))+2*(g(n-2))+3*(g(n-3))\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","8","","# Error: expected","#     10","# but got","#     8","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":266,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n        return g((n - 1) + 2 * (n - 2) + 3 * (n - 3)) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g((n - 1) + 2 * (n - 2) + 3 * (n - 3))\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 191, in g","    return g((n - 1) + 2 * (n - 2) + 3 * (n - 3))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 191, in g","    return g((n - 1) + 2 * (n - 2) + 3 * (n - 3))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 191, in g","    return g((n - 1) + 2 * (n - 2) + 3 * (n - 3))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 191, in g","    return g((n - 1) + 2 * (n - 2) + 3 * (n - 3))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 191, in g","    return g((n - 1) + 2 * (n - 2) + 3 * (n - 3))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 191, in g","    return g((n - 1) + 2 * (n - 2) + 3 * (n - 3))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 188, in g","    if n <= 3:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     10","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":267,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n    if n <= 3 :                                 =>           \r\n        return n                                =>           \r\n    else :                                      =>           \r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3 :\n        return n\n    else :\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","","# Error: expected","#     1","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":268,"studentId":0,"date":null,"diff":"\r\nInputObject                                                 SideIndicator\r\n-----------                                                 -------------\r\n    return n if n<= 3 else g(n -1) + 2 * g(n-2) +3 * g(n-3) =>           \r\n    return n if n<= 3 else g(n -1) + 2                      <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    return n if n<= 3 else g(n -1) + 2\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    return n if n<= 3 else g(n -1) + 2 * g(n-2) +3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","5","","# Error: expected","#     10","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":269,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n        return n+g(n-1)                     <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return n+g(n-1)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","7","","# Error: expected","#     10","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":270,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n       return  G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)  \n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n       return  g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)  \n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 197, in g","    return  G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":271,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)        =>           \r\n    def g_helper(a,i):                     <=           \r\n        if a == 1:                         <=           \r\n            return i*a                     <=           \r\n        if a <= 3:                         <=           \r\n            return i*a + g_helper(a-1,i+1) <=           \r\n        return g_helper(a-1,i+1)           <=           \r\n    return g_helper(n,0)                   <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    def g_helper(a,i):\n        if a == 1:\n            return i*a\n        if a <= 3:\n            return i*a + g_helper(a-1,i+1)\n        return g_helper(a-1,i+1)\n    return g_helper(n,0)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    def g_helper(a, i):\r\n        if a==1:\r\n            return \r\n        if a<=3:\r\n            return g(n-1)+2*g(n-2)+3*g(n-3)\r\n        return g_helper(a-1, i+1)\r\n    return g_helper(n, 0)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","16","","# Error: expected","#     22","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":272,"studentId":0,"date":null,"diff":"\r\nInputObject                                                     SideIndicator\r\n-----------                                                     -------------\r\n        return (g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3))         =>           \r\n    \"\"\"                                                         =>           \r\n    else:                                                       =>           \r\n    \"\"\"                                                         =>           \r\n    #if n == 5:                                                 <=           \r\n    #    return 22                                              <=           \r\n                return (G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)) <=           \r\n                                                                <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    #if n == 5:\n    #    return 22\n    else:\n        def bigger_than_three(x):\n            if x >= 3:\n                return 1 #x  \n            else:\n                return (G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3))\n                #return (x * g(n-x)) + (bigger_than_three(x+1) * g(n-x)) \n                #return x * g(n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return (g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3))\n    \"\"\"    \n    else:\n        def bigger_than_three(x):\n            if x >= 3:\n                return 1 #x  \n            else:\n                #return (x * g(n-x)) + (bigger_than_three(x+1) * g(n-x)) \n                #return x * g(n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n    \"\"\"\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        def bigger_than_three(x):\r\n            if x>=3:\r\n                return 1\r\n            else:\r\n                return (g(n-1)+2*g(n-2)+3*g(n-3))\r\n    return bigger_than_three(1)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 202, in g","    return bigger_than_three(1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 199, in bigger_than_three","    return (G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3))","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":273,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n    def nest(i):                                <=           \r\n        if i > n:                               <=           \r\n            return 0                            <=           \r\n        return i * g(n-i) + nest(i+1)           <=           \r\n        return nest(1)                          <=           \r\n                                                <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def nest(i):\n        if i > n:\n            return 0\n        return i * g(n-i) + nest(i+1)\n\n    if n <= 3:\n        return n\n    else:\n        return nest(1)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    def nest(i):\r\n        if i>n:\r\n            return \r\n        return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return nest(1)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","26","","# Error: expected","#     22","# but got","#     26","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":274,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n    if n<=3:                                          =>           \r\n        return n                                      =>           \r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n    else:                                             =>           \r\n    \"*** YOUR CODE HERE ***\"                          <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","","# Error: expected","#     1","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":275,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n    if n <= 3:                                        =>           \r\n        return n                                      =>           \r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n    if n == 0:                                        <=           \r\n        return 0                                      <=           \r\n    if n == 1:                                        <=           \r\n        return 1                                      <=           \r\n    if n == 2:                                        <=           \r\n        return 2                                      <=           \r\n    if n == 3:                                        <=           \r\n        return 3                                      <=           \r\n        return n * g(n) + n * g(n - 1)                <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n > 3:\n        return n * g(n) + n * g(n - 1)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n > 3:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n==0:\r\n        return 0\r\n    if n==1:\r\n        return 1\r\n    if n==2:\r\n        return 2\r\n    if n==3:\r\n        return 3\r\n    if n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 205, in g","    return n * g(n) + n * g(n - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 205, in g","    return n * g(n) + n * g(n - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 205, in g","    return n * g(n) + n * g(n - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 205, in g","    return n * g(n) + n * g(n - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 205, in g","    return n * g(n) + n * g(n - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 205, in g","    return n * g(n) + n * g(n - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 196, in g","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     10","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":276,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                   SideIndicator\r\n-----------                                                                   -------------\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)                                       =>           \r\n        previous2, previous1, current = 1, 2, 3                               =>           \r\n            previous2, previous1, current = current, 2*previous1, 3*previous2 =>           \r\n            n -= 1                                                            =>           \r\n        return previous2 + previous1 + current                                =>           \r\n                                                                              =>           \r\n        return n*g(n-1)                                                       <=           \r\n        current, next1, next2 = 1, 2, 3                                       <=           \r\n            current, next1, next2 = next1, next2, next2                       <=           \r\n        #result = 0                                                           <=           \r\n        for i in range(1,4):                                                  <=           \r\n            if n-i <= 3:                                                      <=           \r\n                temp_plus = i*(n-i)                                           <=           \r\n            else:                                                             <=           \r\n                temp_plus = i*g(n-i)                                          <=           \r\n            result += temp_plus                                               <=           \r\n    return result                                                             <=           \r\n                                                                              <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return n*g(n-1)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","12","","# Error: expected","#     10","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":277,"studentId":0,"date":null,"diff":"\r\nInputObject                                              SideIndicator\r\n-----------                                              -------------\r\n    else:                                                =>           \r\n        return 1*g(n-1) + 2*g(n-2) + 3*g(n-3)            =>           \r\n    elif n == 4:                                         <=           \r\n        return 1*g(n-1) + 2*g(n-2) + 3*g(n-3) + 4*g(n-4) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    elif n == 4:\n        return 1*g(n-1) + 2*g(n-2) + 3*g(n-3) + 4*g(n-4)\n    #else:\n        #return (dummy)*g(n-dummy) + (dummy+1)*g((n-2)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return 1*g(n-1) + 2*g(n-2) + 3*g(n-3)\n    #else:\n        #return (dummy)*g(n-dummy) + (dummy+1)*g((n-2)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","","# Error: expected","#     22","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":278,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    elif n > 3:\n        return G(n-1) + 2 * G(n-2) + 3 * G(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    elif n > 3:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    elif n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 196, in g","    return G(n-1) + 2 * G(n-2) + 3 * G(n-3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":279,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1) + 2*G(n-2) + 3*G(n-3)\n        n-=1\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n        n-=1\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)\r\n        n -= 1","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 196, in g","    return g(n-1) + 2*G(n-2) + 3*G(n-3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":280,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                                                \r\n-----------                                                                                                                \r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)                                                                      \r\n    else:                                                                                                                  \r\n    def G(n):                                                                                                              \r\n        return (G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)) + (G(n - 2) + 2 * G(n - 3) + 3 * G(n - 4)) + (G(n - 3) + 2 * G(n...\r\n    return G(n)                                                                                                            \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(n):\n        return (G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)) + (G(n - 2) + 2 * G(n - 3) + 3 * G(n - 4)) + (G(n - 3) + 2 * G(n - 4) + 3 * G(n - 5))\n    return G(n)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    def G(n):\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    return G(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 190, in G","    return (G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)) + (G(n - 2) + 2 * G(n - 3) + 3 * G(n - 4)) + (G(n - 3) + 2 * G(n - 4) + 3 * G(n - 5))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 190, in G","    return (G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)) + (G(n - 2) + 2 * G(n - 3) + 3 * G(n - 4)) + (G(n - 3) + 2 * G(n - 4) + 3 * G(n - 5))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 190, in G","    return (G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)) + (G(n - 2) + 2 * G(n - 3) + 3 * G(n - 4)) + (G(n - 3) + 2 * G(n - 4) + 3 * G(n - 5))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 190, in G","    return (G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)) + (G(n - 2) + 2 * G(n - 3) + 3 * G(n - 4)) + (G(n - 3) + 2 * G(n - 4) + 3 * G(n - 5))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 190, in G","    return (G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)) + (G(n - 2) + 2 * G(n - 3) + 3 * G(n - 4)) + (G(n - 3) + 2 * G(n - 4) + 3 * G(n - 5))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 190, in G","    return (G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)) + (G(n - 2) + 2 * G(n - 3) + 3 * G(n - 4)) + (G(n - 3) + 2 * G(n - 4) + 3 * G(n - 5))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 190, in G","    return (G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)) + (G(n - 2) + 2 * G(n - 3) + 3 * G(n - 4)) + (G(n - 3) + 2 * G(n - 4) + 3 * G(n - 5))","RecursionError: maximum recursion depth exceeded","","# Error: expected","#     10","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":281,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    if n == 3: =>           \r\n    if n < 3:  <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n < 3:\n        return 3\n    elif n == 2:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return g(n-1) + (2 * g(n-2)) + (3* g(n-3))\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 3:\n        return 3\n    elif n == 2:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return g(n-1) + (2 * g(n-2)) + (3* g(n-3))\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","3","","# Error: expected","#     1","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":282,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                  SideIndicator\r\n-----------                                                                                  -------------\r\n    if n <= 3:       #base case where if n is <= 3, it'll return n                           =>           \r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)     #define recusively g where it adds =>           \r\n                                                                                             =>           \r\n                                                                                             =>           \r\n                                                                                             =>           \r\n                                                                                             =>           \r\n                                                                                             =>           \r\n    if n <= 3:                                                                               <=           \r\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)                                        <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n \n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:       #base case where if n is <= 3, it'll return n \n        return n \n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)     #define recusively g where it adds\n         \n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 213, in g","    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":283,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                 SideIndicator\r\n-----------                                                                 -------------\r\n    if n <= 3:                                                              =>           \r\n        return n                                                            =>           \r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)                       =>           \r\n    else:                                                                   =>           \r\n    def counter(n):                                                         <=           \r\n                                                                            <=           \r\n        def counter2(i):                                                    <=           \r\n            if i == n:                                                      <=           \r\n                return n                                                    <=           \r\n            else:                                                           <=           \r\n                return counter2(i + 1)                                      <=           \r\n        if n <= 3:                                                          <=           \r\n            return n                                                        <=           \r\n        else:                                                               <=           \r\n            return accumulate(add, 0, n, lambda n: counter2(0) * g(n - 1))  <=           \r\n    return counter(n)                                                       <=           \r\n                                                                            <=           \r\n                                                                            <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(n):\n        \n        def counter2(i):\n            if i == n:\n                return n\n            else:\n                return counter2(i + 1)\n\n        if n <= 3:\n            return n\n        else:\n            return accumulate(add, 0, n, lambda n: counter2(0) * g(n - 1)) \n\n    return counter(n) \n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    def counter(n):\r\n        def counter2(i):\r\n            if i==n:\r\n                return \r\n            else:\r\n                return counter2(i+1)\r\n        if n<=3:\r\n            return n\r\n        else:\r\n            return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    return counter(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","24","","# Error: expected","#     10","# but got","#     24","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":284,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n        return n =>           \r\n        return 3 <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return 3\n    return g(n-1) + 2 * g(n-2) + 3*g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(n-1) + 2 * g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","3","","# Error: expected","#     1","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":285,"studentId":0,"date":null,"diff":"\r\nInputObject                                                             SideIndicator\r\n-----------                                                             -------------\r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)                   =>           \r\n        return 3 * g(n - (n - 1)) + 2 * g(n - (n - 2)) + g(n - (n - 3)) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    else:\n        return 3 * g(n - (n - 1)) + 2 * g(n - (n - 2)) + g(n - (n - 3))\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n==1:\r\n        return 1\r\n    if n==2:\r\n        return 2\r\n    if n==3:\r\n        return 3\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":286,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                              SideIndicator\r\n-----------                                                                              -------------\r\n    return _______                                                                       =>           \r\n    return _______                                                                       =>           \r\n    return _______                                                                       =>           \r\n    return _______                                                                       =>           \r\n    return g(n-1)+2*g(n-2)+3*g(n-3)                                                      =>           \r\n    \"*** YOUR CODE HERE ***\"                                                             =>           \r\n    \"*** YOUR CODE HERE ***\"                                                             =>           \r\n    \"*** YOUR CODE HERE ***\"                                                             =>           \r\n    \"*** YOUR CODE HERE ***\"                                                             =>           \r\n    \"*** YOUR CODE HERE ***\"                                                             =>           \r\n    \"*** YOUR CODE HERE ***\"                                                             =>           \r\n    \"*** YOUR CODE HERE ***\"                                                             =>           \r\n    \"*** YOUR CODE HERE ***\"                                                             =>           \r\n    if n == 1:                                                                           <=           \r\n        return term(1)                                                                   <=           \r\n        return term(n)*product(n-1, term)                                                <=           \r\n    if n == 0:                                                                           <=           \r\n        return 1                                                                         <=           \r\n    return product(n, identity)                                                          <=           \r\n    if n == 0:                                                                           <=           \r\n        return base                                                                      <=           \r\n    else:                                                                                <=           \r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))                  <=           \r\n    return accumulate(add, 0, n, term)                                                   <=           \r\n    return accumulate(mul, 1, n, term)                                                   <=           \r\n    return accumulate(lambda x,y: combiner(x, y) if pred(term(x)) else y, base, n, term) <=           \r\n    curr_f = identity                                                                    <=           \r\n    while n > 0:                                                                         <=           \r\n        curr_f = compose1(f, curr_f)                                                     <=           \r\n        n -= 1                                                                           <=           \r\n    return curr_f                                                                        <=           \r\n    else:                                                                                <=           \r\n        return (g(n-1)+2)*(g(n-2)+3)*g(n-3)                                              <=           \r\n    else:                                                                                <=           \r\n                                                                                         <=           \r\n                                                                                         <=           \r\n                                                                                         <=           \r\n                                                                                         <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return (g(n-1)+2)*(g(n-2)+3)*g(n-3)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","25","","# Error: expected","#     10","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":287,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return G(n-1) + 2*G(n-2) + 3*G(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 189, in g","    return G(n-1) + 2*G(n-2) + 3*G(n-3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":288,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)  =>           \r\n        return (n)* g(n-1)                   <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if(n <=3):\n        return n\n    else:\n\n        return (n)* g(n-1) \n\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if(n <=3):\n        return n\n    else:\n\n        return g(n-1) + 2*g(n-2) + 3*g(n-3) \n\n\n    \"*** YOUR CODE HERE ***\"\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if (n<=3):\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","12","","# Error: expected","#     10","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":289,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n        return g(n-1) * g(n-2) * g(n-3)         <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:\n        return g(n-1) * g(n-2) * g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":290,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n    22            =>           \r\n    22 n = 5, 432 <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22 n = 5, 432\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if(n<=3):\n        return n\n    return g(n-1) + 2*g(n-2)+3*g(n-3)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if(n<=3):\n        return n\n    return g(n-1) + 2*g(n-2)+3*g(n-3)\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if (n<=3):\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","22","","# Error: expected","#     22 n = 5, 432","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":291,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n        return g(n - 1) + 2 * g(n - 2) + g(n - 3)     <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n > 3:\n        return g(n - 1) + 2 * g(n - 2) + g(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n > 3:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n==1:\r\n        return 1\r\n    if n==2:\r\n        return 2\r\n    if n==3:\r\n        return 3\r\n    if n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","8","","# Error: expected","#     10","# but got","#     8","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":292,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    if n <= 3: =>           \r\n    if n < 3:  <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n < 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\"))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\"))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(LeafWildcard(\"BinaryExpressionNode\")), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","4","","# Error: expected","#     3","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":293,"studentId":0,"date":null,"diff":"\r\nInputObject                                               SideIndicator\r\n-----------                                               -------------\r\n    if n <= 3:                                            =>           \r\n        return n                                          =>           \r\n    elif n >3:                                            =>           \r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)     =>           \r\n    while n > 0:                                          <=           \r\n        if n <= 3:                                        <=           \r\n            return n                                      <=           \r\n        elif n >3:                                        <=           \r\n            return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    while n > 0:\n        if n <= 3:\n            return n\n        elif n >3:\n            return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    elif n >3:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    while n>0:\r\n        if n<=3:\r\n            return n\r\n        elif n>3:\r\n            return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","22",">>> from construct_check import check",">>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\construct_check.py\", line 86, in check","    return ExclusionChecker(disallow).check(source_file, checked_funcs, source)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\construct_check.py\", line 170, in check","    p = parse(open(source_file).read(), source_file)","  File \"C:\\Users\\Gustavo\\Anaconda3\\lib\\ast.py\", line 35, in parse","    return compile(source, filename, mode, PyCF_ONLY_AST)","  File \"hw02.py\", line 1","    ???HW_SOURCE_FILE = 'hw02.py'","                    ^","SyntaxError: invalid character in identifier","","# Error: expected","#     True","# but got","#     SyntaxError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":294,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n                                                =>           \r\n    if n <= 3:                                  =>           \r\n        return n                                =>           \r\n                                                =>           \r\n    if i <= 3:                                  <=           \r\n        return i                                <=           \r\n        return g(i-1) + 2 * g(i-2) + 3 * g(i-3) <=           \r\n                                                <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if i <= 3:\n        return i \n    else:\n        return g(i-1) + 2 * g(i-2) + 3 * g(i-3)\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n    \n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 195, in g","    if i <= 3:","NameError: name 'i' is not defined","","# Error: expected","#     1","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":295,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    if n <= 3: =>           \r\n    if n < 3:  <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n < 3:\n\n        return n\n\n    else:\n\n        return g(n - 1) + (2 * g(n - 2)) + (3 * g(n - 3))\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n\n        return n\n\n    else:\n\n        return g(n - 1) + (2 * g(n - 2)) + (3 * g(n - 3))\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+(2*g(n-2))+(3*g(n-3))","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\"))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\"))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(LeafWildcard(\"BinaryExpressionNode\")), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","4","","# Error: expected","#     3","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":296,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n    i = 3   =>           \r\n    i = 2   <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 2\n    if n<= i:\n        return n\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 3\n    if n<= i:\n        return n\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    i = 3\r\n    if n<=i:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","4","","# Error: expected","#     3","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":297,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n    if n <= 3:                              =>           \r\n        return n                            =>           \r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n    else:                                   =>           \r\n    def counter(i):                         <=           \r\n        if i == 3:                          <=           \r\n            return                          <=           \r\n        else:                               <=           \r\n            if n <= 3:                      <=           \r\n                return n                    <=           \r\n            else:                           <=           \r\n                return i*n + g(n-1)         <=           \r\n            i += 1                          <=           \r\n    return counter(0)                       <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def counter(i):\n        if i == 3:\n            return \n        else: \n            if n <= 3:\n                return n\n            else:\n                return i*n + g(n-1)\n            i += 1        \n    return counter(0)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    def counter(i):\r\n        if i==3:\r\n            return \r\n        else:\r\n            if n<=3:\r\n                return n\r\n            else:\r\n                return g(n-1)+2*g(n-2)+3*g(n-3)\r\n            i += 1\r\n    return counter(0)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":298,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n    if n <= 3:    =>           \r\n    while n <= 3: <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n\n    while n <= 3:\n        return n\n    return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n    \"\"\"step= 0\n    total = 0\n\n    \n    while n > 3:\n        step += 1\n        total += step*(g(n-1))\n        return total\n\n    if n <=3:\n        return i\"\"\"\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n\n    if n <= 3:\n        return n\n    return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n    \"\"\"step= 0\n    total = 0\n\n    \n    while n > 3:\n        step += 1\n        total += step*(g(n-1))\n        return total\n\n    if n <=3:\n        return i\"\"\"\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    while n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","22",">>> from construct_check import check",">>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\construct_check.py\", line 86, in check","    return ExclusionChecker(disallow).check(source_file, checked_funcs, source)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\construct_check.py\", line 170, in check","    p = parse(open(source_file).read(), source_file)","  File \"C:\\Users\\Gustavo\\Anaconda3\\lib\\ast.py\", line 35, in parse","    return compile(source, filename, mode, PyCF_ONLY_AST)","  File \"hw02.py\", line 1","    ???HW_SOURCE_FILE = 'hw02.py'","                    ^","SyntaxError: invalid character in identifier","","# Error: expected","#     True","# but got","#     SyntaxError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":299,"studentId":0,"date":null,"diff":"\r\nInputObject                                      SideIndicator\r\n-----------                                      -------------\r\n        return g(n-1) + 2*g(n-2) + 3* g(n-3)     =>           \r\n        return g(n-3) + (2*g(n-2)) + (3* g(n-1)) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    elif n > 3:\n        return g(n-3) + (2*g(n-2)) + (3* g(n-1))\n\n    \n      \n\n\n\n\n\n\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    elif n > 3:\n        return g(n-1) + 2*g(n-2) + 3* g(n-3)\n\n    \n      \n\n\n\n\n\n\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    elif n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":300,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n    return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n    return g(n-1) * n-1                     <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if (n <= 3):\n        return n\n    return g(n-1) * n-1\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if (n <= 3):\n        return n\n    return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if (n<=3):\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","11","","# Error: expected","#     10","# but got","#     11","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":301,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        return (g(n-1)+ 2*g(n-2) + 3*g(n-3)) =>           \r\n    if n<=3:                                 =>           \r\n        return n                             =>           \r\n    else:                                    =>           \r\n    x=[1,2,3]                                <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a,b,c=1,2,3\n    if n<=3:\n        return n\n    else:\n        a,b,c=a+1,2*(a+b),3*(a+b+c)\n        n-=1\n    return (a+c)//2\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return (g(n-1)+ 2*g(n-2) + 3*g(n-3))\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":302,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1 or n == 2 or n == 3:\n        return n\n    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1 or n == 2 or n == 3:\n        return n\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n==1 or n==2 or n==3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 185, in g","    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":303,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n    def G(n):                               =>           \r\n        if n<=3:                            =>           \r\n            return n                        =>           \r\n        else:                               =>           \r\n            return G(n-1)+2*G(n-2)+3*G(n-3) =>           \r\n    return G(n)                             =>           \r\n    if n<=3:                                <=           \r\n        return n                            <=           \r\n    def num(a,answer=1):                    <=           \r\n        if a<1:                             <=           \r\n            return answer-1                 <=           \r\n        else:                               <=           \r\n            answer+=a*g(n-a)                <=           \r\n            return num(a-1,answer)          <=           \r\n    return num(a=n)                         <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    def num(a,answer=1):\n        if a<1:\n            return answer-1\n        else: \n            answer+=a*g(n-a)\n            return num(a-1,answer)\n    return num(a=n)\n        \n    \n\n\n\n\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        if n<=3:\n            return n\n        else:\n            return G(n-1)+2*G(n-2)+3*G(n-3)\n    return G(n)\n        \n    \n\n\n\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    def num(a, answer = 1):\r\n        if a<1:\r\n            return g(n-1)+2*g(n-2)+3*g(n-3)\r\n        else:\r\n            answer += a*g(n-a)\r\n            return num(a-1, answer)\r\n    return num(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","26","","# Error: expected","#     22","# but got","#     26","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":304,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n    if n <= 3:    =>           \r\n    while n <= 3: <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(n - 1) + 2*G(n -2) + 3*G(n - 3) = G(n)\n    if n == 0:\n        return 0\n    elif n <= 3:\n        return n\n    else: \n        return G(n)\"\"\"\n\n    while n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n            \n\"\"\"from operator import mul\n    def G(n):\n        while n > 3:\n            return G(n - 1) + 2*G(n -2) + 3*G(n - 3)\n\n    \n\n    G =  \n    if n <= 3:\n        return n\n    elif n >= 3:\n        return G\"\"\"\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(n - 1) + 2*G(n -2) + 3*G(n - 3) = G(n)\n    if n == 0:\n        return 0\n    elif n <= 3:\n        return n\n    else: \n        return G(n)\"\"\"\n\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n            \n\"\"\"from operator import mul\n    def G(n):\n        while n > 3:\n            return G(n - 1) + 2*G(n -2) + 3*G(n - 3)\n\n    \n\n    G =  \n    if n <= 3:\n        return n\n    elif n >= 3:\n        return G\"\"\"\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    while n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","10",">>> g(5)","22",">>> from construct_check import check",">>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\construct_check.py\", line 86, in check","    return ExclusionChecker(disallow).check(source_file, checked_funcs, source)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\construct_check.py\", line 170, in check","    p = parse(open(source_file).read(), source_file)","  File \"C:\\Users\\Gustavo\\Anaconda3\\lib\\ast.py\", line 35, in parse","    return compile(source, filename, mode, PyCF_ONLY_AST)","  File \"hw02.py\", line 1","    ???HW_SOURCE_FILE = 'hw02.py'","                    ^","SyntaxError: invalid character in identifier","","# Error: expected","#     True","# but got","#     SyntaxError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":305,"studentId":0,"date":null,"diff":"\r\nInputObject                                                        SideIndicator\r\n-----------                                                        -------------\r\n    if n <= 3:                                                     =>           \r\n        return n                                                   =>           \r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)              =>           \r\n    else:                                                          =>           \r\n    def helper(a):                                                 <=           \r\n        if a <= 3:                                                 <=           \r\n            return n                                               <=           \r\n        else:                                                      <=           \r\n            return mul(g(n - a) + (a + 1), g(n - (a+1)) + (a + 2)) <=           \r\n    return helper(n)                                               <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(a):\n        if a <= 3:\n            return n\n        else:\n            return mul(g(n - a) + (a + 1), g(n - (a+1)) + (a + 2))\n    return helper(n)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    def helper(a):\r\n        if a<=3:\r\n            return n\r\n        else:\r\n            return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    return helper(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","25","","# Error: expected","#     10","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":306,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                          SideIndicator\r\n-----------                                                                          -------------\r\n    return accumulate(combiner,base, n,lambda n: term(n))                            =>           \r\n    return accumulate(combiner,base, n,lambda n: term(n) if pred(term(n)) else None) <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<= 3:\n        return n\n    else:\n        return G(n-1) +2*G(n-2) +3*G(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<= 3:\n        return n\n    else:\n        return g(n-1) +2*g(n-2) +3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 183, in g","    return G(n-1) +2*G(n-2) +3*G(n-3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":307,"studentId":0,"date":null,"diff":"\r\nInputObject                                      SideIndicator\r\n-----------                                      -------------\r\n       return g(n - 1) + 2*g(n - 2) + 3*g(n - 3) =>           \r\n        a = 0                                    <=           \r\n        b = 0                                    <=           \r\n        c = 0                                    <=           \r\n        a + (2*b) + (3*c)                        <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        a = 0\n        b = 0\n        c = 0\n        a + (2*b) + (3*c)\n\n        \n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n       return g(n - 1) + 2*g(n - 2) + 3*g(n - 3)\n\n        \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","","# Error: expected","#     10","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":308,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n    if n <= 3:                                  =>           \r\n        return n                                =>           \r\n    else:                                       =>           \r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n    \"*** YOUR CODE HERE ***\"                    <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n    \treturn n\n    else: \n    \treturn g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","","# Error: expected","#     1","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":309,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n    if n > 3:                                         =>           \r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n    else:                                             =>           \r\n    return g(n-1)                                     <=           \r\n    if n <= 3:                                        <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    return g(n-1)\n    \n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n > 3:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n    else:\n        return n\n    \n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":310,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n        return n                              =>           \r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)   =>           \r\n    def recursion_3(n, total=0):              <=           \r\n        if n==0:                              <=           \r\n            return total                      <=           \r\n        total += n                            <=           \r\n        return recursion_3(n-1,total)         <=           \r\n    def recursion_complex(n,i,total=0):       <=           \r\n        if n==0:                              <=           \r\n            return total                      <=           \r\n        total+= (i-n)*n                       <=           \r\n        return recursion_complex(n-1,i,total) <=           \r\n        return recursion_3(n)                 <=           \r\n        return recursion_complex(n-1,n)       <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def recursion_3(n, total=0):\n        if n==0:\n            return total\n        total += n\n        return recursion_3(n-1,total)\n    def recursion_complex(n,i,total=0):\n        if n==0:\n            return total\n        total+= (i-n)*n\n        return recursion_complex(n-1,i,total)\n    if n<=3:\n        return recursion_3(n)\n    else:\n        return recursion_complex(n-1,n)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","3","","# Error: expected","#     2","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":311,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n    x = 1                                         =>           \r\n    total = 0                                     =>           \r\n    while x < n:                                  =>           \r\n        total += (n - x - 1)                      =>           \r\n    return g(n - 1)                               <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n\n    return g(n - 1)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"any\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"any\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":312,"studentId":0,"date":null,"diff":"","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n > 3:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n    \n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n > 3:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n    \n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    if n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 186, in g","    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)","NameError: name 'G' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":313,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n    if n <= 3:    =>           \r\n    if n > 3:     =>           \r\n    if n >= 3:    <=           \r\n    if n > 3:     <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n >= 3:\n        return n\n    if n > 3:\n        return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    if n > 3:    \n        return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    if n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\"))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\"))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(LeafWildcard(\"BinaryExpressionNode\")), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","","# Error: expected","#     1","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":314,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n        return g(n-1)*g(n-2)*g(n-3)         <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n > 3:\n        return g(n-1)*g(n-2)*g(n-3)\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n > 3:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    if n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"BinaryExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"BinaryExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":315,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n    if n<=3:                                =>           \r\n        return n                            =>           \r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n    else:                                   =>           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","","# Error: expected","#     1","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":316,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n    if (n <= 3):                             =>           \r\n        return n;                            =>           \r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3); =>           \r\n    else:                                    =>           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if (n <= 3):\n        return n;\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3);\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","","# Error: expected","#     1","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":317,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    if n <= 3: =>           \r\n    if n < 3:  <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n < 3:\n        return n\n    else:\n        return g(n-1) + (2 * g(n-2)) + (3 * g(n-3))\n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + (2 * g(n-2)) + (3 * g(n-3))\n\n","Time":0,"SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+(2*g(n-2))+(3*g(n-3))","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\"))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\"))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(LeafWildcard(\"BinaryExpressionNode\")), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","4","","# Error: expected","#     3","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":318,"studentId":0,"date":null,"diff":"\r\nInputObject  SideIndicator\r\n-----------  -------------\r\n        i+=1 <=           \r\n\r\n\r\n","before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    other_num=1\n    if n<=3:\n        return (n)\n    else:\n        i+=1\n        other_num+=1\n        return (g(n-1))+g(n-other_num)*2+(g(n-3))*3\n        \n\n","after":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    other_num=1\n    if n<=3:\n        return (n)\n    else:\n        other_num+=1\n        return (g(n-1))+g(n-other_num)*2+(g(n-3))*3\n        \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g","",">>> from hw02 import *",">>> g(1)","1",">>> g(2)","2",">>> g(3)","3",">>> g(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 200, in g","    i+=1","UnboundLocalError: local variable 'i' referenced before assignment","","# Error: expected","#     10","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]}]