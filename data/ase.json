[{"index": 0, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    cum = [0]\n    total = 0\n    for i in range(len(L)):\n        total += L[i]\n        cum.append(total)\n    answer = L[0]\n    for i in range(len(L), -1, -1):\n        for j in range(i-1, -1, -1):\n            answer = max(answer, cum[i]-cum[j])\n    return answer"}, {"index": 1, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    maxSum = 0\n    for i in range(len(L)):\n        for j in range(1, len(L)-i+1):\n            sum = 0\n            for k in L[i:i+j]:\n                sum += k\n            if sum > maxSum:\n                maxSum = sum\n    return maxSum"}, {"index": 2, "code": "# Paste your code here\ndef max_contig_sum(L):\n    maxSum = 0\n    for i in range(len(L)):\n        for j in range(i,len(L)) :\n            if sum(L[i:j+1]) > maxSum:\n                maxSum = sum(L[i:j+1])\n\n    return maxSum\n"}, {"index": 3, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    maximum = 0\n    begin = 0\n    while begin < (len(L)-1):\n        end = begin + 1\n        while end < len(L):\n            temp = 0\n            for i in range(begin, end+1):\n                temp = temp + L[i]\n            if temp > maximum:\n                maximum = temp\n            end = end+1\n        begin = begin + 1\n    return maximum\n                \n        \n    "}, {"index": 4, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max_sum = 0  # ok, as there is at least one positive\n    for i in range(len(L)):\n        for j in range(i, len(L)):\n            seq_sum = sum(L[i:j+1])\n            if max_sum < seq_sum:\n                max_sum = seq_sum\n    return max_sum\n"}, {"index": 5, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    a = [0]\n    for i in L:\n        a.append(a[-1] + i)\n\n    checked = False\n    best = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            guess = a[j] - a[i]\n            if guess > best or not checked:\n                checked = True\n                best = guess\n    return best"}, {"index": 6, "code": "def max_contig_sum(L):\n    max_sum = 0\n    for i in range(len(L)):\n        for j in range(i, len(L)):\n            s = sum(L[i:j+1])\n            if s > max_sum:\n                max_sum = s\n    return max_sum\n"}, {"index": 7, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    n = len(L)\n\n    m = 0\n    for i in xrange(n):\n        for j in xrange(i + 1, n + 1):\n            s = sum(L[i:j])\n            if s > m:\n                m = s\n    return m\n"}, {"index": 8, "code": "# Paste your code here\ndef max_contig_sum(L):\n  max = 0 # <= actual max since there is at least 1 positive\n  for i in range(len(L)): # i is start index\n    for j in range(i + 1, len(L) + 1): # j is end index, exclusive\n      if sum(L[i:j]) > max:\n        max = sum(L[i:j])\n  return max"}, {"index": 9, "code": "from itertools import combinations\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    return max(sum(L[a:b]) for a,b in combinations(xrange(len(L)+1),2))"}, {"index": 10, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    max = L[0]\n    for i in range(1,len(L)):\n        for j in range(len(L)-i+1):\n            x = 0\n            sum = 0\n            while x < i:\n                sum += L[j+x]\n                x = x+1                \n            if sum > max:\n                max = sum\n\n    return max"}, {"index": 11, "code": "def max_contig_sum(L):\n\tdef sum(a, b):\n\t\ts = 0\n\t\twhile a < b:\n\t\t\ts += L[a]\n\t\t\ta += 1\n\t\treturn s\n\n\tmax_sum = 0\n\tstart = 0\n\n\twhile start < len(L):\n\t\tend = start + 1\n\t\twhile end <= len(L):\n\t\t\ts = sum(start, end)\n\t\t\tif s > max_sum:\n\t\t\t\tmax_sum = s\n\t\t\tend += 1\n\t\tstart += 1\n\n\treturn max_sum"}, {"index": 12, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    best= 0\n    possible = []\n    for i in L:\n        if i > 0:\n            possible.append(i)\n            best= sum(possible)\n        elif abs(i) < best:\n            possible.append(i)\n        else:\n            possible= []\n    return best\n"}, {"index": 13, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    \n    ans = 0\n    minpsum = 0\n    psum = 0\n    for x in L:\n        psum += x\n        if psum - minpsum > ans:\n            ans = psum - minpsum\n        if psum < minpsum:\n            minpsum = psum\n    \n    return ans"}, {"index": 14, "code": "# Paste your code here\n\n\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    \n    sum = 0\n   \n    for i in L:\n        sum += i\n    \n    return sum"}, {"index": 15, "code": "# Paste your code here\ndef max_contig_sum(L):\n    max_item = max(L)\n    list_len = len(L)\n\n    for i in range(list_len - 1):\n        temp = L[i]\n        temp_len = i + 1\n        j = i + 1\n\n        while (temp_len) <= list_len - 1:\n            temp += L[j]\n            temp_len += 1\n            j += 1\n\n            if temp > max_item:\n                max_item = temp\n                \n    return max_item"}, {"index": 16, "code": "def max_contig_sum(L):\n\tm = float(\"-Inf\")\n\tfor i in xrange(len(L)):\n\t\tfor j in xrange(i+1, len(L)+1):\n\t\t\tm = max(sum(L[i:j]), m)\n\treturn m"}, {"index": 17, "code": "# Paste your code here\ndef max_contig_sum(L):\n    max = L[0]\n    count = 1\n    while count <= len(L):\n        for f in range(0, len(L) - count + 1):\n            sum = 0\n            for i in range(f, f + count):\n                sum += L[i]\n            if sum > max:\n                max = sum\n        count += 1\n    return max"}, {"index": 18, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    maxS = L[0]\n    for n in range(1, len(L) + 1):\n        i = 0\n        while i + n <= len(L):\n            s = sum(L[i:i+n])\n            if s > maxS: maxS = s\n            i += 1\n    return maxS"}, {"index": 19, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    l = len(L)\n    max = L[0]\n    for i in range(1, len(L)+1):\n    \tj = l - i + 1\n    \tfor k in range(j):\n\t    \tnew_sum = sum(L[k: k+i])\n    \t\tif new_sum > max:\n    \t\t\tmax = new_sum\n    return max"}, {"index": 20, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    maxsum = 0\n    for i in range(len(L)):\n        tempsum = 0\n        for j in range(i, len(L)):\n            tempsum += L[j]\n            if tempsum > maxsum:\n                maxsum = tempsum\n    return maxsum"}, {"index": 21, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    l = []\n    size = len(L)\n    sm = 0\n    if len(L)==1:\n        return L[0]\n    elif len(L)==2:\n        return L[0]+L[1]\n    else:\n        for e in range(len(L)-1)\n            for e in range(size):\n                sm+=L[e]\n            l.append(sm)\n"}, {"index": 22, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    if len(L)==1:\n        return L[0]\n    else:\n        sumList = []\n        for i in range(len(L)):\n            prevS=L[i]\n            for j in range(len(L)):\n                if j > i:\n                    newS = prevS + L[j]\n                    prevS = newS\n                    sumList.append(newS)\n        return max(sumList)\n"}, {"index": 23, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max_so_far = float('-inf')\n    for i in xrange(1, len(L) + 1):\n        for j in xrange(len(L) - i):\n            s = sum(L[j:j+i])\n            if s > max_so_far:\n                max_so_far = s\n    return max_so_far\n"}, {"index": 24, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    max = 0\n    for i in range(len(L)):\n        for j in range(i + 1, len(L)):\n            sum = 0\n            for k in range(i, j):\n                sum += L[k]\n            if max < sum:\n                max = sum\n    return max"}, {"index": 25, "code": "# Paste your code here\ndef max_contig_sum(L):\n    maxSum = 0\n    size = len(L)\n    for i in range(0,size):\n        pos = size\n        while pos > 0:\n            sum = 0\n            for j in range(i, pos):\n                sum += L[j]\n            if sum > maxSum:\n                maxSum = sum\n            pos -=1\n    return maxSum"}, {"index": 26, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max_sum = 0\n    for i in range(len(L)):\n        for j in range(i + 1, len(L) + 1):\n            cur_sum = 0            \n            for val in L[i:j]:\n                cur_sum += val\n            if (cur_sum > max_sum):\n                max_sum = cur_sum\n    return max_sum"}, {"index": 27, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    maxSum = sum(L)\n    extent = len(L)\n    for i in range(len(L)):\n        for j in range(len(L)):\n            tots = sum(L[i:j])\n            if tots > maxSum:\n                maxSum = tots\n    return maxSum"}, {"index": 28, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    minI = 0 # Inclusive\n    maxI = 0 # Inclusive\n    maxSum = L[0]\n    for startIndex in range(len(L)):\n        for stopIndex in range(startIndex,len(L)):\n            ConSum = 0\n            for x in range(startIndex,stopIndex+1):\n                ConSum += L[x]\n            if ConSum > maxSum:\n                maxSum = ConSum\n                minI = startIndex\n                maxI = stopIndex\n    return maxSum"}, {"index": 29, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n\n    res = 0\n\n    for i in range(len(L) -1, 0, -1):\n        if L[i] > 0:\n            break\n        L = L[0:len(L)-1]\n\n    for i in range(0, len(L)):\n        res += L[i]\n        if res < 0 and i != len(L) - 1:\n            res = 0\n\n    return res"}, {"index": 30, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max_sum = L[0]\n    for i in range(len(L)):\n        s = L[i]\n        if s > max_sum:\n            max_sum = s\n        for j in range(i + 1, len(L)):\n            s += L[j]\n            if s > max_sum:\n                max_sum = s\n    return max_sum"}, {"index": 31, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n\n    sumList = []\n\n    for start in range(0, len(L)):\n        for end in range(1, len(L)):\n            sumList.append(sum(L[start:end+1]))\n\n    largest = sumList[0]\n\n    for x in sumList:\n        if x > largest:\n            largest = x\n    return largest"}, {"index": 32, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    # With at least one positive number, the max contiguous sum must be positive\n    max_sum = 0\n    for i in range(len(L)):\n        for j in range(i + 1, len(L) + 1):\n            max_sum = max(find_sum(L, i, j), max_sum)\n    return max_sum\n\ndef find_sum(L, i, j):\n    total = 0\n    for ind in range(i, j):\n        total += L[ind]\n    return total"}, {"index": 33, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    sz = len(L)\n    mx = -1\n    for i in range(sz):\n    \tfor j in range(i, sz):\n    \t\tcur = 0\n    \t\tfor k in range(i, j+1):\n    \t\t\tcur += L[k]\n    \t\tif cur > mx:\n    \t\t\tmx = cur\n    return mx"}, {"index": 34, "code": "# Paste your code here\ndef max_contig_sum(L):\n    max_sum = sum(L)\n    num_elems = len(L)\n    for first in xrange(num_elems-1):\n        for last in xrange(1, num_elems+1):\n            value = sum(L[first:last])\n            if value > max_sum:\n                max_sum = value\n    return max_sum"}, {"index": 35, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    result = 0\n    for low in range(len(L)):\n        high = len(L)\n        while high - low > 0:\n            if sum(L[low:high]) > result:\n                result = sum(L[low:high])\n            high -= 1\n    return result\n"}, {"index": 36, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    # L = [1, -2, 3, -4]\n    # options are 1, -2, 3, -4\n    # options are 1 - 2, -2 + 3, 3 + -4\n    # options are 1 - 2 + 3, -2 + 3 - 4\n    # options are 1 - 2 + 3 - 4\n    # 4 sets of 1, 3 sets of 2, 2 sets of 3, 1 set of 4\n    #YOUR CODE HERE\n    cmax = L[0]\n    cmax_start = 0\n    cmax_len = 1\n\n    for i in range(0, len(L)):\n        if L[i] > cmax: #check len(1)\n            cmax = L[i]\n            cmax_start = i\n            cmax_len = 1\n        for j in range(i + 1, len(L)):\n            temp = 0\n            for x in range(i, j + 1):\n                temp += L[x]\n            if temp > cmax:\n                cmax = temp\n                cmax_start = i\n                cmax_len = j + 1 - i\n\n    return cmax"}, {"index": 37, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max_sum = 0\n    for x in range(0, len(L)):\n        temp_sum = L[x]\n        past_x = 0\n        while temp_sum > 0 and x + past_x + 1 < len(L):\n            past_x += 1\n            temp_sum = temp_sum + L[x+past_x]\n            if max_sum < temp_sum:\n                max_sum = temp_sum\n    return max_sum"}, {"index": 38, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    max_val = 0\n\n    for i in range(len(L)):\n        for j in range(i, len(L) + 1):\n            max_val = max(max_val, sum(L[i:j]))\n\n    return max_val"}, {"index": 39, "code": "# I'm running out of time, so unfortunately I won't present an elegant here  = (\n\ndef max_contig_sum(sequence):\n    best = 0 # Contains at least one positive number, so some subsequence is greater than zero.\n    for sl in xrange(len(sequence)):\n        subseq_length = sl + 1\n        for offset in xrange(len(sequence) - subseq_length + 1):\n            candidate = sum(sequence[offset:(subseq_length+offset)])\n            if candidate > best:\n                best = candidate\n    return best"}, {"index": 40, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L\"\"\"\n    sumList = []\n    for i in range(len(L)):\n        newL = L[i:]\n        for i in range(len(newL)):\n            sumList.append(sum(newL))\n    for i in range(len(L)):\n        newL = L[:i]\n        for i in range(len(newL)):\n            sumList.append(sum(newL))\n    return 'max is:', max(sumList)\n"}, {"index": 41, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max_sum = L[0]\n    for i in range(len(L)):\n        for j in range(i, len(L)+1):\n            if sum(L[i:j]) > max_sum:\n                max_sum = sum(L[i:j])\n    return max_sum"}, {"index": 42, "code": "def max_contig_sum(L):\n    max_sum = 0\n    for start in xrange(len(L)):\n        for end in xrange(start + 1, len(L) + 1):\n            curr = sum(L[start:end])\n            if curr > max_sum:\n                max_sum = curr\n    return max_sum"}, {"index": 43, "code": "# Paste your code here\ndef max_contig_sum(L):\n    result = 0\n    for i in range(len(L)):\n        for j in range(len(L)):\n            s = sum(L[i:j+1])\n            if s > result:\n                result = s\n    return result"}, {"index": 44, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max = 0\n    length = len(L)\n    counter = 0\n    for i in L:\n        counter = 0\n        if i > max:\n            max = i\n        for s in L[i+1:]:\n            if i+s+counter > max:\n                max = i+s+counter\n                counter +=s\n    return max\n"}, {"index": 45, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    contig_subsets = []\n    for i in range(0, len(L)):\n    \tfor j in range(i, len(L)):\n    \t\tcontig_subsets.append(L[i:j+1])\n\n    max_sum = -float(\"inf\")\n    for subset in contig_subsets:\n    \tif sum(subset) > max_sum:\n    \t\tmax_sum = sum(subset)\n    return max_sum"}, {"index": 46, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    dp = [0]*len(L)\n    for i,val in enumerate(L):\n        if i == 0:\n            dp[i] = val\n            continue\n        if dp[i-1] + val > val:\n            dp[i] = dp[i-1] + val\n        else: dp[i] = val\n    return max(dp)\n\n"}, {"index": 47, "code": "def max_contig_sum(L):\n    maxi = 0\n    for i in range(len(L)):\n        for j in range(len(L)):\n            check = L[i:j+1]\n            if sum(check) > maxi:\n                maxi = sum(check)\n    return maxi"}, {"index": 48, "code": "# Paste your code here\ndef max_contig_sum(L):\n\tmax_sum = max(L[0], L[len(L) - 1])\n\tfor start_index in range(0, len(L)): # each start point\n\t\tfor end_index in range(start_index + 1, len(L)): # each end point\n\t\t\tarr = L[start_index:end_index+1]\n\t\t\tthis_sum = sum(arr)\n\t\t\tif max_sum == None or this_sum > max_sum:\n\t\t\t\tmax_sum = this_sum\n\treturn max_sum"}, {"index": 49, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    max = L[0]\n    for i in range(0, len(L)):\n        #print\n        startingNum = L[i]\n        for n in L[i+1:]:\n            #print n\n            startingNum += n\n            if (startingNum > max):\n                max = startingNum\n    return max\n"}, {"index": 50, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    # L = [1, -2, 3, -4]\n    # options are 1, -2, 3, -4\n    # options are 1 - 2, -2 + 3, 3 + -4\n    # options are 1 - 2 + 3, -2 + 3 - 4\n    # options are 1 - 2 + 3 - 4\n    # 4 sets of 1, 3 sets of 2, 2 sets of 3, 1 set of 4\n    #YOUR CODE HERE\n    cmax = L[0]\n    cmax_start = 0\n    cmax_len = 1\n\n    for i in range(0, len(L)):\n        if L[i] > cmax: #check len(1)\n            cmax = L[i]\n            cmax_start = i\n            cmax_len = 1\n        for j in range(i + 1, len(L)):\n            temp = 0\n            for x in range(i, j + 1):\n                temp += L[x]\n            if temp > cmax:\n                cmax = temp\n                cmax_start = i\n                cmax_len = j + 1 - i\n\n    return cmax"}, {"index": 51, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max = 0\n\n    for contig_seq_len in range(1, len(L) + 1):\n        for index in range(len(L) - contig_seq_len + 1):\n            sum = 0\n            for elem in L[index:index + contig_seq_len]:\n                sum += elem\n            if sum > max:\n                max = sum\n\n    return max"}, {"index": 52, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    highest = L[0]\n    for i in range(len(L)):\n        test_sum = 0\n        for j in range(i, len(L)):\n            test_sum += L[j]\n            if test_sum > highest:\n                highest = test_sum\n        if test_sum > highest:\n            highest = test_sum\n    return highest"}, {"index": 53, "code": "def max_contig_sum(L):\n  \"\"\" L, a list of integers, at least one positive\n  Returns the maximum sum of a contiguous subsequence in L \"\"\"\n  #YOUR CODE HERE\n  ## I had to do this exact problem when I was interviewing at Bloomberg\n  ## man I wish I remembered how I did it then\n  ## :(\n  # maxN = max(L)\n  # ind = L.index(maxN)\n  # ret = maxN\n  # there is a more efficient way to do this - but i am not 100% sure\n  # leaving this as a comment for funsies\n  # basically try adding all pos segments only and keeping track of that\n  # but eh\n  #@@@# bloomberg cared if my code was efficient - hopefully you guys do not\n  # i = 0\n  # maxs = []\n  # currSum=0\n  # inPos = L[0] > 0 ##boolean if we're in pos or negative land\n  # while(i < len(L)):\n  #   if L[i] < 0:\n  #     maxs.append(currSum)\n  #     continue\n  #   else:\n  #     currSum += L[i]\n  # return max(maxs)\n\n\n  sums = []\n  for i in range(len(L)):\n    for j in range(len(L)):\n      sums.append(sum(L[i:j+1]))\n  return max(sums)"}, {"index": 54, "code": "def max_contig_sum(L):\n    running_total = 0\n    max_sum = 0\n    for num in L:\n        running_total+=num\n        if (running_total>max_sum):\n            max_sum = running_total\n        if (running_total < 0):\n            running_total = 0\n    return max_sum"}, {"index": 55, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n\n    def get_sublists(n, L):\n        data = []\n        for i in range(len(L) - n + 1):\n            data.append(L[i:i+n])\n\n        return data\n\n    best_sum = None\n    for i in range(1, len(L) + 1):\n        sublists = get_sublists(i, L)\n        for s in sublists:\n            total = sum(s)\n            if best_sum is None or total > best_sum:\n                best_sum = total\n\n    return best_sum"}, {"index": 56, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n\n    currentMax = min(L)\n    index = 0\n    for num in range(index,len(L)): #runs thru all nums in list\n        if L[num] > currentMax:\n            currentMax = L[num] #just tests if current num is max\n        newSum = L[num]\n        for num2 in range(num+1,len(L)): #runs thru remaining nums in list\n            newSum += L[num2]\n            if newSum > currentMax:\n                currentMax = newSum\n        \n    return currentMax"}, {"index": 57, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    Tmax = 0\n    for i in range(len(L)):\n        S = L[i]\n        otherL = L[i+1:]\n        for i2 in otherL:\n            Smax = 0\n            S += i2\n            if S > Smax:\n                Smax = S\n            if Smax > Tmax:\n                Tmax = Smax\n    return Tmax"}, {"index": 58, "code": "def max_contig_sum(L):\n    cur=0\n    mx=0\n    n = len(L)\n    for i in range(0,n):\n        cur = max(cur+L[i],L[i])\n        mx = max(mx,cur)\n    return mx\n"}, {"index": 59, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    max_sum = L[0]\n    sums = dict() \n    for n in range(len(L)):\n        sums[L[n]] = []\n        for m in range(n, len(L) + 1):\n            if n!= m:\n                sums[L[n]].append(sum(L[n:m]))\n    for key in sums:\n        for s in sums[key]:\n           if s > max_sum:\n               max_sum = s\n\n    return max_sum"}, {"index": 60, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    best_sum = 0\n    cur_sum = 0\n    for x in L:\n        cur_sum = max(cur_sum + x, x)\n        best_sum = max(best_sum, cur_sum)\n    return best_sum"}, {"index": 61, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    minI = 0 # Inclusive\n    maxI = 0 # Inclusive\n    maxSum = L[0]\n    for startIndex in range(len(L)):\n        for stopIndex in range(startIndex,len(L)):\n            ConSum = 0\n            for x in range(startIndex,stopIndex+1):\n                ConSum += L[x]\n            if ConSum > maxSum:\n                maxSum = ConSum\n                minI = startIndex\n                maxI = stopIndex\n    return maxSum"}, {"index": 62, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    maxS = 0\n    for i in range(len(L)):\n        for j in range(len(L)+1):\n            if j > i:\n                s = sum(L[i:j])\n                if s > maxS:\n                    maxS = s\n    return maxS"}, {"index": 63, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    l = []\n    mx = 0\n    l.append(0)\n    for i in range (0,len(L)):\n        l.append(l[i]+L[i])\n    for i in range (0,len(l)):\n        for j in range (i,len(l)):\n            mx = max(mx,l[j]-l[i])\n    return mx"}, {"index": 64, "code": "def max_contig_sum(L):\n    max_total = 0\n    test_total = 0\n    length = len(L)\n    for guesslen in range(1,length+1):\n        for start in range(0,length-guesslen+1):\n            for place in range(start, start+guesslen):\n                test_total = test_total+L[place]\n            if test_total > max_total: \n                max_total = test_total\n            test_total = 0\n    return max_total"}, {"index": 65, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    max_sum = None\n    for x in range(len(L)):\n        guess = L[x]\n        for y in range(len(L)):\n            if y > x:\n                guess += L[y]\n            if guess > max_sum:\n                max_sum = guess\n    if max_sum == None:\n        return []\n    else:\n        return max_sum\n"}, {"index": 66, "code": "def max_contig_sum(L):\n    max=0\n    for i in range(0,len(L)):\n        sum=L[i]\n        if(sum>max):\n            max=sum\n        for j in range(i,len(L)-1):\n            sum=sum+L[j+1]\n            if(sum>max):\n                max=sum\n    return(max)"}, {"index": 67, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    sums = []\n    for begin in range(0, len(L) + 1):\n        for end in range(begin, len(L) + 1):\n            sums.append(sum(L[begin:end]))\n    return max(sums)\n"}, {"index": 68, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L\n    for example, max_contig_sum([3, 4, -8, 15, -1, 2]) is 16 \"\"\"\n    currentMax = max(L)\n    for l in range(2,len(L)+1):\n        for i in range(0,len(L)-l+1):\n            if sum(L[i:l+i]) > currentMax:\n                currentMax = sum(L[i:l+i])\n    return currentMax"}, {"index": 69, "code": "def max_contig_sum(L):\n  max_so_far = 0\n  actual_max = 0\n  count = 0\n  while count < len(L):\n    current = L[count] + max_so_far\n    # if it ever goes negative, discard current sum and start from 0\n    if current < 0:\n      max_so_far = 0\n    else:\n      max_so_far = current\n      if max_so_far > actual_max:\n        actual_max = max_so_far\n    count += 1\n  return actual_max"}, {"index": 70, "code": "def max_contig_sum(L):\n    m = L[0]\n    for i in range(len(L)):\n        for j in range(i + 1, len(L) + 1):\n            if sum(L[i:j]) > m:\n                m = sum(L[i:j])\n            \n\n\n    return m"}, {"index": 71, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    possible_sums = []\n    for i in range(len(L)):\n        for j in range(i+1, len(L)+1):\n            possible_sums.append(sum(L[i:j]))\n    return max(possible_sums)"}, {"index": 72, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n\n    largestSum = sum(L)\n\n    for i in range(len(L)):\n        for j in range(i, len(L)):\n            if sum(L[i:j + 1]) > largestSum:\n                largestSum = sum(L[i:j + 1])\n    return largestSum"}, {"index": 73, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    s = 0\n    begin = 0\n    end = 1\n    largest = 0\n    for begin in range(end): \n        for end in range(begin, len(L)+1):\n            s = 0\n            for i in L[begin:end]:\n                s += i\n            if s > largest:\n                largest = s\n\n    return largest"}, {"index": 74, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    current_max = float('-inf')\n    for i in range(len(L)):\n        for j in range(i,len(L)):\n           #asum = 0\n           #for k in range(i,j):\n              #asum+=L[k]\n            asum = sum(L[i:j+1])\n            if asum > current_max:\n                current_max = asum\n    return current_max"}, {"index": 75, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    sum = L[0]\n    i = 0\n    while i<len(L):\n        j = i+1\n        temp_sum = L[i]\n        if temp_sum>sum:\n            sum = temp_sum\n        while j<len(L):\n            #sum from i to j, put that into temp_sum\n            temp_sum += L[j]\n            if temp_sum>sum:\n                sum = temp_sum\n            j+=1\n        i+=1\n    return sum"}, {"index": 76, "code": "def max_contig_sum(L):\n    maximum = 0\n    for startIndex in range(len(L)):\n        \n        for numUsed in range(len(L) - startIndex):\n            total = L[startIndex]\n            current = startIndex + 1\n            while numUsed > 0:\n                total += L[current]\n                current += 1\n                numUsed -= 1\n            if total > maximum:\n                maximum = total\n    return maximum\n             \n    \n    \n    \n    \n"}, {"index": 77, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    maxV = 0\n    i = 0\n    for item in L:\n        val = 0\n        for item2 in L[i:]:\n            val += item2\n            if val > maxV:\n                maxV = val\n        i+=1;\n    return maxV"}, {"index": 78, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    maxx = 0\n    for i in range(0, len(L)):\n    \tfor j in range(i, len(L)):\n    \t\tif sum(L[i:j+1]) > maxx:\n    \t\t\tmaxx = sum(L[i:j+1])\n    return maxx"}, {"index": 79, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    maxsum = 0\n    for start_idx in xrange(len(L)):\n        for end_idx in xrange(start_idx, len(L)+1):\n            currsum = sum(L[start_idx:end_idx])\n            if currsum > maxsum:\n                maxsum = currsum\n    return maxsum\n"}, {"index": 80, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max_sum = L[0]\n    \n    for i in xrange(len(L)):\n        for j in xrange(i, len(L)):\n            max_sum = max(max_sum, sum(L[i:j+1]))\n    return max_sum"}, {"index": 81, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max_sum = 0\n    for i in range(len(L)+1):\n        for j in range(i, len(L)+1):\n            if sum(L[i:j]) > max_sum:\n                max_sum = sum(L[i:j])\n    return max_sum"}, {"index": 82, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    max = L[0]\n    for i in range(1,len(L)):\n        for j in range(len(L)-i+1):\n            x = 0\n            sum = 0\n            while x < i:\n                sum += L[j+x]\n                x = x+1                \n            if sum > max:\n                max = sum\n\n    return max"}, {"index": 83, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    target = sum(L)\n    temp = list(L)\n    del(temp[0])\n    tsum = 0\n    t2 = 0\n    while len(L) > 0:\n        tsum += L[0]\n        if tsum > target:\n            target = tsum\n        del(L[0])\n    if len(temp) != 0:\n        t2 = max_contig_sum(temp)\n    if t2 > target:\n        target = t2\n    return target"}, {"index": 84, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #should run in linear time\n    #i = maximum subsequence sum seen so far\n    i = 0\n    #j = maximum subsequence sum ending at the given index\n    j = 0\n    #check each index as an endpoint\n    for s in L:\n        #check to see if sum up to the index is positive\n        #if it is, then replace the max sum with the sum to that index\n        j = max(j + s, 0)\n        #update the max sum seen so far if the sum to the index is bigger\n        i = max(i, j)\n    return i\n"}, {"index": 85, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    sum = 0\n    for k in L:\n        temp = 0\n        for i in range(len(L)-1):\n            if(L[i+1] + L[i] < 0 ):\n                ##if the number is not inreasing, then stop adding them\n               if temp > sum:\n                   sum = temp\n                   temp = 0\n               break\n            else:\n               temp += L[i]\n        \n        \n        \n    return sum"}, {"index": 86, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    begin = 0\n    maxsum = None\n    while begin < len(L):\n        for index in range(len(L)):\n            subsum = 0\n            if L[begin:index+1] != []:\n                for item in L[begin:index+1]:\n                    subsum += item\n                if maxsum == None:\n                    maxsum = subsum\n                elif subsum > maxsum:\n                    maxsum = subsum\n        begin += 1\n    return maxsum"}, {"index": 87, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    L = [0] + L\n    lst = []\n    sum = 0\n    for i in L:\n    \tsum += i\n    \tlst += [sum]\n\n    anslst = []\n    for i in range(len(lst)):\n    \tbest = L[i]\n    \tfor j in range(i+1,len(lst)):\n    \t\tif lst[j] - lst[i-1] > best:\n    \t\t\tbest = lst[j] - lst[i]\n    \tanslst += [best]\n\n    return max(anslst)"}, {"index": 88, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    dp = [0]*len(L)\n    for i,val in enumerate(L):\n        if i == 0:\n            dp[i] = val\n            continue\n        if dp[i-1] + val > val:\n            dp[i] = dp[i-1] + val\n        else: dp[i] = val\n    return max(dp)\n\n"}, {"index": 89, "code": "def max_contig_sum(L):\n    #L, a list of integers, at least one positive\n    #Returns the maximum sum of a contiguous subsequence in L\n    max = L[0] + L[1]\n    for i in range(2, len(L)):\n        for a in range(len(L) - i):\n            sum = L[a]\n            for b in range(1, i + 1):\n                sum += L[a + b]\n            if sum > max:\n                max = sum\n    return max"}, {"index": 90, "code": "def max_contig_sum(L):\n    if len(L) == 0:\n        return 0\n    maxSum = L[0]\n    for i in range(0, len(L)):\n        currMaxSum = 0\n        for j in range(i, len(L)):\n            currMaxSum += L[j]\n            if (currMaxSum > maxSum):\n                maxSum = currMaxSum\n    return maxSum"}, {"index": 91, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    myMax = 0\n    for i in range(len(L)):\n       for j in range(i,len(L)):\n          myVal = 0\n          for k in range(i,j+1):\n            myVal += L[k]\n          if myVal > myMax:\n             myMax = myVal\n    return myMax"}, {"index": 92, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    lengthL = len(L)\n    sums = []\n    for n in range (lengthL):\n        #print \"n: \", n\n        #print \"L: \", L\n        for i in range (len(L)):\n            contigNums = []\n            for j in range (i+1):\n                contigNums.append(L[j])\n                #print \"contigNums: \", contigNums\n            sums.append(sum(contigNums))\n            #print 'sums: ', sums\n        L = L[1:]   \n    return max(sums)"}, {"index": 93, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    max_sum = L[0]\n    for i in range(0, len(L)):\n        for j in range(i + 1, len(L) + 1):\n            this_sum = sum(L[i:j])\n            if this_sum > max_sum:\n                max_sum = this_sum\n    return max_sum\n"}, {"index": 94, "code": "def max_contig_sum(L):\n    minsum = 0\n    maxsum = 0\n    cursum = 0\n    for i in L:\n        cursum += i\n        if cursum<minsum:\n            minsum=cursum\n        if cursum-minsum>maxsum:\n            maxsum=cursum-minsum\n    return maxsum"}, {"index": 95, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    max_value = 0 # we know at lesat one number is positive, so it will be greater than 0\n    for extras in range(len(L)): # extras 0 = subseqeunece of 1 number; extras 1 = subsqeunence of 2 numbers; ...\n        for start_index in range(0, len(L)-extras): # index is the starting number\n            temp_answer = 0\n            for item_index in range(start_index, start_index + extras + 1):\n                temp_answer += L[item_index]\n            if temp_answer > max_value:\n                max_value = temp_answer\n\n    return max_value"}, {"index": 96, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    highest = 0\n    for start in range(len(L)):\n        total = 0\n        for end in range(start, len(L)):\n            total += L[end]\n            if total > highest:\n                highest = total\n    return highest"}, {"index": 97, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    max = 0\n    for i in range(0, len(L)):\n    \tsum = 0\n    \tfor j in range(i, len(L)):\n    \t\tsum += L[j]\n\n    \t\tif sum > max:\n    \t\t\tmax = sum\n    \n    return max"}, {"index": 98, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max_sum = L[0]\n    list_of_sequences = []\n    def get_sequences(L):\n        sequences = []\n        for i in range(len(L)):\n            sequences.append(L[:i+1])\n        return sequences\n    for i in range(len(L)):\n        a_list = get_sequences(L[i:])\n        for j in a_list:\n            list_of_sequences.append(j)\n    for i in list_of_sequences:\n        if sum(i) > max_sum:\n            max_sum = sum(i)\n    return max_sum"}, {"index": 99, "code": "def max_contig_sum(L):\n    max_sum = L[0]\n    for i in range(0, len(L)-1):\n        temp_max_sum = L[i] + L[i+1]\n        for j in range(i+2, len(L)):\n            temp_max_sum+=L[j]\n            if temp_max_sum > max_sum:\n                max_sum = temp_max_sum\n    return max_sum\n"}, {"index": 100, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    maxes = list()\n    for n in range(len(L)):\n        for x in range(n+1, len(L)):\n            cmax = 0\n            for y in range(n+1, x+1):\n                cmax += L[y]\n            maxes.append(cmax)\n    return max(maxes)"}, {"index": 101, "code": "                    \ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    listt = []\n    #sum1 = 0\n    for j in range(len(L)):\n        sum1 = 0\n        for i in L[j:]:\n            sum1 += i\n            listt.append(sum1)\n    \n    listt.sort()\n    return listt.pop(-1)"}, {"index": 102, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n\n    if len(L) == 1:\n        return L[0]\n    \n    maxSum = 0\n    for i in L:\n        maxSum += i\n        \n\n    sumLower = max_contig_sum(L[0:len(L)-1])\n    sumHigher = max_contig_sum(L[1:len(L)])\n\n    if sumLower < sumHigher:\n        sumLower = sumHigher\n    \n    if sumLower > maxSum:\n        maxSum = sumLower\n\n    return maxSum"}, {"index": 103, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    maxSum = 0\n    for i in range(len(L)):\n        s = 0\n        for j in range(i, len(L)):\n            s += L[j]\n            if s > maxSum:\n                maxSum = s\n    return maxSum"}, {"index": 104, "code": "def max_contig_sum(L):\n  max = 0\n  for i in range(len(L)):\n    sum = L[i]\n    for j in range(i+1,len(L)):\n      sum += L[j]\n      if sum > max:\n        max = sum\n  return max"}, {"index": 105, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    sum1=0\n    for i in range(len(L)):\n        sum2=0\n        for j in range(i,len(L)):\n            sum2 += L[j]\n            if sum2>sum1:\n                sum1=sum2\n    return sum1"}, {"index": 106, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    length = len(L)\n    max = 0\n    for index in range(0,length):\n        for k in range(index+1, length+1):\n            if sum(L[index:k]) > max:\n                max = sum(L[index:k])\n    return max"}, {"index": 107, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    largest=0\n    for i in range(len(L)):\n        subsum=L[i]\n        if subsum>largest:\n            largest = subsum\n        for j in range(i+1, len(L)):\n            subsum+=L[j]\n            if subsum>largest:\n                largest = subsum \n    return largest"}, {"index": 108, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    m = max(L) #assumes that a contiguous subsequence can have length 1\n    for i in range(len(L)):\n        val = 0\n        for j in range(len(L)-i):\n            val+=L[i+j]\n            if val > m:\n                m = val\n    return m"}, {"index": 109, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    if len(L) == 0:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n\n    maxsum = L[0]\n    count = 0\n    for i in range(len(L)):\n        total = 0\n        for j in range(count,len(L)):\n            total += L[j]\n            if total > maxsum:\n                maxsum = total\n        count += 1\n\n    return maxsum"}, {"index": 110, "code": "def helper_left(L):\n    index = -1\n    worst_sum = 0\n    for i in range(len(L)):\n        pairing = []\n        for j in L[:i+1]:\n            pairing.append(j)\n        sum_of_list = sum(pairing)\n        if sum_of_list < worst_sum:\n            index = i\n            worst_sum = sum_of_list\n    return L[:index+1]\n    \ndef helper_right(L):\n    rev_L = L[:]\n    rev_L.reverse()\n    return helper_left(rev_L)\n    \ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    worst_left = sum(L[:helper_left(L)+1])\n    worst_right = sum(L[helper_right(L):])\n    if worst_left < worst_right:\n        return max_contig_sum(L[helper_right(L):])\n    elif worst_right < worst_left:\n        return max_contig_sum(L[:helper_left(L)+1])\n    else:\n        return sum(L)\n    \n        \n        \n        "}, {"index": 111, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max = 0\n    for i in range(len(L)):\n        for j in range(i+1, len(L)+1):\n            if sum(L[i:j])>max:\n                max = sum(L[i:j])\n    return max"}, {"index": 112, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    sum = 0\n    maxSum=0\n    for i in range(len(L)):\n        sum=0\n        for j in range(i,len(L)):\n            sum=0\n            for index in range(i,j):\n                sum += L[index]\n            if sum>maxSum:\n                maxSum = sum\n\n    return maxSum\n"}, {"index": 113, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    pass"}, {"index": 114, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    # YOUR CODE HERE\n    maxSum = L[0]\n    result = 0\n    y=0\n    while y< len(L):\n        x=0\n        result = 0\n        while x<y:\n            result +=L[x]\n            x+=1\n        if result>maxSum:\n            maxSum = result\n        y+=1\n    return maxSum"}, {"index": 115, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    maxSoFar = 0\n    for i in range(len(L)):\n    \tfor j in range(i+1, len(L)):\n    \t\ts = sum(L[i:j])\n    \t\tif s > maxSoFar:\n    \t\t\tmaxSoFar = s\n   \treturn maxSoFar"}, {"index": 116, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    msum = 0\n    s = 0\n    for a in range(0,len(L)):\n        for b in range(a, len(L)):\n            for n in L[a:b+1]:\n                s+=n\n            if s>msum:\n                msum=s\n            s = 0\n    return msum"}, {"index": 117, "code": "def max_contig_sum(L):\n    maxSum = L[0]\n    for i in range(len(L)):\n        for j in range(i + 1, len(L) + 1):\n            if maxSum < sum(L[i:j]):\n                maxSum = sum(L[i:j])\n    return maxSum"}, {"index": 118, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    if len(L) == 1:\n        return L[0]\n    maxSum = L[0]\n    for x in range(len(L)):\n        item = L[x]\n        tempSum = item\n        if tempSum > maxSum:\n            maxSum = tempSum\n        for y in range(x+1, len(L)):\n            tempSum+=L[y]\n            if tempSum > maxSum:\n                maxSum = tempSum\n    return maxSum"}, {"index": 119, "code": "def max_contig_sum(L):\n\t\"\"\" L, a list of integers, at least one positive\n\tReturns the maximum sum of a contiguous subsequence in L \"\"\"\n\t\n\tmax_num = -1\n\tfor i in xrange(len(L)):\n\t\tfor j in xrange(len(L)-i+1):\n\t\t\tif sum(L[j:j+i]) > max_num:\n\t\t\t\tmax_num = sum(L[j:j+i])\n\t\t\t\t\n\treturn max_num"}, {"index": 120, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    maxSum = 0\n    for startIndex in xrange(len(L)):\n        for endIndex in xrange(startIndex+1, len(L)+1):\n            sum = 0\n            for val in L[startIndex : endIndex]:\n                sum += val\n            if sum > maxSum:\n                maxSum = sum\n    return maxSum"}, {"index": 121, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    partials = [sum(L[0:i]) for i in range(len(L) + 1)]\n    m = 'X'\n    for i in range(len(L) + 1):\n      for j in range(i + 1, len(L) + 1):\n        s = partials[j] - partials[i]\n        if m == 'X':\n          m = s\n        elif m < s:\n          m = s\n    return m"}, {"index": 122, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    maxsum = 0\n    for i in xrange(len(L)):\n        for j in xrange(i, len(L)):\n            this_sum = sum(L[i:j+1])\n            if this_sum > maxsum:\n                maxsum = this_sum\n    return maxsum\n"}, {"index": 123, "code": "def max_contig_sum(L):\n    maxSum = 0\n    if len(L) == 1:\n        return L[0]\n    for x in range(len(L)):\n        s = L[x]\n        for y in range(x+1,len(L)):\n            s += L[y]\n            if s > maxSum:\n                maxSum = s\n    return maxSum\n        \n"}, {"index": 124, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    total = sum(L)\n    currentmax = sum(L)\n    for i in xrange(len(L)):\n        listsum = L[i]\n        if listsum > currentmax:\n            currentmax = listsum   \n        for j in xrange(i+1,len(L)):\n            listsum += L[j]\n            if listsum > currentmax:\n                currentmax = listsum\n    return currentmax\n    \n    \n"}, {"index": 125, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    best=0\n    for i in range(len(L)+1):\n        for j in range(len(L)):\n            if i<j:\n                now=0\n                for k in range(i,j+1):\n                    now+=L[k]\n                if now>best:\n                    best=now\n    return best\n                    "}, {"index": 126, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    l = len(L)\n    max = L[0]\n    for i in range(1, len(L)+1):\n    \tj = l - i + 1\n    \tfor k in range(j):\n\t    \tnew_sum = sum(L[k: k+i])\n    \t\tif new_sum > max:\n    \t\t\tmax = new_sum\n    return max"}, {"index": 127, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    if len(L) == 1:\n        return L[0]\n    else:\n        runningSum = L[0]\n        maxRunningSum = runningSum\n        for i in range(1, len(L)):\n            runningSum += L[i]\n            if runningSum > maxRunningSum:\n                maxRunningSum = runningSum\n        return max(maxRunningSum, max_contig_sum(L[1:]))"}, {"index": 128, "code": "def max_contig_sum(L):\n\t\"\"\" L, a list of integers, at least one positive\n\tReturns the maximum sum of a contiguous subsequence in L \"\"\"\n\n\ts=len(L) #size of current subsequences\n\ti=0 #current start pos in sequence\n\tmaxS=0\n\ttmp=0\n\twhile s>0:\n\t\ti=0\n\t\twhile i<=len(L):\n\t\t\tj=i\n\t\t\ttmp=0\n\t\t\twhile j<s:\n\t\t\t\ttmp+=L[j]\n\t\t\t\tj+=1\n\t\t\tif tmp>maxS:\n\t\t\t\tmaxS=tmp\n\t\t\ti+=1\n\t\ts-=1\n\treturn maxS"}, {"index": 129, "code": "def max_contig_sum(L):\n\n\tsums = []\n\tlength = len(L)\n\t\n\tfor end in range(length):\n\t\tfor beg in range(end+1):\n\t\t\ttempsum = 0\n\t\t\tind = beg\n\t\t\t\n\t\t\twhile ind <= end:\n\t\t\t\ttempsum = tempsum + L[ind]\n\t\t\t\tind = ind + 1\n\t\t\t\n\t\t\t#print sums\n\t\t\tsums.append(tempsum)\n\t\t\t\n\tmaxsum = 0\n\tfor n in sums:\n\t\tif n > maxsum:\n\t\t\tmaxsum = n\n\t\n\treturn maxsum"}, {"index": 130, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    sum = 0\n    for i in L:\n        sum+=i\n    for j in range(len(L)):\n        for k in range(1, len(L)):\n            if max_contig_sum(L[j:k]) > sum:\n                sum = max_contig_sum(L[j:k])\n    return sum"}, {"index": 131, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max_sum = L[0]\n    for i in range(len(L)):\n        for j in range(i, len(L)+1):\n            if sum(L[i:j]) > max_sum:\n                max_sum = sum(L[i:j])\n    return max_sum"}, {"index": 132, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    curMax = 0\n    for i in range(len(L)):\n        curSum = 0 \n        for j in range(i, len(L)):\n            curSum += L[j]\n            if curMax < curSum:\n                curMax = curSum\n    return curMax"}, {"index": 133, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    maxi = max(L)\n    if len(L) == 2:\n        if L[0] + L[1] > maxi:\n            maxi = L[0] + L[1]\n    if len(L) == 3:\n        if L[0] + L[1] > maxi:\n            maxi = L[0] + L[1]\n        if L[1] + L[2] > maxi:\n            maxi = L[1] + L[2]\n        if L[0] + L[1] + L[2] > maxi:\n            maxi = L[0] + L[1] + L[2]\n    if len(L) == 4:\n        if L[0] + L[1] > maxi:\n            maxi = L[0] + L[1]\n        if L[1] + L[2] > maxi:\n            maxi = L[1] + L[2]\n        if L[2] + L[3] > maxi:\n            maxi = L[2] + L[3]\n        if L[0] + L[1] + L[2] > maxi:\n            maxi = L[0] + L[1] + L[2]\n        if L[3] + L[1] + L[2] > maxi:\n            maxi = L[3] + L[1] + L[2]\n        if L[0] + L[1] + L[2] + L[3] > maxi:\n            maxi = L[0] + L[1] + L[2] + L[3]\n    return maxi\n        \n"}, {"index": 134, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    total = 0\n    for i in range(0, len(L)):\n        if total < L[i]:\n                total = L[i]\n        for j in range(i + 1, len(L)):\n            minSum = L[i]\n            for k in range(i + 1, j + 1):\n                minSum += L[k]\n                if minSum > total:\n                    total = minSum\n    return total"}, {"index": 135, "code": "def max_contig_sum(L):\n    max_sum = 0\n    for start in range(len(L)-1):\n        for end in range(start+1, len(L)):\n            if sum(L[start:end]) > max_sum:\n                max_sum = sum(L[start:end])\n                if sum(L[start:-1])+L[-1] > max_sum:\n                    max_sum = sum(L[start:-1])+L[-1]\n    return max_sum"}, {"index": 136, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max_sum = L[0]\n    for i in range(len(L)):\n        for j in range(i, len(L)):\n            s = sum(L[i:j+1])\n            max_sum = max(max_sum, s)\n    return max_sum\n    "}, {"index": 137, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    maxsum = L[0]\n    for length in range(1, len(L)+1):   #length is the length of the contiguous list\n        for j in range(len(L)-length+1): #for each possible starting value that won't go beyond L\n            tempsum = 0\n            for k in range(length):    #finds the sum of this particular subsequence through iteration\n                tempsum += L[j + k]\n            if tempsum > maxsum:       #replaces the maximum sum with the subsequence's sum if it's higher than the previous maximum\n                maxsum = tempsum\n    return maxsum"}, {"index": 138, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max_sum = 0\n    for i in range(len(L)):\n        sum = 0\n        for j in range(i, len(L)):\n            sum += L[j]\n            if sum > max_sum:\n                 max_sum = sum\n    return max_sum"}, {"index": 139, "code": "def max_contig_sum(L):\n    maxSum = 0\n    for i in range(len(L)):\n        sum = 0\n        for j in range(i, len(L)):\n            sum += L[j]\n            if sum > maxSum:\n                maxSum = sum\n    return maxSum"}, {"index": 140, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    max_sum = -9128901279812347981347983742398347823698236982346982346982369\n    for sub_start in xrange(len(L)):\n    \tfor count in xrange(1,len(L)-sub_start+1):\n    \t\tcurr_sum = sum(L[sub_start:sub_start+count])\n    \t\tif curr_sum > max_sum:\n    \t\t\tmax_sum = curr_sum\n    \t\t\t#print L[sub_start:sub_start+count]\n    return max_sum"}, {"index": 141, "code": "# Paste your code here\ney"}, {"index": 142, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    biggest = 0\n    #table = []\n    #for i in range(len(L) + 1):\n    #    table.append([])\n    #for i in table:\n    #    for j in range(len(L) + 1):\n    #        i.append(0)\n    \n    for i in range(len(L) + 1):\n        for j in range(i, len(L) + 1):\n            current_sum = sum(L[i:j])\n            #table[i][j] = current_sum\n            if current_sum > biggest:\n                biggest = current_sum\n    #print table\n    return biggest"}, {"index": 143, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    ans = 0\n    for i in xrange(len(L)):\n        s = 0\n        for j in xrange(i, len(L)):\n            s += L[j]\n            ans = max(ans, s)\n    return ans\n\n"}, {"index": 144, "code": "def max_contig_sum(L):\n    max_sum = L[0]\n    for size in range(1,(len(L)+1)):\n        for index in range(0, (len(L)-size+1)):\n            temp_sum = sum(L[index:(index+size)])\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n    return max_sum"}, {"index": 145, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    sums=[]\n    for i in range(len(L)):\n    \ts = L[i]\n    \tif s not in sums:\n    \t\tsums.append(s)\n    \tfor k in range(i+1,len(L)):\n    \t\ts+=L[k]\n    \t\tif s not in sums:\n    \t\t\tsums.append(s)\n    return max(sums)"}, {"index": 146, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    #n items, new array will have k[0] be L[0] and k[n-1] be the sum\n\n    k = []\n    cur = 0\n    for i in range(len(L)):\n        cur = cur + L[i]\n        k.append(cur)\n    top = -1\n    for i in range(len(k)):\n        val = k[i]\n        top = max(top, val)\n        for b in range (i):\n            top = max(top, val - k[b])\n    return top\n"}, {"index": 147, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max_sum=0\n    for i in range(1,len(L)+1):\n        for a in range(len(L)+1-i):\n            temp_sum=0\n            for elt in range(a,a+i):\n                temp_sum+=L[elt]\n            if temp_sum > max_sum:\n                max_sum=temp_sum\n    return max_sum"}, {"index": 148, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    #make a list off all the sums and return the highest one\n    sumlist = []\n    lengthtocheck = 1\n    indicestocheck = [0]\n    indicetoappend = 0\n    reset = [0]\n    yescontinue = True\n    while yescontinue:\n        while len(L) not in indicestocheck:\n            total = 0\n            for i in indicestocheck:\n                    #add total of indices\n                    total += L[i]\n            sumlist.append(total)\n            for i in range(len(indicestocheck)):\n                indicestocheck[i] +=1\n            \n        indicetoappend += 1\n        #resets back to [0], [0,1],[0,1,2] etc.\n        indicestocheck = reset\n        #add a new index\n        if indicetoappend >= len(L):\n            yescontinue = False\n        else:\n            indicestocheck.append(indicetoappend)\n        reset = indicestocheck[:]\n    return max(sumlist)"}, {"index": 149, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    maxSum = 0\n    currSum = 0\n    for i in range(len(L)):\n        currSum = max(L[i], currSum + L[i])\n        maxSum = max(maxSum,currSum)\n    return maxSum\n"}, {"index": 150, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    maxSum = L[0]\n    for i in range(len(L)):\n        j = i + 1\n        while j <= len(L):\n            if sum(L[i:j]) > maxSum:\n                maxSum = sum(L[i:j])\n            j += 1\n    return maxSum"}, {"index": 151, "code": "def max_contig_sum(L):\n    maxVal = 0\n    for i in range(len(L)):\n        for j in L:\n            if (sum(L[j:j+i])> maxVal) and (j+i<=len(L)):\n                \n                maxVal = sum(L[j:j+i])\n\n    return maxVal\n"}, {"index": 152, "code": "def helper(L, max_sum):\n    while len(L) > 0:\n        sum1 = 0\n        for i in range(len(L)):\n            sum1 = sum1 + L[i]\n            if sum1 > max_sum:\n                max_sum = sum1\n        L = L[1:]\n        max_sum = helper(L, max_sum)\n    return max_sum\n\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max_sum = 0\n    max_sum = helper(L, max_sum)\n    return max_sum"}, {"index": 153, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    maximum = max(L)\n    for i in range(len(L)):\n        sums = L[i]\n        for j in range(i+1,len(L)):\n            sums += L[j]\n            if sums > maximum:\n                maximum = sums\n    return maximum"}, {"index": 154, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max = L[0]\n    i1 = 0\n    for l in L:\n        sum = 0\n        i2 = 0\n        for l in L:\n            if i2 >= i1:\n                sum += l\n                if sum > max:\n                    max = sum\n            i2 = i2 + 1\n        i1 = i1 + 1\n    return max\n"}, {"index": 155, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max = 0\n    for i in range(len(L)):\n        temp = L[i]\n        if temp >= max:\n            max = temp\n        for j in range(i+1, len(L)):\n            temp += L[j]\n            if temp > max:\n                max = temp\n    return max"}, {"index": 156, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    maxSum=L[0]\n    \n    for a in range(len(L)):\n        sum=0\n        for b in range(a,len(L)):\n            sum+=L[b]\n            if(sum>maxSum):maxSum=sum\n            \n    return maxSum   \n"}, {"index": 157, "code": "# Paste your code here\ndef max_contig_sum(L):\n\tmax_sum = max(L)\n\tmax_index = 0\n\tfor i in range(len(L)):\n\t\tif L[i] == max(L):\n\t\t\tmax_index = i\n\t\n\tfor j in xrange(max_index+1,len(L)):\n\t\tif L[j] > 0:\n\t\t\tmax_sum += L[j]\n\t\telif j+1<len(L):\n\t\t\tif abs(L[j+1])>abs((L[j])) and L[j+1]>0:\n\t\t\t\tmax_sum = max_sum + L[j+1] + L[j]\n\t\telse:\n\t\t\tbreak\n\n\tfor j in xrange(max_index-1,-1,-1):\n\t\tif L[j] > 0:\n\t\t\tmax_sum += L[j]\n\t\telif j-1>=0:\n\t\t\tif abs(L[j-1])>abs((L[j])) and L[j-1]>0:\n\t\t\t\tmax_sum = max_sum + L[j-1] + L[j]\n\t\telse:\n\t\t\tbreak\n\n\treturn max_sum"}, {"index": 158, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    length = 1\n    max_sum = 0\n    while length <= len(L):\n        for i in range(0, len(L) + 1 - length):\n            sum = 0\n            for x in range(0, length):\n                sum += L[x + i]\n            if sum > max_sum:\n                max_sum = sum\n        length += 1\n\n    return max_sum"}, {"index": 159, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    maxSum = -float('inf')\n    for i in xrange(len(L)):\n        curSum = 0\n        for j in xrange(i, len(L)):\n            curSum += L[j]\n            if curSum > maxSum:\n                maxSum = curSum\n    return maxSum"}, {"index": 160, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    maxSum = None\n    for i in xrange(len(L)):\n        for j in xrange(i+1, len(L)+1):\n            if sum(L[i:j]) > maxSum:\n                maxSum = sum(L[i:j])\n    return maxSum\n"}, {"index": 161, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    sums_so_far = []\n    total = 0\n    for num in L:\n        if total + num > 0:\n            total += num\n        else:\n            total = 0\n        sums_so_far.append(total)\n    return max(sums_so_far)"}, {"index": 162, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n\n    sums = []\n    highestS = 0\n    #find all possible sums increasing in length of lists\n\n    #for every length of list\n    for i in range(len(L)):\n        testLen=i\n        #for every sub list\n        for j in range(len(L)):\n            subList=L[j:j+testLen]\n            tot = 0\n            #sum up subLists\n            for thing in subList:\n                tot+=thing\n            sums.append(tot)\n\n    #print (sums)\n\n    for s in sums:\n        if s > highestS:\n            highestS = s\n\n    return highestS\n"}, {"index": 163, "code": "def max_contig_sum(L):\n  ret = 0\n  for i in range(len(L)):\n    for j in range(i, len(L)):\n      cur = 0\n      for k in range(i, j + 1):\n        cur += L[k]\n      if cur > ret:\n        ret = cur\n  return ret\n"}, {"index": 164, "code": "def max_contig_sum(L):\n  result = float('-inf')\n  for i in range(len(L)):\n    for j in range(i + 1, len(L) + 1):\n      result = max(result, sum(L[i:j]))\n  return result"}, {"index": 165, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    maxSum = 0\n    n = len(L)\n    for i in range(n):\n        for j in range(i, n):\n            curSum = 0\n            for k in range(i, j+1):\n               curSum += L[k]\n            if curSum > maxSum:\n                maxSum = curSum\n    return maxSum"}, {"index": 166, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    max_sum = 0\n    for i in range(len(L)):\n    \tfor j in range(i+1, len(L)+1):\n    \t\tif sum(L[i:j]) > max_sum:\n    \t\t\tmax_sum = sum(L[i:j])\n\n    return max_sum\n\n"}, {"index": 167, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    highest = 0\n    for x in range(len(L)):\n        for y in range(len(L)-x):\n            z = sum(L[x:y])\n            if z > highest:\n                highest = z\n    return z"}, {"index": 168, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    maxS = 0\n    for n in range(1, len(L)):\n        for start in range(0, len(L)-n+1):\n            s = 0\n            for x in L[start:start+n]:\n                s += x\n            if s > maxS:\n                maxS = s\n    return maxS"}, {"index": 169, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #assuming L is type list and not empty, since it says that L has at least one positive. Otherwise, add 'assert L != [] and assert type(L) == list' \n    list1 = []\n    list2 = []\n    for i in range(len(L)):\n        for j in range(i,len(L)):\n            list1.append(L[i:j+1])\n    \n    for i in list1:\n        total = 0\n        for j in i:\n            total += j\n        list2.append(total)\n    \n    return max(list2)"}, {"index": 170, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    msum = 0\n\n    for start in range(len(L)): # for every possible starting index\n        for end in range(start, len(L)): #and every possible ending index\n            csum = sum(L[start:end+1])\n            if (csum > msum):\n                msum = csum\n\n    return msum"}, {"index": 171, "code": "def max_contig_sum(L):\n\n    maxim = 0\n    for i in range(0, len(L)):\n        sub_sum=0\n        for j in range(i,len(L)):\n            sub_sum+=L[j]\n            if sub_sum>maxim:\n                maxim = sub_sum\n    return maxim"}, {"index": 172, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    size = 1\n    maxsum = L[0]\n\n    for gap in range(1, len(L)):\n        end = gap\n        for start in range(0, len(L)):\n            if end <= len(L):\n                while end <= len(L):\n                    if maxsum < sum(L[start:end]):\n                        maxsum = sum(L[start:end])\n                    start += 1\n                    end += 1\n\n    return maxsum"}, {"index": 173, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    best = L[0]\n    for i in range(len(L)):\n    \tsum = 0\n    \tfor j in range(i, len(L)):\n    \t\tsum += L[j]\n    \t\tif sum > best:\n    \t\t\tbest = sum\n    return best\n"}, {"index": 174, "code": "def max_contig_sum(L):\n    apple = []\n\n    n = 0\n    i=1\n    while n<=len(L)-1:\n        apple.append(L[n])\n        while i <= len(L)-1:\n            apple.append(sum(L[n:i]))\n                             \n    return max(apple)"}, {"index": 175, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n\n    sumSets = []\n    sums = []\n\n    if(len(L) == 0):\n        for set in sumSets:\n            sum = 0\n            for number in set:\n                sum += number\n\n            sums.append(sum)\n\n        maxSum = 0\n        for sum in sums:\n            if sum > maxSum:\n                maxSum = sum\n\n        return maxSum\n\n    smaller = max_contig_sum(L[:-1])\n    extra = L[-1:]\n    new = []\n\n    for small in smaller:\n        new.append(small+extra)\n\n    sumSets = smaller+new"}, {"index": 176, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    sums = []\n    length = len(L)\n    for i in range(length):\n        if L[i] > 0:\n            s = L[i]\n            sums.append(s)\n            for j in range(i+1, length):\n                s += L[j]\n                sums.append(s)\n    return max(sums)\n"}, {"index": 177, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    l = []\n    for i in range(0,len(L)+1):\n        for j in range(0,len(L)-i+1):\n            sum = 0\n            for k in range(i):\n                sum += L[j+k]\n                l.append(sum) \n    l.sort()    \n    return l[-1]"}, {"index": 178, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    add = L[0]\n    max = add\n    for i in range(len(L)):\n        for j in range(len(L)-i):\n            cand = L[i:i+j+1]\n            add = sum(cand)\n            if add > max:\n                max = add\n                max_cand = cand\n    return max_cand"}, {"index": 179, "code": "def max_contig_sum(L):\n\tdef sumList(L):\n\t\ttotal = 0\n\t\tfor item in L:\n\t\t\ttotal += item\n\t\treturn total\n\n\tdef windowSum(L, maximum, window):\n\t\tif window == 0:\n\t\t\treturn maximum\n\t\tfor i in range(0, len(L)-window+1):\n\t\t\tcontigSum = sumList(L[i:i+window])\n\t\t\tif contigSum > maximum:\n\t\t\t\tmaximum = contigSum\n\t\treturn windowSum(L, maximum, window-1)\n\n\tmaximum = 0\n\twindow = len(L)\n\n\treturn windowSum(L, maximum, window)\n"}, {"index": 180, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max_sum = min(L)\n    for i in xrange(len(L)):\n    \tfor j in xrange(i+1, len(L)+1):\n    \t\tif sum(L[i:j]) > max_sum:\n    \t\t\tmax_sum = sum(L[i:j])\n    return max_sum"}, {"index": 181, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    max_sum = 0\n    for i in range(len(L)):\n    \tfor j in range(i, len(L)):\n    \t\tif sum(L[i:j+1]) > max_sum:\n    \t\t\tmax_sum = sum(L[i:j+1])\n    return max_sum"}, {"index": 182, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max_sum = 0\n    # 6.006 forgive me\n    # I think this is O(n) time with DP\n    for i in range(len(L)):\n      for j in range(len(L)):\n        if i >= j:\n          if sum(L[j:(i + 1)]) > max_sum:\n            max_sum = sum(L[j:(i + 1)])\n    return max_sum"}, {"index": 183, "code": "def max_contig_sum(L):\n        def contig_sum(L,k):\n                maxs = 0\n                for i in range(0,len(L)-k+1):\n                        if sum(L[i:i+k]) > maxs:\n                                maxs = sum(L[i:i+k])\n                return maxs\n        solution = 0\n        for i in range(0,len(L)+1):\n                if contig_sum(L,i) > solution:\n                        solution = contig_sum(L,i)\n        return solution"}, {"index": 184, "code": "def max_contig_sum(L):\n    \"\"\"\n    L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L\n    \"\"\"\n    # CONDENSE LIST INTO ALTERNATING SUMS\n    i = 0\n    while i < len(L) - 1:\n        if L[i] * L[i + 1] >= 0: # same sign\n            L[i] += L.pop(i + 1)\n        i += 1\n\n    # TRIM ENDS\n    if L[0] < 0: # ensure that first element is positive\n        L.pop(0)\n    if L[len(L) - 1] < 0: # ensure that last element is positive\n        L.pop(len(L) - 1)\n\n    if len(L) == 1: # only one element remaining (must be positive)\n        return L[0]\n\n    not_simplified = True\n    while not_simplified: # if a change is made to the list, loop is run again\n        not_simplified = False # reset not_simplified value\n\n        i = 0\n        while i < len(L) - 2:\n            # Check if for any triplet, the middle number is absolute-value-wise\n            # smaller than both of the surrounding numbers. If so, combine them.\n            if(abs(L[i]) >= abs(L[i+1]) and abs(L[i+2]) >= abs(L[i+1])):\n                L[i] += L[i+1] + L[i+2]\n                L.pop(i+2)\n                L.pop(i+1)\n                not_simplified = True\n            else:\n                i += 1\n\n    # Find maximum number in series\n    max = 0\n    for i in L:\n        if i > max:\n            max = i\n    return max"}, {"index": 185, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    sums = []\n    for a in xrange(len(L)):\n        for b in xrange(a, len(L)):\n            sums.append(sum(L[a:b + 1]))\n    return max(sums)"}, {"index": 186, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    s = 0\n    for i in range(len(L)):\n        for j in range(i+1, len(L)+1):\n            if sum(L[i:j]) > s:\n                s = sum(L[i:j])\n    return s"}, {"index": 187, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    max_sum = 0\n    for i in range(0,len(L)):\n        for j in range(i, len(L)):\n            s = sum(L[i:j+1])\n            if s > max_sum:\n                max_sum = s\n    return max_sum"}, {"index": 188, "code": "def max_contig_sum(L):\n\tsums = []\n\tfor i in range(len(L)):\n\t\tc = len(L)\n\t\twhile c > i:\n\t\t\tn = i\n\t\t\ts = 0\n\t\t\twhile n < c:\n\t\t\t\ts += L[n]\n\t\t\t\tn += 1\n\t\t\tc -= 1\n\t\t\tsums.append(s)\n\tm = sums[0]\n\tfor i in range(1, len(sums)):\n\t\tif sums[i] > m:\n\t\t\tm = sums[i]\n\treturn m"}, {"index": 189, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max_sum = 0\n    list_of_contigs = []\n    for x in range(len(L)):\n        list_of_contigs.append([L[x]])\n        list_of_contigs.append(L[x:])\n        list_of_contigs.append(L[:x])\n\n\n    for x in range(len(list_of_contigs)):\n        if(sum(list_of_contigs[x])>max_sum):\n            max_sum = sum(list_of_contigs[x])\n\n    return max_sum"}, {"index": 190, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    # must have at least one positive\n    hasPositive = False\n    for i in xrange(0, len(L)):\n        if L[i] > 0:\n            hasPositive = True\n            break\n    assert hasPositive\n\n    def takeSum(L):\n        theSum = 0\n        for i in xrange(0, len(L)):\n            theSum += L[i]\n        return theSum\n\n    maxSum = 0\n    for low in xrange(0, len(L)):\n        for high in xrange(low + 1, len(L) + 1):  # exclusive\n            subL = L[low:high]\n            s = takeSum(subL)\n            if s > maxSum:\n                maxSum = s\n    return maxSum\n"}, {"index": 191, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    # We can do this rather than, ie, Number.MIN_INT or whatever because\n    # we're guaranteed to have at least one positive integer\n    best = 0\n\n    for i in xrange(len(L)):\n        runningSum = 0\n        for j in xrange(i, len(L)):\n            runningSum += L[j]\n            if runningSum > best:\n                best = runningSum\n\n    return best"}, {"index": 192, "code": "def max_contig_sum(L):\n    result = L[0]\n    for i in range(len(L)):\n        for j in range(i, len(L)):\n            result = max(result, sum(L[i:j+1]))\n    return result"}, {"index": 193, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    c = [0]\n    for x in L:\n        c.append(c[-1] + x)\n    max_sum = 0\n    min_c = 0\n    for x in c:\n        min_c = min(min_c, x)\n        max_sum = max(max_sum, x - min_c)\n    return max_sum"}, {"index": 194, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    best = 0\n    bestnow = 0\n    n = len(L)\n    for i in range(n):\n        bestnow += L[i]\n        if bestnow < 0:\n            bestnow = 0\n        if best < bestnow:\n            best = bestnow\n    return best\n"}, {"index": 195, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    return max(sum(L[j:i]) for i in range(1, len(L)+1) for j in range(i))"}, {"index": 196, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    m=L[0]\n    for i in xrange(len(L)):\n        thissum=0\n        for j in xrange(i,len(L)):\n            thissum+=L[j]\n            if thissum>m:\n                m=thissum\n    return m"}, {"index": 197, "code": "def max_contig_sum(L):\n    curr_max = 0\n    for i in range(len(L)):\n        for j in range(i, len(L)):\n            temp = sum(L[i:j+1])\n            if temp > curr_max:\n                curr_max = temp\n    return curr_max"}, {"index": 198, "code": "# Paste your code here\ndef max_contig_sum(L):\n    if len(L) == 0:\n        return 0;\n    largestSum = L[0];\n    for i in range(0, len(L)):\n        sum = L[i];\n        for j in range(i+1, len(L)):\n            sum += L[j];\n            if sum > largestSum:\n                largestSum = sum;\n    return largestSum;"}, {"index": 199, "code": "def enumerate_subsequences(L):\n    \"\"\" L, a list of integers with at least one element\n    Yields each possible subsequence of any nonzero length, except for L\n    \"\"\"\n    for i in range(0, len(L)):\n        for j in range(i, len(L)):\n            out = L[i:j + 1]\n            if out != L:\n                yield out\n\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    return max(map(sum, enumerate_subsequences(L)))"}, {"index": 200, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    smallestNum = L[0]\n    for each in L:\n        if each < smallestNum:\n            smallestNum = each\n\n    L.remove(smallestNum)\n    \n    maxSum = 0\n    i = 0\n    while i < (len(L)-1):\n        tempSum = 0\n        for each in L[i:]:\n            tempSum += each\n        if tempSum > maxSum:\n            maxSum = tempSum\n\n    return maxSum\n    \n    "}, {"index": 201, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max_sum = -100000\n    for seq_length in xrange(1, len(L)+1):\n    \tfor start in xrange(len(L) + 1 -seq_length):\n    \t\tcurr = sum(L[start:start+seq_length])\n    \t\tif curr > max_sum:\n    \t\t\tmax_sum = curr\n    return max_sum\n"}, {"index": 202, "code": "# Paste your code here\n\ndef max_contig_sum(L):\n    subseq = []\n    max = 0\n    for i in range(1, len(L)+1):\n        for j in range(len(L) - i + 1):\n            subseq.append(L[j:i])\n    for x in subseq:\n        if sum(x) > max:\n            max = sum(x)\n    return max"}, {"index": 203, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    max_sum = 0\n    for i, x in enumerate(L):\n        temp_sum = 0\n        for y in L[i:]:\n            temp_sum += y\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n    return max_sum"}, {"index": 204, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    result = []\n    for i in range(len(L)):\n        result.append(L[i])\n        sumi = L[i]\n        for j in range(i + 1, len(L)):\n            sumi += L[j] \n            result.append(sumi)\n    return max(result)"}, {"index": 205, "code": "# Paste your code here\ndef max_contig_sum(L):\n\tall_sums = []\n\tfor n in range(len(L)):\n\t\tpos = n\n\t\tto_add = L[n]\n\t\tall_sums.append(to_add)\n\t\twhile pos < len(L)-1:\n\t\t\tpos += 1\n\t\t\tto_add += L[pos]\n\t\t\tall_sums.append(to_add)\n\tmaxim = 0\n\tfor item in all_sums:\n\t\tif item > maxim:\n\t\t\tmaxim = item\n\t\telse:\n\t\t\tpass\n\treturn maxim"}, {"index": 206, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n\n    positionInList = 0\n    maxSum = 0\n\n    while positionInList < len(L):\n        endingIndex = positionInList\n        newSum = 0\n        while endingIndex < len(L):\n            newSum += L[endingIndex]\n            if newSum > maxSum:\n                maxSum = newSum\n            endingIndex += 1\n        positionInList += 1\n\n    return maxSum"}, {"index": 207, "code": "def max_contig_sum(L):\n    maxsum = 0\n    for low in range(len(L)):\n        for high in range(low + 1, len(L)+1):\n            s = sum(L[low:high])\n            if s > maxsum:\n                maxsum = s\n    return maxsum"}, {"index": 208, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    highest = 0\n    current = 0\n    for x in L:\n        if current+x>highest:\n            current+=x\n            highest = current\n        elif current+x<0:\n            current = 0\n        else:\n            current+=x\n            \n\n    return highest\n"}, {"index": 209, "code": "def max_contig_sum(L):\n    n = len(L) \n    endingHere = 0\n    maxSoFar = 0\n    for i in range (0, n): # 1..n-1\n        endingHere = max(endingHere + L[i], 0)\n        maxSoFar = max(maxSoFar, endingHere)\n    return maxSoFar"}, {"index": 210, "code": "def max_contig_sum(L):\n    highest = L[0]\n    for pos in range(len(L)):\n        tempPos = pos\n        total = 0\n        while tempPos<len(L):\n            total = total + L[tempPos]\n            if total>highest:\n                highest =total\n            tempPos=tempPos+1\n    return highest\n"}, {"index": 211, "code": "def max_contig_sum(L):\n    max_sum = 0\n    for length in xrange(len(L)):\n        for i in xrange(len(L)):\n            j = i+length\n            if j > len(L):\n                next\n            sum = 0\n            for elem in L[i:j]:\n                sum = sum + elem\n            if sum > max_sum:\n                max_sum = sum\n    return max_sum"}, {"index": 212, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    ##writes a function to find the indices of the positive numbers since the sum has to start and end with a positive number\n    def posFind(L):\n        lis = []\n        for i in range(len(L)):\n            if L[i]>0:\n                lis.append(i)\n        return lis\n\n    posInd = posFind(L)\n    if(len(posInd) == 1):\n        return L[posInd[0]]\n    elif(len(posInd) == len(L)):\n        return sum(L)\n    else:\n        maxx = L[posInd[0]]\n        for i in posInd:\n            for j in posInd:\n                summ = sum(L[i:j+1])\n                if summ > maxx:\n                    maxx = summ\n        return maxx"}, {"index": 213, "code": "# Paste your code here\ndef max_contig_sum(L):\n    maxsum = -2**30\n    besti = 1\n    bestj = 0\n    for i in range(1,len(L)+1,1):\n        for j in range(len(L)-i+1):\n            if sum(L[j:j+i]) > maxsum:\n                maxsum = sum(L[j:j+i])\n                besti = i\n                bestj = j\n\n    return sum(L[bestj:bestj+besti])"}, {"index": 214, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max_sum = 0\n    for i in range(1, len(L)+1):\n        for j in range(0, len(L) - i + 1):\n            sum = 0\n            for k in range(i):\n                sum += L[j + k]\n            if sum > max_sum:\n                max_sum = sum\n    return max_sum"}, {"index": 215, "code": "def max_contig_sum(L):\n    maxSum = -9999999999\n    for i in range(len(L)):\n        for j in range(len(L)):\n            if(j > i):\n                subL = subList(L, i, j)\n                if(sum(subL) > maxSum):\n                    maxSum = sum(subL)\n    return maxSum\n                \n\"\"\"sums numbers from index to index\"\"\"\ndef subList(L, start, end):\n    newL = []\n    for i in range(start, end + 1):\n        newL.append(L[i])\n    return newL"}, {"index": 216, "code": "def max_row(L, max_sum):\n    if L == []:\n        return max_sum\n    else:\n        tmp = sum(L)\n        if tmp > max_sum:\n            max_sum = tmp\n\n        return max_row(L[1:], max_sum)    \n\ndef max_contig_sum2(L):\n    max_sum = max_row(L, sum(L))\n\n    for i in range(len(L)):\n        tmp = max_row(L[i:], sum(L[i:]))\n        if tmp > max_sum:\n            max_sum = tmp\n        \n    return max_sum\n\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    return max(max_contig_sum2(L), max_contig_sum2(list(reversed(L))))"}, {"index": 217, "code": "# Paste your code here\nwow"}, {"index": 218, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    a=0\n    b=1\n    c=0\n    for d in range(len(L)):\n        for e in range(d,len(L)):\n            f=sum(L[d:e+1])\n            if f>c:\n                a=d\n                b=e\n                c=f\n    return c"}, {"index": 219, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    maxsum = 0\n    for i in range(len(L) - 1):\n        thissum = 0\n        for j in range(i, len(L)):\n            thissum += L[j]\n            if thissum > maxsum:\n                maxsum = thissum\n    return maxsum\n"}, {"index": 220, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    msum = L[0]\n    for i in range(len(L)):\n        for j in range(i,len(L)+1):\n            tot=sum(L[i:j])\n            if tot>msum:\n                msum=tot\n    return msum"}, {"index": 221, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    \n    maxlen = len(L)\n    mymax = 0 #variable to hold maximum sum\n    \n    for i in range(1, maxlen + 1): #loop for length of sums\n        num = maxlen + 1 - i #number of possible sums\n        for j in range(0, num):\n            tempmax = 0\n            for k in range(j, i + j): #range over which we add numbers to produce contiguous sums\n                temp = L[k]\n                tempmax = tempmax + temp #sum for current iteration\n            \n            if tempmax > mymax: #update overall maximum if new maximum is found\n                mymax = tempmax\n    \n    return mymax"}, {"index": 222, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    possible_sums = []\n    for contig_len in range(1, len(L)+1):\n        start_idx = 0\n        while start_idx+contig_len < len(L)+1:\n            temp_sum = 0\n            for i in range(start_idx, start_idx+contig_len):\n                temp_sum += L[i]\n            possible_sums.append(temp_sum)\n            start_idx += 1\n    return max(possible_sums)"}, {"index": 223, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    assert len(L) > 0, 'empty list'\n    if len(L) == 1:\n        return L[0]\n    sums = []\n    for i in range(len(L)):\n        current = L[i]\n        sums.append(current)\n        for j in range(i+1, len(L)):\n            current += L[j]\n            sums.append(current)\n    return max(sums)"}, {"index": 224, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    # The naive algorithm is O(n^3), this one is O(n^2).\n    # You can probably get it down to O(n) with some clever dp but I'm lazy.\n    partial_sums = [0]\n    for x in L:\n        partial_sums.append(partial_sums[-1] + x)\n\n    res = max(y - x for i, x in enumerate(partial_sums) for y in partial_sums[i:])\n    # print L, res\n    return res"}, {"index": 225, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    max = 0\n\n    def smallmaxsum(L,max):\n        sum = 0\n        for elem in L:\n            sum +=elem\n        if sum > max:\n            max = sum\n        if len(L)==1:\n            return max\n        else:\n            return smallmaxsum(L[1:],max)\n\n    return smallmaxsum(L,max)"}, {"index": 226, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max = -99999999999\n    for left in range(len(L)):\n        for right in range(left+1,len(L)+1):\n            sum = 0\n            for index in range(left,right):\n                sum += L[index]\n            if sum > max:\n                max = sum\n    return max"}, {"index": 227, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    k = len(L)\n    max = 0\n    temp = 0\n    for i in range(0,k):\n        for j in range(i,k+1):\n            for count in range(i,j):\n                temp = temp + L[count]\n            if (max < temp):\n                max = temp\n            temp = 0\n    return max"}, {"index": 228, "code": "def max_contig_sum(L):\n    maxer = 0\n    for i in range(len(L)):\n        currval = 0\n        for j in range(len(L) - i):\n            currval += L[i + j]\n            if currval > maxer:\n                maxer = currval\n    return maxer"}, {"index": 229, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    \n    msum = L[0]\n\n    for i in range(len(L)):\n        for j in range((i + 1), (len(L) + 1)):\n            s = sum(L[i:j])\n            if s > msum:\n                msum = s\n\n    return msum"}, {"index": 230, "code": "def max_contig_sum(L):\n    m = 0\n\n    for a in xrange(1, len(L)+1):\n        for b in xrange(len(L)):\n            if sum(L[b:b+a]) > m:\n                m = sum(L[b:b+a])\n\n    return m"}, {"index": 231, "code": "def max_contig_sum(L):\n\tmax_sum = 0\n\tfor i in range(len(L)+1):\n\t\tfor j in range(i):\n\t\t\tx = sum(L[j:i])\n\t\t\tif x > max_sum:\n\t\t\t\tmax_sum = x\n\treturn max_sum"}, {"index": 232, "code": "def max_contig_sum(L):\n    max_sum = L[0]\n    for s in xrange(0, len(L)):\n        for f in xrange(s + 1, len(L) + 1):\n            new_sum = sum(L[s:f])\n            max_sum = max(new_sum, max_sum)\n    return max_sum"}, {"index": 233, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n\n    maxSum=L[0]\n    for i in range(len(L)+1):\n        for j in range(len(L)-i+1):\n            currentSum=0\n            for k in range(i):\n                currentSum+=L[j+k]\n            if currentSum>maxSum:\n                maxSum=currentSum\n\n    return maxSum"}, {"index": 234, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    sums = []\n    for x in range(len(L)):\n        for p in range(len(L[x:])):\n            sum = L[x]\n            while ( p > 0):\n                sum += L[x+p]\n                p -= 1\n            sums.append(sum)\n\n    return max(sums)"}, {"index": 235, "code": "def max_contig_sum(L):\n    maxc = 0\n    cv = 0\n    x = 0\n    for a in L:\n        cv = a\n        for b in range(x + 1, len(L)):\n            cv += l[b]\n            if cv > maxv:\n                maxv = cv\n        x += 1\n    return maxv\n"}, {"index": 236, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max_sum = 0\n    for c_len in range(1, len(L)):\n        for start_i in range(0, len(L)):\n            if max_sum < sum( L[start_i:start_i+c_len] ):\n                max_sum = sum( L[start_i:start_i+c_len] )\n    return max_sum"}, {"index": 237, "code": "# Paste your code here\ndef max_contig_sum(L):\n    maxSum = 0\n    for i in range(len(L)+1):\n        for j in range(i+1, len(L)+1):\n            temp = L[i:j]\n            tempSum = sum(temp)\n            if tempSum > maxSum:\n                maxSum = tempSum\n    return maxSum"}, {"index": 238, "code": "# Paste your code here\ndef max_contig_sum(L):\n    if len(L) == 0:\n        return 0;\n    largestSum = L[0];\n    for i in range(0, len(L)):\n        sum = L[i];\n        for j in range(i+1, len(L)):\n            sum += L[j];\n            if sum > largestSum:\n                largestSum = sum;\n    return largestSum;"}, {"index": 239, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    l = len(L)\n    sum = 0\n    for size in range(1, l+1):\n        for i in range(l+1-size):\n            new_sum = 0\n            for j in range(i, i+size):\n                new_sum += L[j]\n            if new_sum > sum:\n                sum = new_sum\n    return sum"}, {"index": 240, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n\n    high=0;\n    for a in range(len(L)):\n        for b in range(len(L)-a):\n            summ=sum(L[a:b+a+1]);#print \"L:\",L[a:b+a+1]\n            if summ>high: high=summ; #print \"high\",high \n        \n    return high"}, {"index": 241, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    maxa = 0\n    for i in range(len(L)):\n        temp = 0\n        for j in range(i,len(L)):\n            temp+=L[j]\n            if (temp>maxa):\n                maxa = temp\n    return maxa"}, {"index": 242, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    start = 0\n    end = 1\n    max_sum = 0\n    for start in range(len(L)):\n        for end in range(start + 1, len(L) + 1):\n            s = sum(L[start:end])\n            if s > max_sum:\n                max_sum = s\n    return max_sum\n\n# Alternative dp solution (possible bugs frighten me though)\n# def max_contig_sum(L):\n#     \"\"\" L, a list of integers, at least one positive\n#     Returns the maximum sum of a contiguous subsequence in L \"\"\"\n#     end_sums = [n for n in L]\n#     for i, n in enumerate(L[1:]):\n#         i = i+1\n#         end_sums[i] = n\n#         cont_sum = end_sums[i - 1] + n\n#         if cont_sum > n:\n#             end_sums[i] = cont_sum\n#     return max(end_sums)\n"}, {"index": 243, "code": "def get_sublists(L,n):\n    sublists = []\n    for i in range(len(L)-n+1):\n        sublists.append( L[i:i+n])\n    return sublists\n\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    highest = max(L)\n    for x in range(len(L)+1):\n        sublists = get_sublists(L,x)\n        for sub in sublists:\n            if sum(sub) > highest:\n                highest = sum(sub)\n    return highest"}, {"index": 244, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    largest_sum = 0\n    for i in range(len(L)):\n        for k in range(len(L)):\n            remaining_elt_sum = 0\n            for j in range(i+1,len(L)-k):\n                remaining_elt_sum += L[j]\n            if L[i] + remaining_elt_sum > largest_sum:\n                largest_sum = L[i] + remaining_elt_sum\n    return largest_sum"}, {"index": 245, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    max_sum = 0\n    for start in range(len(L)):\n        for end in range(start, len(L) + 1):\n            new_sum = sum(L[start:end])\n            if new_sum > max_sum:\n                max_sum = new_sum\n    return max_sum\n"}, {"index": 246, "code": "# Paste your code here\ndef max_contig_sum(L):\n    max_sum = 0\n    for i in range(0, len(L)):\n        sum = 0\n        temp_sum = 0\n        for j in range(i, len(L)):\n            temp_sum += L[j]\n            if temp_sum > sum:\n                sum = temp_sum\n        if sum > max_sum:\n            max_sum = sum\n\n    return max_sum"}, {"index": 247, "code": "def max_contig_sum(L):\n    max = 0\n    for i in range(0,len(L)+1):\n        sum = 0\n        for e in range(i,len(L)+1):\n            sum = 0\n            for j in L[i:e]:\n                sum+=j\n                if sum > max:\n                    max = sum\n    return max"}, {"index": 248, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    # Although there might be a more ingenious solution, brute force is easy\n    # to write\n\n    #This should not throw an error, because we are given that at least\n    #one of the numbers is positive\n    maxSum = L[0]\n    for eachStartIndex in range(len(L)):\n        for eachLength in range(1,len(L)-eachStartIndex + 1):\n            currSum = sum(L[eachStartIndex:eachStartIndex+eachLength])\n            if currSum > maxSum:\n                maxSum = currSum\n    return maxSum\n"}, {"index": 249, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    ans=0\n    k=len(L)\n    for i in range(k):\n        sum=0\n        for j in range(i,-1,-1):\n            sum+=L[j]\n            if sum>ans:\n                ans=sum\n    return ans"}, {"index": 250, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    tot = 0\n    now = 0\n    for i in range(len(L)):\n        now = 0\n        for j in range(i, len(L)):\n            now += L[j]\n            if (now > tot):\n                tot = now\n    return tot"}, {"index": 251, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    if len(L) == 0:\n        return None\n    ans = L[0]\n    for nL in range(2,len(L)+1):\n        start = 0\n        ind = start\n        while start < len(L) and start+nL <= len(L):\n            sum1 = 0\n            while ind < start+nL and ind < len(L):\n                sum1 += L[ind]\n                ind += 1\n            if ans < sum1:\n                ans = sum1\n            start += 1\n            ind = start\n    return ans"}, {"index": 252, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    highestSum = 0\n    for i in range(1,len(L)+1):\n        for j in range(0,len(L)-i+1):\n            currentSum = sum(L[j:j+i])\n            if currentSum > highestSum:\n                highestSum = currentSum\n    return highestSum"}, {"index": 253, "code": "# Paste your code here\ndef max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    maxSum = 0\n    for i in range(len(L)):\n        for j in range(i,len(L)+1):\n            newSum = sum(L[i:j])\n            if (newSum > maxSum):\n                maxSum = newSum\n    return maxSum"}, {"index": 254, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n\n    sum = L[0]\n\n    for cutLen in range (1, len(L)):\n        for i in range (0, len(L)-cutLen+1):\n            cutSum = 0\n            for j in range (i, i+cutLen):\n                cutSum = cutSum + L[j]\n            if(cutSum>sum):\n                sum = cutSum\n    return sum"}, {"index": 255, "code": "def max_contig_sum(L):\n    ma = len(L)\n    maxSum = L[0]\n    for siz in range(1,ma+1):\n        for i in range(ma-siz+1):\n            maxSum = max(maxSum,sum(L[i:i+siz]))\n    return maxSum"}, {"index": 256, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    dp = [0]*len(L)\n    for i,val in enumerate(L):\n        if i == 0:\n            dp[i] = val\n            continue\n        if dp[i-1] + val > val:\n            dp[i] = dp[i-1] + val\n        else: dp[i] = val\n    return max(dp)\n\n"}, {"index": 257, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    sums = []\n    for i in xrange(len(L)):\n        runningsum = L[i]\n        sums.append(runningsum)\n        for j in xrange(i + 1, len(L)):\n            runningsum += L[j]\n            sums.append(runningsum)\n    return max(sums)\n"}, {"index": 258, "code": "def max_contig_sum(L):\n\t\"\"\" L, a list of integers, at least one positive\n\tReturns the maximum sum of a contiguous subsequence in L \"\"\"\n\t\n\tmax_num = -1\n\tfor i in xrange(len(L)):\n\t\tfor j in xrange(len(L)-i+1):\n\t\t\tif sum(L[j:j+i]) > max_num:\n\t\t\t\tmax_num = sum(L[j:j+i])\n\t\t\t\t\n\treturn max_num"}, {"index": 259, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    \n    maxSum = 0\n    endInd = len(L)-1\n    \n    for item in L:\n        if item > maxSum:\n            maxSum = item\n\n    for ind in range(len(L)):\n        bigSum = L[ind]\n\n        for i in range(ind+1,endInd+1):\n            bigSum += L[i]\n            if bigSum > maxSum:\n                maxSum = bigSum       \n\n    return maxSum\n"}, {"index": 260, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    max_sum = 0\n\n    for i in range(0, len(L)+1):\n        for j in range(i, len(L)+1):\n            total = 0\n            for x in L[i:j]:\n                total += x\n\n            # print L[i:j], total\n\n            if max_sum < total:\n                max_sum = total\n\n    return max_sum"}, {"index": 261, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n        max_sum = 0\n        summation = 0\n    if(len(L) > 1):\n        \n        \n        new_sub1 = L[1:]\n        new_sub2 = L[:-1]\n        \n        for e in new_sub1:\n            summation += e\n        if(summation >= max_sum):\n            max_sum = summation\n        summation = 0\n        for e in new_sub2:\n            summation += e\n        if(summation >= max_sum):\n            max_sum = summation\n        summation = 0\n        print max_sum\n        max_contig_sum(new_sub1)\n        max_contig_sum(new_sub2)\n        \n    elif (len(L) == 1):\n        summation = L[0]\n        if(summation >= max_sum):\n            max_sum = summation\n    return max_sum\n"}, {"index": 262, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    \n    best = 0\n    for low in range(len(L)):\n        for high in range(len(L)+1):\n            best = max(best, sum(L[low:high]))\n    return best"}, {"index": 263, "code": "def max_contig_sum(L):\n    \"\"\" L, a list of integers, at least one positive\n    Returns the maximum sum of a contiguous subsequence in L \"\"\"\n    #YOUR CODE HERE\n    n = len(L)\n    max_sum = -float(\"inf\")\n    for j in range(n+1):\n        for i in range(j):\n            temp = sum(L[i:j])\n            if temp > max_sum:\n                max_sum = temp\n    return max_sum"}]