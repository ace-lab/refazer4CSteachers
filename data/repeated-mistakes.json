[{"ErrorFlag":0,"Id":1,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n        return f        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f\r\n    elif n<=2:\r\n        return compose1(f, f)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n    \treturn identity\n    elif n <= 2:\n    \treturn compose1(f, f)\n    else:\n    \treturn compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n<=2:\r\n        return compose1(f, f)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":2,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n    if n==0:                                 =>           \r\n        return lambda x: x                   =>           \r\n        return lambda x: f(x)                =>           \r\n        return compose1(f, repeated(f, n-1)) =>           \r\n        return f(f)                          <=           \r\n        k=compose1(f,f)                      <=           \r\n    while n>=2:                              <=           \r\n        k=compose1(f, k)                     <=           \r\n        n-=1                                 <=           \r\n    return k                                 <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==1:\n        return f(f)\n    else:\n        k=compose1(f,f)\n    while n>=2:\n        k=compose1(f, k)\n        n-=1\n    return k\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==0:\n        return lambda x: x\n    if n==1:\n        return lambda x: f(x)\n    else:\n        return compose1(f, repeated(f, n-1))\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":3,"studentId":0,"date":null,"diff":"\r\nInputObject                          SideIndicator\r\n-----------                          -------------\r\n    def combine(x, i = n):           =>           \r\n        elif i == 1:                 =>           \r\n            return combine(g, i - 1) =>           \r\n    def combine(x, n):               <=           \r\n        elif n == 1:                 <=           \r\n            return combine(g, n - 1) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    def combine(x, n):\n        g = f(x)\n        if n == 0:\n            return x\n        elif n == 1:\n            return g\n        else:\n            return combine(g, n - 1)\n    return combine\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    def combine(x, i = n):\n        g = f(x)\n        if n == 0:\n            return x\n        elif i == 1:\n            return g\n        else:\n            return combine(g, i - 1)\n    return combine\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: combine() missing 1 required positional argument: 'n'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":4,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        i = n        =>           \r\n        while i > 0: =>           \r\n            i -= 1   =>           \r\n        while n > 0: <=           \r\n            n -= 1   <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        while n > 0:\n            x = f(x)\n            n -= 1\n        return x\n    return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        i = n\n        while i > 0:\n            x = f(x)\n            i -= 1\n        return x\n    return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 149, in h","    while n > 0:","UnboundLocalError: local variable 'n' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":5,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        return lambda x: f(x)                =>           \r\n        return compose1(f, repeated(f, n-1)) =>           \r\n    if n == 1:                               =>           \r\n        return repeated(compose1(f, f), n-1) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    compose1 = lambda f, g: lambda x: f(g(x))\n    if n == 0:\n        return lambda x: x\n    else: \n        return repeated(compose1(f, f), n-1)\n    \n    \n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    compose1 = lambda f, g: lambda x: f(g(x))\n    if n == 0:\n        return lambda x: x\n    if n == 1:\n        return lambda x: f(x)\n    else: \n        return compose1(f, repeated(f, n-1))\n    \n    \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":6,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    if n == 0:             =>           \r\n        return lambda x: x =>           \r\n    if n == 1:             <=           \r\n        return f           <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":7,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n            print(num) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def fun_stuff(first_num):\r\n        def call(num, index):\r\n            print(num)\r\n            if index==n:\r\n                return num\r\n            return call(f(num), index+1)\r\n        return call(first_num, 0)\r\n    return fun_stuff\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def fun_stuff(first_num):\n\n        def call(num, index):\n            if index == n:\n                return num\n            return call(f(num),index+1)\n\n        return call(first_num,0)\n\n    return fun_stuff\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def fun_stuff(first_num):\r\n        def call(num, index):\r\n            print(identity)\r\n            if index==n:\r\n                return num\r\n            return call(f(num), index+1)\r\n        return call(first_num, 0)\r\n    return fun_stuff\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","6","7","8","8","","# Error: expected","#     8","# but got","#     5","#     6","#     7","#     8","#     8","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":8,"studentId":0,"date":null,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n        if n == 0: =>           \r\n        if n == 1: <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def inner_repeated(i):\r\n        if n==1:\r\n            return i\r\n        else:\r\n            return f(repeated(f, n-1)(i))\r\n    return inner_repeated\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def inner_repeated(i):\n        if n == 0:\n            return i\n        else:\n            return f(repeated(f, n-1)(i))\n    return inner_repeated\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def inner_repeated(i):\r\n        if n==0:\r\n            return i\r\n        else:\r\n            return f(repeated(f, n-1)(i))\r\n    return inner_repeated\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":9,"studentId":0,"date":null,"diff":"\r\nInputObject                        SideIndicator\r\n-----------                        -------------\r\n                counter += 1       =>           \r\n            return x               =>           \r\n                                   <=           \r\n                counter += 1       <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def c(x):\n        \n        if n == 0:\n            return x\n        else:\n            counter = 0\n            while (counter < n):\n                x = f(x)\n                counter += 1      \n    return c\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def c(x):\n        if n == 0:\n            return x\n        else:\n            counter = 0\n            while (counter < n):\n                x = f(x)\n                counter += 1    \n            return x  \n    return c\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","","# Error: expected","#     8","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":10,"studentId":0,"date":null,"diff":"\r\nInputObject                      SideIndicator\r\n-----------                      -------------\r\n                                 =>           \r\n        p = n                    =>           \r\n        total = x                =>           \r\n        while p > 0:             =>           \r\n            total = f(total)     =>           \r\n            p -= 1               =>           \r\n                                 =>           \r\n        if n == 0:               =>           \r\n        return total             =>           \r\n    def h(x):                    =>           \r\n    return h                     =>           \r\n                                 =>           \r\n                                 =>           \r\n    total = 1                    <=           \r\n    def h(x, n):                 <=           \r\n        while n > 0:             <=           \r\n            total = f(x) * total <=           \r\n            n -= 1               <=           \r\n        else:                    <=           \r\n    return h(x, n)               <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n\t\"\"\"Return the function that computes the nth application of f.\n\n\t>>> add_three = repeated(increment, 3)\n\t>>> add_three(5)\n\t8\n\t>>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n\t243\n\t>>> repeated(square, 2)(5) # square(square(5))\n\t625\n\t>>> repeated(square, 4)(5) # square(square(square(square(5))))\n\t152587890625\n\t>>> repeated(square, 0)(5)\n\t5\n\t\"\"\"\n\ttotal = 1\n\tdef h(x, n):\n\t\twhile n > 0:\n\t\t\ttotal = f(x) * total\n\t\t\tn -= 1\n\t\telse:\n\t\t\treturn x\n\treturn h(x, n)\n\ndef compose1(f, g):\n\t\"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n\tdef h(x):\n\t\treturn f(g(x))\n\treturn h\n\n","after":"def repeated(f, n):\n\t\"\"\"Return the function that computes the nth application of f.\n\n\t>>> add_three = repeated(increment, 3)\n\t>>> add_three(5)\n\t8\n\t>>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n\t243\n\t>>> repeated(square, 2)(5) # square(square(5))\n\t625\n\t>>> repeated(square, 4)(5) # square(square(square(square(5))))\n\t152587890625\n\t>>> repeated(square, 0)(5)\n\t5\n\t\"\"\"\n\t\n\tdef h(x):\n\t\tp = n\n\t\ttotal = x\n\t\twhile p > 0:\n\t\t\ttotal = f(total)\n\t\t\tp -= 1\n\t\t\n\t\tif n == 0:\n\t\t\treturn x\n\t\treturn total\n\n\n\treturn h\n\ndef compose1(f, g):\n\t\"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n\tdef h(x):\n\t\treturn f(g(x))\n\treturn h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 178, in repeated","    return h(x, n)","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":11,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n        f = lambda x:x =>           \r\n        return f       =>           \r\n        return x       <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def compose(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    def helper(i):\r\n        if i>n:\r\n            return f\r\n        else:\r\n            return compose(f, helper(i+1))\r\n    if n==1:\r\n        return f\r\n    elif n==0:\r\n        return x\r\n    else:\r\n        return helper(2)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def compose(f,g):\n        def h(x):\n            return f(g(x))\n        return h\n    def helper(i):\n        if i > n:\n            return f\n        else:\n            return compose(f, helper(i + 1))\n    if n == 1:\n        return f\n    elif n == 0:\n        f = lambda x:x\n        return f\n    else:\n        return helper(2)\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    def helper(i):\r\n        if i>n:\r\n            return f\r\n        else:\r\n            return compose(f, helper(i+1))\r\n    if n==1:\r\n        return f\r\n    elif n==0:\r\n        return identity\r\n    else:\r\n        return helper(2)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 173, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":12,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        while i > 0:  =>           \r\n        while i >= 0: <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def nrep (x):\n        i = n\n        while i >= 0:\n            x = f(x)\n            i -= 1\n        return x\n    return nrep\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def nrep (x):\n        i = n\n        while i > 0:\n            x = f(x)\n            i -= 1\n        return x\n    return nrep\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":13,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n        counter=0                          =>           \r\n        if n==0:                           =>           \r\n            return x                       =>           \r\n        else:                              =>           \r\n            while counter<n:               =>           \r\n                counter=counter+1          =>           \r\n                x=f(x)                     =>           \r\n            return x                       =>           \r\n    return helper                          =>           \r\n        return x                           <=           \r\n    if n==0:                               <=           \r\n        return helper                      <=           \r\n    elif n==1:                             <=           \r\n        \"\"\"return compose1(f,helper)\"\"\"    <=           \r\n                                           <=           \r\n        return f                           <=           \r\n    else:                                  <=           \r\n        return repeated(compose1(f,f),n-1) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def helper(x):\n        return x\n    if n==0:\n        return helper\n    elif n==1:\n        \"\"\"return compose1(f,helper)\"\"\"\n\n        return f\n    else:\n        return repeated(compose1(f,f),n-1)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def helper(x):\n        counter=0\n        if n==0:\n            return x\n        else: \n            while counter<n:\n                counter=counter+1\n                x=f(x)\n            return x\n    return helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":14,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n    func = identity =>           \r\n    func = null     <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    x = n\r\n    func = null\r\n    while x>0:\r\n        func = compose1(func, f)\r\n        x -= 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    x = n\n    func = identity\n    while x > 0:\n        func = compose1(func, f)\n        x -= 1\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    x = n\r\n    func = identity\r\n    while x>0:\r\n        func = compose1(func, f)\r\n        x -= 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated","    func = null","NameError: name 'null' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":15,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n        return lambda x:h(repeated(f, n-1)(x)) =>           \r\n        return h(repeated(f, n-1)(x))          <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        return f(x)\n    if n != 0:\n        return h(repeated(f, n-1)(x))\n    else:\n        return lambda x:x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        return f(x)\n    if n != 0:\n        return lambda x:h(repeated(f, n-1)(x))\n    else:\n        return lambda x:x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 196, in repeated","    return h(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 196, in repeated","    return h(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 196, in repeated","    return h(repeated(f, n-1)(x))","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":16,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n        return compose1(f, repeated(f, n - 1)) =>           \r\n        return f(repeated(f, n - 1))           <=           \r\n    def carry_on(f, x, n):                     <=           \r\n        return f(x, n)                         <=           \r\n    def switch_flip(f):                        <=           \r\n        if f == add:                           <=           \r\n            return sub                         <=           \r\n        else:                                  <=           \r\n            return add                         <=           \r\n    if x % 7 == 0 or has_seven(x) == True:     <=           \r\n        return x + carry_on(switch_flip(f), 1) <=           \r\n        return x + carry_on(f, x, 1)           <=           \r\n    def shift_adder(x):                        <=           \r\n        if n % 7 == 0 or has_seven(n) == True: <=           \r\n            return identity(shift(x, 1))       <=           \r\n        else:                                  <=           \r\n            return carry_on(x, 1)              <=           \r\n    else:                                      <=           \r\n                                               <=           \r\n                                               <=           \r\n                                               <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n - 1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":17,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    if n == 0:             =>           \r\n        return lambda x: x =>           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    g = f\n    while n > 1:\n        g = compose1(f, g)\n        n -= 1\n    return g\n\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    g = f\n    if n == 0:\n        return lambda x: x\n    while n > 1:\n        g = compose1(f, g)\n        n -= 1\n    return g\n\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":18,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n        return compose1(f, repeated(f, n - 1)) =>           \r\n        k = 0                                  <=           \r\n        composed_func = f                      <=           \r\n        while k <= n:                          <=           \r\n            composed_func = compose1(f, g)     <=           \r\n            k += 1                             <=           \r\n        return composed_func                   <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    else:\n        k = 0\n        composed_func = f\n        while k <= n:\n            composed_func = compose1(f, g)\n            k += 1\n        return composed_func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    else:\n        return compose1(f, repeated(f, n - 1))\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 205, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 17, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":19,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        return identity    =>           \r\n        return identity(x) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return identity(x)\r\n    k = 1\r\n    composition = f\r\n    while k<n:\r\n        composition = compose1(composition, f)\r\n        k += 1\r\n    return composition","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n\n    if n == 0:\n        return identity\n\n    k = 1\n    composition = f\n    while k < n:\n        composition = compose1(composition, f)\n        k += 1\n    return composition \n\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return identity(identity)\r\n    k = 1\r\n    composition = f\r\n    while k<n:\r\n        composition = compose1(composition, f)\r\n        k += 1\r\n    return composition","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 167, in repeated","    return identity(x)","NameError: name 'x' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":20,"studentId":0,"date":null,"diff":"\r\nInputObject   SideIndicator\r\n-----------   -------------\r\n        i = 0 =>           \r\n        i     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def cycle(x):\n        i\n        while i < n:\n            x = f(x)\n            i += 1\n        return x\n    return cycle\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def cycle(x):\n        i = 0\n        while i < n:\n            x = f(x)\n            i += 1\n        return x\n    return cycle\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in cycle","    i","UnboundLocalError: local variable 'i' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":21,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n    return helper =>           \r\n    return h      <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n     \n\n    def helper(x):\n        k=1\n        while k<=n:\n            x=f(x)\n            k= k+1\n        return x\n    return h\n\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n\n#Q5\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n     \n\n    def helper(x):\n        k=1\n        while k<=n:\n            x=f(x)\n            k= k+1\n        return x\n    return helper\n\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n\n#Q5\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 167, in repeated","    return h","NameError: name 'h' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":22,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n    def composer(x):     =>           \r\n            x = f(x)     =>           \r\n        return x         =>           \r\n    def composer(total): <=           \r\n            total = f(x) <=           \r\n        return total     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def composer(total):\n        counter = 0\n        while counter < n:\n            total = f(x)\n            counter += 1\n        return total\n    return composer\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def composer(x):\n        counter = 0\n        while counter < n:\n            x = f(x)\n            counter += 1\n        return x\n    return composer\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 158, in composer","    total = f(x)","NameError: name 'x' is not defined","","# Error: expected","#     8","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":23,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n                return x =>           \r\n                return n <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def inner(x):\r\n        def helper(total, n):\r\n            if n==0:\r\n                return n\r\n            if n==1:\r\n                return f(total)\r\n            return helper(f(total), n-1)\r\n        return helper(x, n)\r\n    return inner\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def inner(x):\n        def helper(total, n):\n            if n == 0:\n                return x\n            if  n == 1:\n                return f(total)\n            return helper(f(total),n-1)\n        return helper(x, n)\n    return inner\n    #if n == 0:\n    #    return n\n    #if  n == 1:\n    #    return f(x)\n    #def inner(x):\n        # after the first loop applies the f on the x, make the whole answer\n        # become x!\n        # first loop applies f on x, second loop subtracts n by 1 and applies f\n        # to x again until n reaches 1, when you apply it again.\n        # since the inner function only takes one argument and you need more,\n        # use another helper function\n        # the helper function inside would\n    #    def helper(total, count):\n    #        return helper(f(total), count-1)\n    #    return helper(f(x), n)\n    #return inner\n#DO RECURSION ON INNER\n    #if x == 1:\n    #    return f(x)\n    #else:\n\n    #    return inner(f(x)) # check how to recurse this function\n#recursive function on inner- to apply the f multiple times\n# how to make it so that the function recurses for n times (so that n goes down\n#1 each time)\n\n# how to write this function so that it applies f on x n amount of times....\n# ex:\n# repeated(square, 2)(5)\n# gives you square(5) and then square of that\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def inner(x):\r\n        def helper(total, n):\r\n            if n==0:\r\n                return x\r\n            if n==1:\r\n                return f(total)\r\n            return helper(f(total), n-1)\r\n        return helper(x, n)\r\n    return inner\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","0","","# Error: expected","#     5","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":24,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        i, total = 1, x =>           \r\n        i, total = 1, n <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        i, total = 1, n\r\n        while i<=n:\r\n            total = f(total)\r\n            i += 1\r\n        return total\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        i, total = 1, x\n        while i <= n:\n            total = f(total)\n            i += 1\n        return total\n    return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        i, total = 1, x\r\n        while i<=n:\r\n            total = f(total)\r\n            i += 1\r\n        return total\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","6","","# Error: expected","#     8","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":25,"studentId":0,"date":null,"diff":"\r\nInputObject                                                   SideIndicator\r\n-----------                                                   -------------\r\n    x = identity                                              =>           \r\n    def counter(n, m):                                        =>           \r\n        if n == 0:                                            =>           \r\n            return n                                          =>           \r\n        if n < 0 or m == 0:                                   =>           \r\n            return 0                                          =>           \r\n        else:                                                 =>           \r\n            using_m = counter(n-m, m)                         =>           \r\n            # with_m = counter(lambda s: link(m, s), using_m) =>           \r\n            without_m = counter(n, m-1)                       =>           \r\n            return using_m + without_m                        =>           \r\n                                                              =>           \r\n    return counter(amount, 1)                                 =>           \r\n    x = f(x)                                                  <=           \r\n    # def g(x):                                               <=           \r\n    #     a = 0                                               <=           \r\n    #     while a < n:                                        <=           \r\n    #         x, a = f(x), a + 1                              <=           \r\n    #     return x                                            <=           \r\n    # return g                                                <=           \r\n    coin = 1                                                  <=           \r\n    counter = 0                                               <=           \r\n    while counter < amount:                                   <=           \r\n        if amount % coin:                                     <=           \r\n            counter += 1                                      <=           \r\n        if amount % (2 * coin):                               <=           \r\n            counter += 1                                      <=           \r\n        if amount - coin == 0:                                <=           \r\n            counter += 1                                      <=           \r\n        coin += 2 * coin                                      <=           \r\n    counter = 0                                               <=           \r\n    coin = 1                                                  <=           \r\n    b = 1                                                     <=           \r\n    a = 1                                                     <=           \r\n    if amount < 0:                                            <=           \r\n        return 0                                              <=           \r\n    while coin <= amount:                                     <=           \r\n        if amount == 0:                                       <=           \r\n            counter += 1                                      <=           \r\n        if amount - coin == 0:                                <=           \r\n            counter += 1                                      <=           \r\n        coin = 2 * coin                                       <=           \r\n        if coin <= amount:                                    <=           \r\n            counter += 1                                      <=           \r\n            # b = b * 2                                       <=           \r\n        # coin = 2 * coin                                     <=           \r\n    return counter                                            <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    x = f(x)\n    while n >= 1:\n        x, n = compose1(f, x), n - 1\n    return x \n    # ","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    x = identity \n    while n >= 1:\n        x, n = compose1(f, x), n - 1\n    return x \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in repeated","    x = f(x)","UnboundLocalError: local variable 'x' referenced before assignment","","# Error: expected","#     ","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":26,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n        return lambda x: x    =>           \r\n        return lambda x: f(x) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: f(x)\r\n    if n==1:\r\n        return lambda x: f(x)\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return lambda x: x\n    if n == 1:\n        return lambda x: f(x)\n    return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: identity(x)\r\n    if n==1:\r\n        return lambda x: f(x)\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":27,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n        return 0        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return 0\r\n    elif n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def compose1(f,g):\n    \tdef h(x):\n    \t\treturn f(g(x))\n    \treturn h \n    if n == 0:\n    \treturn identity\n    elif n == 1:\n    \treturn f\n    return compose1(f,repeated(f,n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":28,"studentId":0,"date":null,"diff":"\r\nInputObject                 SideIndicator\r\n-----------                 -------------\r\n        if n==0:            =>           \r\n            return identity =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g, n):\r\n        def h(x):\r\n            return f(g(x))\r\n        if n==2:\r\n            return h\r\n        else:\r\n            return compose1(f, h, n-1)\r\n    return compose1(f, f, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def compose1(f, g, n):\n        def h(x):\n            return f(g(x))\n        if n==0:\n            return identity\n        if n==2:\n            return h\n        else:\n            return compose1(f, h, n-1)\n    return compose1(f, f, n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def compose1(f, g, n):\r\n        def h(x):\r\n            return f(g(x))\r\n        if n==2:\r\n            return h\r\n        else:\r\n            return compose1(f, h, n-1)\r\n    return compose1(f, f, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(LeafWildcard(\"SuiteStatementNode\")))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in compose1","    return compose1(f, h, n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in compose1","    return compose1(f, h, n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in compose1","    return compose1(f, h, n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in compose1","    return compose1(f, h, n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in compose1","    return compose1(f, h, n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in compose1","    return compose1(f, h, n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in compose1","    if n==2:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":29,"studentId":0,"date":null,"diff":"\r\nInputObject                                              SideIndicator\r\n-----------                                              -------------\r\n    def repeat(x):                                       =>           \r\n        count = 0                                        =>           \r\n        while count!=n:                                  =>           \r\n            x = f(x)                                     =>           \r\n            count+=1                                     =>           \r\n        return x                                         =>           \r\n    return repeat                                        =>           \r\n    def count_partitions(amount,diff):                   =>           \r\n        if amount == 1 or amount == 0:                   =>           \r\n            return 1                                     =>           \r\n        total = 1                                        =>           \r\n        big = 1                                          =>           \r\n        while big*2 <= min(amount,diff):                 =>           \r\n            big *=2                                      =>           \r\n            total += count_partitions(amount - big, big) =>           \r\n        return total                                     =>           \r\n    return count_partitions(amount,amount)               =>           \r\n                                                         =>           \r\n    count = 1                                            <=           \r\n    a = f                                                <=           \r\n    while count !=n:                                     <=           \r\n        a = compose1(a,f)                                <=           \r\n        count+=1                                         <=           \r\n    return a                                             <=           \r\n    ways = 1                                             <=           \r\n    \"*** YOUR CODE HERE ***\"                             <=           \r\n                                                         <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    count = 1\r\n    a = f\r\n    while count!=n:\r\n        a = compose1(a, f)\r\n        count += 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeat(x):\n        count = 0\n        while count!=n:\n            x = f(x)\n            count+=1\n        return x\n    return repeat\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    count = 1\r\n    a = f\r\n    while count!=n:\r\n        a = compose1(a, f)\r\n        count += 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     5","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":30,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n    while count < n:   =>           \r\n    while count < n-1: <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    count = 0\r\n    g = lambda x: x\r\n    while count<n-1:\r\n        g = compose1(f, g)\r\n        count = count+1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    count = 0\n    g = lambda x: x\n    while count < n:\n        g = compose1(f,g)\n        count = count + 1\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    count = 0\r\n    g = lambda x: x\r\n    while count<n-0:\r\n        g = compose1(f, g)\r\n        count = count+1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":31,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n    if n == 0:                    =>           \r\n        return identity           =>           \r\n    elif n <= 1:                  =>           \r\n    other = 6 - start - end       =>           \r\n    move_stack(n-1, start, end)   =>           \r\n    print_move(start, end)        =>           \r\n    move_stack(n-1, other, start) =>           \r\n    return                        =>           \r\n    if n <= 1:                    <=           \r\n    \"*** YOUR CODE HERE ***\"      <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n<=1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    elif n <= 1:\n        return f\n    else:\n        return compose1(f,repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n<=1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":32,"studentId":0,"date":null,"diff":"\r\nInputObject                                        SideIndicator\r\n-----------                                        -------------\r\n    def repeater(current_function):                =>           \r\n            current_function = f(current_function) =>           \r\n    def repeater(x):                               <=           \r\n            current_function = f(x)                <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeater(x):\n        i = 1\n        while i <= n:\n            current_function = f(x)\n            i += 1\n        return current_function\n    return repeater\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeater(current_function):\n        i = 1\n        while i <= n:\n            current_function = f(current_function)\n            i += 1\n        return current_function\n    return repeater\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","6","","# Error: expected","#     8","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":33,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        while i<=n:  =>           \r\n        if n==0:     <=           \r\n            return x <=           \r\n        while i<n:   <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def repeat(x):\r\n        i = 1\r\n        if n==0:\r\n            return x\r\n        while i<n:\r\n            x = f(x)\r\n            i += 1\r\n        return x\r\n    return repeat\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeat(x):\n        i=1\n        while i<=n:\n            x=f(x)\n            i+=1\n        return x\n\n\n    return repeat\n\n\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeat(x):\r\n        i = 0\r\n        if n==0:\r\n            return x\r\n        while i<n:\r\n            x = f(x)\r\n            i += 1\r\n        return x\r\n    return repeat\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":34,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n        return compose1(helper(f, x+1), f) =>           \r\n        x += 1                             <=           \r\n        return compose1(helper(f, 1), f)   <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def helper(f, x):\n        if n == x:\n            return f\n        x += 1\n        return compose1(helper(f, 1), f)\n    if n == 0:\n        return identity\n\n    else:\n        return helper(f, 1)\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def helper(f, x):\n        if n == x:\n            return f\n        return compose1(helper(f, x+1), f)\n    if n == 0:\n        return identity\n\n    else:\n        return helper(f, 1)\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in helper","    return compose1(helper(f, 1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in helper","    return compose1(helper(f, 1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in helper","    return compose1(helper(f, 1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in helper","    return compose1(helper(f, 1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in helper","    return compose1(helper(f, 1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in helper","    return compose1(helper(f, 1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in helper","    if n == x:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     ","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":35,"studentId":0,"date":null,"diff":"\r\nInputObject                     SideIndicator\r\n-----------                     -------------\r\n        i = 0                   =>           \r\n        while i < n:            =>           \r\n            x = f(x)            =>           \r\n            i += 1              =>           \r\n        return x                =>           \r\n        if n == 0:              <=           \r\n            return              <=           \r\n        else:                   <=           \r\n            n -= 1              <=           \r\n            return n_of_f(f(x)) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def n_of_f(x):\n        if n == 0:\n            return \n        else:\n            n -= 1\n            return n_of_f(f(x))\n    return n_of_f\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def n_of_f(x):\n        i = 0\n        while i < n:\n            x = f(x)\n            i += 1\n        return x\n    return n_of_f\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 155, in n_of_f","    if n == 0:","UnboundLocalError: local variable 'n' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":36,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        return lambda x:x =>           \r\n    if n==1:              =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \n    if n==0:\n        return lambda x:x\n    if n==1:\n        return f\n    return compose1(f, repeated(f,n-1))\n    \n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":37,"studentId":0,"date":null,"diff":"\r\nInputObject                              SideIndicator\r\n-----------                              -------------\r\n    return compose1(f,repeated(f,n-1))   =>           \r\n    return compose1(f,repeated(f,n-1,x)) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    return compose1(f,repeated(f,n-1,x))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    return compose1(f,repeated(f,n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated","    return compose1(f,repeated(f,n-1,x))","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":38,"studentId":0,"date":null,"diff":"\r\nInputObject                                              SideIndicator\r\n-----------                                              -------------\r\n        return compose1(f,repeated(f,n - 1))             =>           \r\n        return compose1(f,repeated(f,n - 1))(lambda x:x) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return lambda x: x\n    else:\n        return compose1(f,repeated(f,n - 1))(lambda x:x)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return lambda x: x\n    else:\n        return compose1(f,repeated(f,n - 1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in repeated","    return compose1(f,repeated(f,n - 1))(lambda x:x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in repeated","    return compose1(f,repeated(f,n - 1))(lambda x:x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in repeated","    return compose1(f,repeated(f,n - 1))(lambda x:x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 164, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":39,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        return lambda x: x =>           \r\n        return n           <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    t = f\r\n    if n==0:\r\n        return n\r\n    else:\r\n        while n>1:\r\n            t = compose1(t, f)\r\n            n -= 1\r\n        return t\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    t = f\n    if n == 0:\n        return lambda x: x\n    else:\n        while n > 1:\n            t = compose1(t, f)\n            n -= 1\n        return t\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    t = f\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        while n>1:\r\n            t = compose1(t, f)\r\n            n -= 1\r\n        return t\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":40,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        while index < n: =>           \r\n            index += 1   =>           \r\n        while i < n:     <=           \r\n            i += 1       <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def help(h):\n        index = 0\n        while i < n:\n            h = f(h)\n            i += 1\n        return h\n    return help\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def help(h):\n        index = 0\n        while index < n:\n            h = f(h)\n            index += 1\n        return h\n    return help\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in help","    while i < n:","UnboundLocalError: local variable 'i' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":41,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n        while(counter != 0): =>           \r\n        while(n != 0):       <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x):\n    \tcounter = n\n    \twhile(n != 0):\n    \t\tx = f(x)\n    \t\tcounter = counter - 1\n    \treturn x\n    return helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x):\n    \tcounter = n\n    \twhile(counter != 0):\n    \t\tx = f(x)\n    \t\tcounter = counter - 1\n    \treturn x\n    return helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     8","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":42,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        return lambda x: x =>           \r\n        return lambda: x   <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    i = 1\r\n    new = f\r\n    if n==0:\r\n        return lambda : x\r\n    elif n==1:\r\n        return f\r\n    while i<n:\r\n        new = compose1(f, new)\r\n        i += 1\r\n    return new\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    i = 1\n    new = f\n    if n == 0:\n        return lambda x: x\n    elif n == 1:\n        return f\n    while i < n:\n        new = compose1(f,new)\n        i += 1\n    return new\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    i = 1\r\n    new = f\r\n    if n==0:\r\n        return lambda : x\r\n    elif n==1:\r\n        return f\r\n    while i<n:\r\n        new = compose1(f, new)\r\n        i += 1\r\n    return new\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: <lambda>() takes 0 positional arguments but 1 was given","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":43,"studentId":0,"date":null,"diff":"\r\nInputObject                                                SideIndicator\r\n-----------                                                -------------\r\n        return compose1(f, repeated(f, n-1))               =>           \r\n    def helper(m):                                         =>           \r\n        if m<=3:                                           =>           \r\n            return m                                       =>           \r\n        else:                                              =>           \r\n            return helper(m-1)+2*helper(m-2)+3*helper(m-3) =>           \r\n    return helper(n)                                       =>           \r\n        return compose1(f, repeated(compose1(f, f), n-1))  <=           \r\n    \"*** YOUR CODE HERE ***\"                               <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def compose1(a, b):\r\n        def c(x):\r\n            return a(b(x))\r\n        return c\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(compose1(f, f), n-1))","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    def compose1(a, b):\n        \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n        def c(x):\n            return a(b(x))\n        return c\n    if n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose1(a, b):\r\n        def c(x):\r\n            return a(b(x))\r\n        return c\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(compose1(identity, f), n-1))","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","12","","# Error: expected","#     8","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":44,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n    if count == n:     =>           \r\n    while count < n:   =>           \r\n    while count <= n:  <=           \r\n        if count == n: <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    count = 1\n    func = f\n    if n == 0:\n        def y(x):\n            return x\n        return y\n    while count <= n:\n        if count == n:\n            return 0\n        func = compose1(f, func)\n        count = count + 1\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n    \n    \n\n\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    count = 1\n    func = f\n    if n == 0:\n        def y(x):\n            return x\n        return y\n    if count == n:\n            return 0\n    while count < n:\n        func = compose1(f, func)\n        count = count + 1\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n    \n    \n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":45,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        return compose1(f, repeated(f, n-1)) =>           \r\n        return compose(f, repeated(f, n-1))  <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(LeafWildcard(\"ArgNode\"))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in repeated","    return compose(f, repeated(f, n-1))","NameError: name 'compose' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":46,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        return lambda x:x =>           \r\n        return            <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def compose(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==1:\r\n        return f\r\n    if n==0:\r\n        return \r\n    else:\r\n        return compose(f, repeated(f, n-1))","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def compose(f,g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n == 1:\n        return f\n    if n == 0:\n        return lambda x:x\n    else:\n        return compose(f,repeated(f,n-1))\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def compose(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==1:\r\n        return f\r\n    if n==0:\r\n        return \r\n    else:\r\n        return compose(f, repeated(f, n-1))","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":47,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        g = identity    =>           \r\n        return g(x)     =>           \r\n        g = identity(x) <=           \r\n        return g        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        i = n\r\n        g = identity(x)\r\n        while i!=0:\r\n            g = compose1(f, g)\r\n            i -= 1\r\n        return g\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x):\n        i = n\n        g = identity\n        while i != 0:\n            g = compose1(f, g)\n            i -= 1\n        return g(x)\n    \n    return helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        i = n\r\n        g = identity(x)\r\n        while i!=0:\r\n            g = f(g)\r\n            i -= 1\r\n        return g\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"any\"))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function compose1.<locals>.h at 0x000001B1E3CD8E18>","","# Error: expected","#     8","# but got","#     <function compose1.<locals>.h at 0x000001B1E3CD8E18>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":48,"studentId":0,"date":null,"diff":"\r\nInputObject                                                      SideIndicator\r\n-----------                                                      -------------\r\n    def helper(x):                                               =>           \r\n        if n <= 3:                                               =>           \r\n            return n                                             =>           \r\n        elif n > 3:                                              =>           \r\n            return g(n-1)(x) + x+1 * g(n-2)(x) + x+2 * g(n-3)(x) =>           \r\n    return helper(1)                                             =>           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \"\"\"\n    def helper(x):\n        total, index = x, 0\n        while index < n:\n            total = f(total)\n            index +=1\n        return total\n    return helper\n    \"\"\"\n    return compose1(lambda x: compose1(f,n), f)\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x):\n        total, index = x, 0\n        while index < n:\n            total = f(total)\n            index +=1\n        return total\n    return helper\n    \"\"\"\n    return compose1(lambda x: compose1(f,n), f)\n    \"\"\"\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function compose1.<locals>.h at 0x0000023978B1AD90>","","# Error: expected","#     8","# but got","#     <function compose1.<locals>.h at 0x0000023978B1AD90>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":49,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        total= x           =>           \r\n        while i < n:       =>           \r\n    return repeater        =>           \r\n        total= repeater(x) <=           \r\n        while i <= n:      <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeater(x):\n        i=0\n        total= repeater(x)\n        while i <= n:\n            if n == 0:\n                return total\n            else:\n                i+=1\n                total= f(total)\n        return total\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeater(x):\n        i=0\n        total= x\n        while i < n:\n            if n == 0:\n                return total\n            else:\n                i+=1\n                total= f(total)\n        return total\n    return repeater\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":50,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n        return compose1(identity, identity)   =>           \r\n        return compose1(repeated(f, n-1), f)  =>           \r\n        return compose1(f, f)                 <=           \r\n        return repeated(repeated(f, n), n-1)  <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"call f, the function, n times on x\"\n    if n == 0:\n        return compose1(f, f)\n    else:\n        return repeated(repeated(f, n), n-1)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"call f, the function, n times on x\"\n    if n == 0:\n        return compose1(identity, identity)\n    else:\n        return compose1(repeated(f, n-1), f) \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in repeated","    return repeated(repeated(f, n), n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in repeated","    return repeated(repeated(f, n), n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in repeated","    return repeated(repeated(f, n), n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in repeated","    return repeated(repeated(f, n), n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in repeated","    return repeated(repeated(f, n), n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in repeated","    return repeated(repeated(f, n), n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in repeated","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     ","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":51,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        return lambda x: x =>           \r\n        return x           <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return x\r\n    else:\r\n        total = f\r\n        while n>1:\r\n            total = compose1(f, total)\r\n            n -= 1\r\n        return total\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    else:\n        total = f\n        while n > 1:\n            total = compose1(f, total)\n            n -= 1\n        return total\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        total = f\r\n        while n>1:\r\n            total = compose1(f, total)\r\n            n -= 1\r\n        return total\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":52,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n    if n == 0: return identity =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    for _ in range(1, n):\r\n        g = compose1(g, f)\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    #f(f(f(f(f(x)))))\n    if n == 0: return identity\n    g = f\n    for _ in range(1, n):\n        g = compose1(g, f)\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    for _ in range(1, n):\r\n        g = compose1(g, f)\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":53,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    elif n==0:          =>           \r\n        return identity =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==1:\n        return f\n    elif n==0:\n        return identity\n    return compose1(f,repeated(f,n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 155, in repeated","    if n==1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":54,"studentId":0,"date":null,"diff":"\r\nInputObject                 SideIndicator\r\n-----------                 -------------\r\n            return identity =>           \r\n        if x==1:            =>           \r\n            return f        =>           \r\n            return f(p)     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def r(x):\n        if x==0:\n            return f(p)\n        else:\n            return compose1(f,r(x-1))\n    return r(n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def r(x):\n        if x==0:\n            return identity\n        if x==1:\n            return f\n        else:\n            return compose1(f,r(x-1))\n    return r(n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return r(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 164, in r","    return compose1(f,r(x-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 164, in r","    return compose1(f,r(x-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 164, in r","    return compose1(f,r(x-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in r","    return f(p)","NameError: name 'p' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":55,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n    while n > 0: =>           \r\n    while n > 1: <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    g = identity\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    #f is a function\n    g = identity\n    while n > 0:\n        g = compose1(f, g)\n        n = n - 1\n    return g\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    g = identity\r\n    while n>0:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":56,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        return identity    =>           \r\n        return identity(5) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    function = f\r\n    if n==0:\r\n        return identity(5)\r\n    while 1<n:\r\n        function = compose1(f, function)\r\n        n -= 1\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    function = f\n    if n == 0:\n        return identity\n    while 1 < n:\n        function = compose1(f, function)\n        n -= 1\n    return function\n\n\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    function = f\r\n    if n==0:\r\n        return identity(5)\r\n    while 1<n:\r\n        function = compose1(f, function)\r\n        n -= 1\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":57,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        return lambda x: x =>           \r\n        return x           <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return x\r\n    elif n>1:\r\n        f1 = repeated(f, n-1)\r\n        return lambda x: f(f1(x))\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    elif n > 1:\n        f1 = repeated(f, n-1)\n        return lambda x: f(f1(x))\n    return f\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n>1:\r\n        f1 = repeated(f, n-1)\r\n        return lambda x: f(f1(x))\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":58,"studentId":0,"date":null,"diff":"\r\nInputObject   SideIndicator\r\n-----------   -------------\r\n        i = 1 =>           \r\n        i = 0 <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        i = 0\r\n        while i<=n:\r\n            x = f(x)\r\n            i += 1\r\n        return x\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def helper(x):\n        i = 1\n        while i <= n:\n            x = f(x)\n            i += 1\n        return x\n    return helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        i = 1\r\n        while i<=n:\r\n            x = f(x)\r\n            i += 1\r\n        return x\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":59,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n        for i in range(0, n): =>           \r\n            x = f(x)          =>           \r\n    def h(x):                 =>           \r\n    return h                  =>           \r\n    for i in range(0, n):     <=           \r\n        x = f(x)              <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    for i in range(0, n):\n        x = f(x)\n        return x\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        for i in range(0, n):\n            x = f(x)\n        return x\n    return h\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeated","    x = f(x)","UnboundLocalError: local variable 'x' referenced before assignment","","# Error: expected","#     ","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":60,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n        return lambda x: x        =>           \r\n        return compose1(adding,f) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    adding = f\r\n    if n==0:\r\n        return compose1(adding, f)\r\n    for i in range(0, n-1):\r\n        adding = compose1(adding, f)\r\n    return adding\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    adding=f\n    if n==0:\n        return lambda x: x\n    for i in range(0,n-1):\n        adding=compose1(adding, f)\n    return adding\n        \n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    adding = f\r\n    if n==0:\r\n        return compose1(adding, f)\r\n    for i in range(0, n-1):\r\n        adding = compose1(adding, f)\r\n    return adding\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","625","","# Error: expected","#     5","# but got","#     625","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":61,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        return lambda x: x =>           \r\n        return f           <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f\r\n    if n==1:\r\n        return f\r\n    i = 1\r\n    g = f\r\n    while n>i:\r\n        f = compose1(f, g)\r\n        i += 1\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    if n ==1:\n        return f\n    i = 1\n    g = f\n    while n > i:\n        f = compose1(f,g)\n        i += 1\n    return f\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    i = 1\r\n    g = f\r\n    while n>i:\r\n        f = compose1(f, g)\r\n        i += 1\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":62,"studentId":0,"date":null,"diff":"\r\nInputObject                                              SideIndicator\r\n-----------                                              -------------\r\n        if n==0:                                         =>           \r\n            return value                                 =>           \r\n        if n==1:                                         =>           \r\n            return f(value)                              =>           \r\n            return repeated(f,n-1)(f(value))             =>           \r\n        if n==1 or n==0:                                 <=           \r\n            return compose1(f,f)(value)                  <=           \r\n            return repeated(f,n-2)(compose1(f,f)(value)) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def application(value):\n        if n==1 or n==0:\n            return compose1(f,f)(value)\n        else:\n            return repeated(f,n-2)(compose1(f,f)(value))\n    return application\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def application(value):\n        if n==0:\n            return value\n        if n==1:\n            return f(value)\n        else:\n            return repeated(f,n-1)(f(value))\n    return application\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":63,"studentId":0,"date":null,"diff":"\r\nInputObject   SideIndicator\r\n-----------   -------------\r\n              =>           \r\n        x = 1 =>           \r\n    x = 1     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    x = 1\n    def new_fun(k):\n        while x <= n:\n            k = f(k)\n            x += 1\n        return k\n\n    return new_fun\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \n    def new_fun(k):\n        x = 1\n        while x <= n:\n            k = f(k)\n            x += 1\n        return k\n\n    return new_fun\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 178, in new_fun","    while x <= n:","UnboundLocalError: local variable 'x' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":64,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    if n == 0:             =>           \r\n        return lambda x: x =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    i = 1\r\n    g = f\r\n    while i<n:\r\n        f = compose1(f, g)\r\n        i = i+1\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    #def repeated_fn(f, n, i):\n     #   if i < n:\n      #      return repeated_fn(lambda x: f(f(x)), n, i + 1)\n       # else:\n        #    return lambda x: f(x)\n    #return repeated_fn(f, n, i=1)\n    if n == 0:\n        return lambda x: x\n    i = 1\n    g = f\n    while i < n:\n        f = compose1(f, g)\n        i = i + 1\n    return f\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    i = 1\r\n    g = f\r\n    while i<n:\r\n        f = compose1(f, g)\r\n        i = i+1\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":65,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n        return x        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return x\r\n    if n>1:\r\n        return compose1(repeated(f, n-1), f)\r\n    else:\r\n        return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    if n > 1:\n        return compose1(repeated(f, n-1), f)\n    else:\n        return f\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n>1:\r\n        return compose1(repeated(f, n-1), f)\r\n    else:\r\n        return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":66,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n    elif n==1:          =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        return compose1(f,repeated(f,n-1))\n    \n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":67,"studentId":0,"date":null,"diff":"\r\nInputObject     SideIndicator\r\n-----------     -------------\r\n    n = 0       <=           \r\n        n = n+1 <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    w = lambda x: x\r\n    n = 0\r\n    for t in range(n):\r\n        w = compose1(f, w)\r\n        n = n+1\r\n    return w\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    w = lambda x: x\n    for t in range(n):\n        w = compose1(f, w)\n    return w\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n    \n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    w = lambda x: x\r\n    identity = 0\r\n    for t in range(n):\r\n        w = compose1(f, w)\r\n        n = n+1\r\n    return w\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":68,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n        return f        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    a = f\r\n    if n==0:\r\n        return f\r\n    else:\r\n        while n>1:\r\n            a = compose1(f, a)\r\n            n -= 1\r\n        return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    a = f\n    if n == 0:\n        return identity\n    else:\n        while n > 1:\n            a = compose1(f,a)\n            n -= 1\n        return a\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    a = f\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        while n>1:\r\n            a = compose1(f, a)\r\n            n -= 1\r\n        return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":69,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n        while counter < n:   =>           \r\n        while counter < n-2: <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        counter = 0\r\n        num = x\r\n        while counter<n-2:\r\n            num = f(num)\r\n            counter = counter+1\r\n        return num\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    \n    def h(x):\n        counter = 0\n        num = x\n        while counter < n:\n            num = f(num)\n            counter = counter + 1\n        return num\n    return h\n\n#     Implement repeated(f, n):\n\n# f is a one-argument function that takes a number and returns another number.\n# n is a non-negative integer\n# repeated returns another function that, \n# when given an argument x, will compute f(f(....(f(x))....)) (apply f a total n times). \n# For example, repeated(square, 3)(42) evaluates to square(square(square(42))). \n# Yes, it makes sense to apply the function zero times! \n# See if you can figure out a reasonable function to return for that case.\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        counter = 0\r\n        num = x\r\n        while counter<n-0:\r\n            num = f(num)\r\n            counter = counter+1\r\n        return num\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","6","","# Error: expected","#     8","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":70,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n        return f        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    if n==0:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return f\n    if n == 0:\n        return identity\n    return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    if n==0:\r\n        return identity\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":71,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n    def nthapp(x):     =>           \r\n        j=n            =>           \r\n        while j>0:     =>           \r\n            x=f(x)     =>           \r\n            j=j-1      =>           \r\n        return x       =>           \r\n    return nthapp      =>           \r\n    f = double(f)      <=           \r\n    while n>3:         <=           \r\n           f=double(f) <=           \r\n           n=n-1       <=           \r\n    return f           <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    f = double(f)\n    while n>3:\n           f=double(f)\n           n=n-1\n    return f\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def nthapp(x):\n        j=n\n        while j>0:\n            x=f(x)\n            j=j-1\n        return x\n    return nthapp\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in repeated","    f = double(f)","NameError: name 'double' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":72,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n        total=x              =>           \r\n        y=1                  =>           \r\n    if n<=3:                 =>           \r\n        return n             =>           \r\n        return g(n-1)+2      =>           \r\n    else:                    =>           \r\n        total=f(x)           <=           \r\n        y=2                  <=           \r\n    \"*** YOUR CODE HERE ***\" <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def new_function(x):\r\n        total = f(x)\r\n        y = 2\r\n        while (y<=n):\r\n            total = f(total)\r\n            y = y+1\r\n        return total\r\n    return new_function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def new_function (x):\n        total=x\n        y=1\n        while (y<=n):\n            total=f(total)\n            y=y+1\n        return total\n    return new_function\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def new_function(x):\r\n        total = f(x)\r\n        y = 2\r\n        while (y<=n):\r\n            total = f(total)\r\n            y = y+1\r\n        return total\r\n    return new_function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":73,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n    for i in range(0, n): =>           \r\n    for i in range(1, n): <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    help = identity\r\n    for i in range(1, n):\r\n        help = compose1(f, help)\r\n    return help\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    help = identity\n    for i in range(0, n):\n        help = compose1(f, help)\n    return help\n\n\n    #apply f to extra argument n times \n\n    #CHECKTHIS\n    # if n==1:\n    #     return f(x)\n\n    # for i in range(0,n+1)\n    #     test = compose1(f,)\n    #     compose1(f, )\n\n    # return lambda x: f(x) * repeated(f,n-1)\n\n\n    # def helper(x):\n    #     return f(x)\n    # while n+1>=0:\n    #     n-=1\n    #     return lambda x: f(x) *\n\n    # lambda x: f(x)\n\n    \n\n\n    #square twice on 5\n\n    #return compose1(increment, f)\n    # return compose1()\n    # def h(x):\n    #     return f(x)    \n\n    # n+=1\n    # while n>=0:\n    #     n-=1\n    #     return compose1(f,x)\n        \ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    help = identity\r\n    for i in range(0, n):\r\n        help = compose1(f, help)\r\n    return help\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":74,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        while n > 1: =>           \r\n        while n > 0: <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        new_f = f\r\n        while n>0:\r\n            new_f = compose1(f, new_f)\r\n            n -= 1\r\n    return new_f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    else:\n        new_f = f\n        while n > 1:\n            new_f = compose1(f, new_f)\n            n -= 1\n    return new_f\n    \n    \ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h \n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        new_f = identity\r\n        while n>0:\r\n            new_f = compose1(f, new_f)\r\n            n -= 1\r\n    return new_f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":75,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n        i = i + 1 =>           \r\n        n = n + 1 <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    i = 1\n    g = identity\n    while i <= n:\n        g = compose1(f,g)\n        n = n + 1\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    i = 1\n    g = identity\n    while i <= n:\n        g = compose1(f,g)\n        i = i + 1\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     ","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":76,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n        return h(i) =>           \r\n        return h    <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def f_on_repeat(i):\n        x = n\n        y = f\n\n        if x == 0:\n            return i\n        if x == 1:\n            return y(i)\n        h = y\n        while x > 1:\n            h = compose1(h,f)\n            x-=1\n        return h\n    return f_on_repeat\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def f_on_repeat(i):\n        x = n\n        y = f\n\n        if x == 0:\n            return i\n        if x == 1:\n            return y(i)\n        h = y\n        while x > 1:\n            h = compose1(h,f)\n            x-=1\n        return h(i)\n    return f_on_repeat\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function compose1.<locals>.h at 0x000001DF631D6D90>","","# Error: expected","#     8","# but got","#     <function compose1.<locals>.h at 0x000001DF631D6D90>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":77,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        return identity  =>           \r\n        return n         <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    i = 1\r\n    new_function = f\r\n    if n==0:\r\n        return n\r\n    while i<n:\r\n        new_function = compose1(new_function, f)\r\n        i += 1\r\n    return new_function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    i=1\n    new_function=f\n    if n==0:\n        return identity \n    while i<n:\n        new_function=compose1(new_function,f)\n        i+=1\n    return new_function\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    i = 1\r\n    new_function = f\r\n    if n==0:\r\n        return identity\r\n    while i<n:\r\n        new_function = compose1(new_function, f)\r\n        i += 1\r\n    return new_function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":78,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n    return apply_on =>           \r\n    \"\"\"             =>           \r\n                    <=           \r\n        \"\"\"         <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def apply_on(x):\n        if n == 0:\n            return x\n        k = n\n        to_act_on = x\n        while k > 0:\n             to_act_on = f(to_act_on)\n             k -= 1\n        return to_act_on \n\n        ##try while\n        ##compose1(f, g)\n\n\n        ##try putting compose1 in here\n        \"\"\"\n        if k == n:\n            return f(x)\n        elif n > 1:\n            return apply_on\n    if n == 0:\n        return x\n\n\n\n    total = 0\n    for _ in range(1, n+1):\n        total += apply_on(x)\n\n\n\n    return repeated(f, n - 1)\n\n\n\n\n    #use compose1??\n\n\n\n\n\n\n\n    def apply_on(x):\n        total = 0\n        for _ in range (n+1):\n            total += f(x)\n\n        if n == 0:\n            return x\n        else:\n            return \n\n\n        total = x\n        while n > 0:\n            total = to\n            n -= 1\n\n        return total\n\n    return apply_on\n\n\n    #returns another func that will compute f(f(...) ##apply f a total n times\n    \"\"\"\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def apply_on(x):\n        if n == 0:\n            return x\n        k = n\n        to_act_on = x\n        while k > 0:\n             to_act_on = f(to_act_on)\n             k -= 1\n        return to_act_on \n    return apply_on\n        ##try while\n        ##compose1(f, g)\n\n\n        ##try putting compose1 in here\n    \"\"\"\n        if k == n:\n            return f(x)\n        elif n > 1:\n            return apply_on\n    if n == 0:\n        return x\n\n\n\n    total = 0\n    for _ in range(1, n+1):\n        total += apply_on(x)\n\n\n\n    return repeated(f, n - 1)\n\n\n\n\n    #use compose1??\n\n\n\n\n\n\n\n    def apply_on(x):\n        total = 0\n        for _ in range (n+1):\n            total += f(x)\n\n        if n == 0:\n            return x\n        else:\n            return \n\n\n        total = x\n        while n > 0:\n            total = to\n            n -= 1\n\n        return total\n\n    return apply_on\n\n\n    #returns another func that will compute f(f(...) ##apply f a total n times\n    \"\"\"\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":79,"studentId":0,"date":null,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n    g=identity     =>           \r\n                   =>           \r\n                   <=           \r\n        g=identity <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==0:\n        return identity\n    \n    for k in range(n):\n        g=identity\n        g=compose1(f,g)\n    return g\n        \n    \n\n\n\n\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==0:\n        return identity\n    g=identity\n    for k in range(n):\n        \n        g=compose1(f,g)\n    return g\n        \n    \n\n\n\n\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","6","","# Error: expected","#     8","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":80,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        if n==0:     =>           \r\n            return x =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def returner(x):\r\n        if n<=1:\r\n            return f(x)\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return returner\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def returner(x):\n        if n==0:\n            return x\n        if n<=1:\n            return f(x)\n        else:\n            return f(repeated(f,n-1)(x))\n    return returner\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def returner(x):\r\n        if n<=1:\r\n            return f(x)\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return returner\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":81,"studentId":0,"date":null,"diff":"\r\nInputObject                                        SideIndicator\r\n-----------                                        -------------\r\n    if n==0:                                       =>           \r\n        return identity                            =>           \r\n    elif n==1:                                     =>           \r\n        return f                                   =>           \r\n        i = 1                                      =>           \r\n        composition = f                            =>           \r\n        while i < n:                               =>           \r\n            i+=1                                   =>           \r\n            composition = compose1(composition, f) =>           \r\n        return composition                         =>           \r\n    else:                                          =>           \r\n    i = 0                                          <=           \r\n    composition = f                                <=           \r\n    while i < n:                                   <=           \r\n        i+=1                                       <=           \r\n        composition = compose1(composition, f)     <=           \r\n    return composition                             <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    i = 0\r\n    composition = f\r\n    while i<n:\r\n        i += 1\r\n        composition = compose1(composition, f)\r\n    return composition\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        i = 1\n        composition = f\n        while i < n:\n            i+=1\n            composition = compose1(composition, f)\n        return composition\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    i = 0\r\n    composition = identity\r\n    while i<n:\r\n        i += 1\r\n        composition = compose1(composition, f)\r\n    return composition\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":82,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n    def repeated_function(x):                  =>           \r\n        summed = 1                             =>           \r\n        while summed <= n:                     =>           \r\n            x = f(x)                           =>           \r\n            summed += 1                        =>           \r\n        return x                               =>           \r\n    return repeated_function                   =>           \r\n        return f                               <=           \r\n        return compose1(f, repeated(f, n - 1)) <=           \r\n    else:                                      <=           \r\n    if n == 1:                                 <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeated_function(x):\n        summed = 1\n        while summed <= n:\n            x = f(x)\n            summed += 1\n        return x\n    return repeated_function\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":83,"studentId":0,"date":null,"diff":"\r\nInputObject                                                SideIndicator\r\n-----------                                                -------------\r\n    if n==0:                                               =>           \r\n        return lambda x: x                                 =>           \r\n        return f if n==1 else compose1(repeated(f,n-1), f) =>           \r\n    else:                                                  =>           \r\n    return f if n==1 else compose1(repeated(f,n-1), f)     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    return f if n==1 else compose1(repeated(f,n-1), f)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n        return lambda x: x\n    else:\n        return f if n==1 else compose1(repeated(f,n-1), f)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 154, in repeated","    return f if n==1 else compose1(repeated(f,n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 154, in repeated","    return f if n==1 else compose1(repeated(f,n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 154, in repeated","    return f if n==1 else compose1(repeated(f,n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 154, in repeated","    return f if n==1 else compose1(repeated(f,n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 154, in repeated","    return f if n==1 else compose1(repeated(f,n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 154, in repeated","    return f if n==1 else compose1(repeated(f,n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 154, in repeated","    return f if n==1 else compose1(repeated(f,n-1), f)","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":84,"studentId":0,"date":null,"diff":"\r\nInputObject                        SideIndicator\r\n-----------                        -------------\r\n        counter = 0                =>           \r\n    total=0                        =>           \r\n    a=1                            =>           \r\n    if n <=3:                      =>           \r\n        return n                   =>           \r\n    def g_help(a,n):               =>           \r\n        if n >=1:                  =>           \r\n            total+=a*n             =>           \r\n            return g_help(a+1,n-1) =>           \r\n        return total               =>           \r\n    return g_help                  =>           \r\n                                   =>           \r\n    counter = 0                    <=           \r\n    \"*** YOUR CODE HERE ***\"       <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    counter = 0\n    def repeat_help(x):\n        while counter < n:\n            x = f(x)\n            counter += 1\n        return x\n    return repeat_help\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeat_help(x):\n        counter = 0\n        while counter < n:\n            x = f(x)\n            counter += 1\n        return x\n    return repeat_help\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in repeat_help","    while counter < n:","UnboundLocalError: local variable 'counter' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":85,"studentId":0,"date":null,"diff":"\r\nInputObject                                         SideIndicator\r\n-----------                                         -------------\r\n            return f(repeated(f, n-1)(x))           =>           \r\n            return compose1(f, repeated(f, n-1)(x)) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeat(x):\n        if n==0:\n            return identity(x)\n        if n==1:\n            return f(x)\n        else:\n            return compose1(f, repeated(f, n-1)(x))\n    return repeat\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeat(x):\n        if n==0:\n            return identity(x)\n        if n==1:\n            return f(x)\n        else:\n            return f(repeated(f, n-1)(x))\n    return repeat\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function compose1.<locals>.h at 0x00000235C4BAAD08>","","# Error: expected","#     8","# but got","#     <function compose1.<locals>.h at 0x00000235C4BAAD08>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":86,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        return compose1(repeated(f, n-1), f) =>           \r\n    g = f                                    <=           \r\n        return compose1(repeated(f,f), n-1)  <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    g = f\n    if n == 0:\n        return identity\n    else:\n        return compose1(repeated(f,f), n-1)\n        \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    else:\n        return compose1(repeated(f, n-1), f)\n        \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in repeated","    return compose1(repeated(f,f), n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in repeated","    return compose1(repeated(f,f), n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in repeated","    return compose1(repeated(f,f), n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in repeated","    return compose1(repeated(f,f), n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in repeated","    return compose1(repeated(f,f), n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in repeated","    return compose1(repeated(f,f), n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in repeated","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     ","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":87,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n    if n == 0:                               =>           \r\n        return identity                      =>           \r\n        return compose1(f, repeated(f, n-1)) =>           \r\n        return g(n-1)+2*g(n-2)+3*g(n-3)      =>           \r\n    total = 0                                =>           \r\n    for k in range(1, n):                    =>           \r\n        if k <= 3:                           =>           \r\n            total += k                       =>           \r\n        else:                                =>           \r\n            total += 2*(k-1) + 3*(k-2)       =>           \r\n    return total                             =>           \r\n    if x == 0:                               <=           \r\n        return f(n)                          <=           \r\n        x -= 1                               <=           \r\n        return compose1(f, f)                <=           \r\n        return g(n-1)+g(n-2)+g(n-3)          <=           \r\n    \"*** YOUR CODE HERE ***\"                 <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if x == 0:\n        return f(n)\n    else:\n        x -= 1\n        return compose1(f, f)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 153, in repeated","    if x == 0:","UnboundLocalError: local variable 'x' referenced before assignment","","# Error: expected","#     ","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":88,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n    return accumulate(combiner, base, n, term) =>           \r\n        return identity                        =>           \r\n    #for loop                                  =>           \r\n    return ____                                <=           \r\n        return g                               <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return g\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return identity\n    if n == 1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","22","","# Error: expected","#     5","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":89,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n    return operator   =>           \r\n    return operator() <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n    \toperator = lambda x: x\n    elif n==1:\n    \toperator = f()\n    \tn=0\n    else:\n    \toperator = compose1(f,f)\n    \tn=n-2\n    while n>0:\n    \toperator = compose1(f,operator)\n    \tn-=1\n    return operator()\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n    \toperator = lambda x: x\n    elif n==1:\n    \toperator = f()\n    \tn=0\n    else:\n    \toperator = compose1(f,f)\n    \tn=n-2\n    while n>0:\n    \toperator = compose1(f,operator)\n    \tn-=1\n    return operator\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 171, in repeated","    return operator()","TypeError: h() missing 1 required positional argument: 'x'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":90,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n        return compose1(f, repeated(f, n - 1)) =>           \r\n        return f(repeated(f, n - 1))           <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n>1:\r\n        return f(repeated(f, n-1))\r\n    else:\r\n        return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    elif n > 1:\n        return compose1(f, repeated(f, n - 1))\n    else:\n        return f\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n>1:\r\n        return compose1(f, repeated(f, n-1))\r\n    else:\r\n        return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":91,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n    if n == 0:                                    =>           \r\n    return compose1(call(n-2), f)                 =>           \r\n                                                  =>           \r\n    '''if n == 0:                                 <=           \r\n    return compose1(call(n-2), f)'''              <=           \r\n    def call2(x):                                 <=           \r\n        def call3(n):                             <=           \r\n            if n < 0:                             <=           \r\n                return x                          <=           \r\n            else:                                 <=           \r\n                return compose1(call3(n-1), f)(x) <=           \r\n        return call3(n)                           <=           \r\n    return call2                                  <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    '''if n == 0:\n        return lambda x: x\n    def call(n):\n        def call1(x):\n            if n < 0:\n                return x\n            else:\n                return compose1(call(n-1), f)(x)\n        return call1\n    return compose1(call(n-2), f)'''\n\n    def call2(x):\n        def call3(n):\n            if n < 0:\n                return x\n            else:\n                return compose1(call3(n-1), f)(x)\n        return call3(n)\n    return call2\n      \n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    def call(n):\n        def call1(x):\n            if n < 0:\n                return x\n            else:\n                return compose1(call(n-1), f)(x)\n        return call1\n    return compose1(call(n-2), f)\n\n\n      \n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 172, in call2","    return call3(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 171, in call3","    return compose1(call3(n-1), f)(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 171, in call3","    return compose1(call3(n-1), f)(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 171, in call3","    return compose1(call3(n-1), f)(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 171, in call3","    return compose1(call3(n-1), f)(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 182, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":92,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        return identity    =>           \r\n        return identity(n) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity(n)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n - 1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity(identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":93,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        return identity   =>           \r\n        return identity() <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity()\r\n    else:\r\n        q = f\r\n        while n>1:\r\n            q = compose1(f, q)\r\n            n -= 1\r\n        return q\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n        return identity\n\n    else:\n        q = f\n        while n>1:\n           q = compose1(f, q)\n           n-=1\n        return q\n\n    \"*** YOUR CODE HERE ***\"\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==0:\r\n        return identity()\r\n    else:\r\n        q = f\r\n        while n>1:\r\n            q = compose1(f, q)\r\n            n -= 1\r\n        return q\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 178, in repeated","    return identity()","TypeError: identity() missing 1 required positional argument: 'x'","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":94,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        return compose1(f,repeated(f, n-1)) =>           \r\n        return compose1(f,repeated(f, -1))  <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n        return lambda x: identity(x)\n    else:\n        return compose1(f,repeated(f, -1))\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n        return lambda x: identity(x)\n    else:\n        return compose1(f,repeated(f, n-1))\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in repeated","    return compose1(f,repeated(f, -1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in repeated","    return compose1(f,repeated(f, -1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in repeated","    return compose1(f,repeated(f, -1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in repeated","    return compose1(f,repeated(f, -1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in repeated","    return compose1(f,repeated(f, -1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in repeated","    return compose1(f,repeated(f, -1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 158, in repeated","    if n==0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     ","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":95,"studentId":0,"date":null,"diff":"\r\nInputObject                                             SideIndicator\r\n-----------                                             -------------\r\n            return f(repeated(f, n - 1)(x))             =>           \r\n            return compose1(repeated, helper)(n - 1)    <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x):\n        if n == 0:\n            return x\n        else:\n            return compose1(repeated, helper)(n - 1)   \n    return helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x):\n        if n == 0:\n            return x\n        else:\n            return f(repeated(f, n - 1)(x))   \n    return helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 171, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in helper","    return compose1(repeated, helper)(n - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 171, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in helper","    return compose1(repeated, helper)(n - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 171, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in helper","    return compose1(repeated, helper)(n - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 171, in h","    return f(g(x))","RecursionError: maximum recursion depth exceeded","","# Error: expected","#     8","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":96,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        return answer =>           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def innerFunction(x):\n        k = 1\n        answer = x\n        while k <= n:\n            answer = f(answer)\n            k += 1\n\n    return innerFunction\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def innerFunction(x):\n        k = 1\n        answer = x\n        while k <= n:\n            answer = f(answer)\n            k += 1\n        return answer\n\n    return innerFunction\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","","# Error: expected","#     8","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":97,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        u = n        =>           \r\n        if u == 0:   =>           \r\n        while u > 1: =>           \r\n            u = u -1 =>           \r\n        if n == 0:   <=           \r\n        while n > 1: <=           \r\n            n = n -1 <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n   \n    \n    def compose(g):\n        if n == 0:\n            return g\n        t = f(g)\n        while n > 1:\n            t = f(t)\n            n = n -1\n        return t\n    return compose\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n   \n    \n    def compose(g):\n        u = n\n        if u == 0:\n            return g\n        t = f(g)\n        while u > 1:\n            t = f(t)\n            u = u -1\n        return t\n    return compose\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 174, in compose","    if n == 0:","UnboundLocalError: local variable 'n' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":98,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        k = n             =>           \r\n        if k == 0 :       =>           \r\n            while k != 0: =>           \r\n                k -= 1    =>           \r\n        # k = n           <=           \r\n        if n == 0 :       <=           \r\n            while n != 0: <=           \r\n                n -= 1    <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    total = 0\n    def helper(x):\n        # k = n\n        if n == 0 :\n            return x\n        else:\n            while n != 0:\n                total = f(x)\n                x = total\n                n -= 1\n            return total\n    return helper\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    total = 0\n    def helper(x):\n        k = n\n        if k == 0 :\n            return x\n        else:\n            while k != 0:\n                total = f(x)\n                x = total\n                k -= 1\n            return total\n    return helper\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in helper","    if n == 0 :","UnboundLocalError: local variable 'n' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":99,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        if i == 0:   =>           \r\n            return x =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def a(x):\r\n        a = x\r\n        b = 0\r\n        i = n\r\n        while i>0:\r\n            b = f(a)\r\n            a = b\r\n            i = i-1\r\n        return b\r\n    return a\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    def a(x):\r\n        a = x\r\n        b = 0\r\n        while n>0:\r\n            b = f(a)\r\n            a = b\r\n            n = n-1\r\n        return b\r\n    return a","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    def a(x):\n        a = x\n        b = 0\n        i = n\n        if i == 0:\n            return x\n        while i > 0:\n            b = f(a)\n            a = b\n            i = i - 1\n        return b\n    return a\n\n\n    def compose1(f, g):\n        \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n        def h(x):\n            return f(g(x))\n        return h\n    \n    # def a(n):\n    #     if n > 0:\n    #         n = n - 1\n    #         return f(n)\n    #     else:\n    #         return n\n\n\n    # return compose1(f, a)\n\n    def a(x):\n        a = x\n        b = 0\n        while n > 0:\n            b = f(a)\n            a = b\n            n = n - 1\n        return b\n    return a\n\n\n\n\n    # while n > 0:\n    #     n = n - 1\n    #     lambda f: compose1(compose1,f)\n    #     return \n\n\n\n\n\n        # if n > 0:\n        #     n = n -1\n        # else:\n        #     a == compose1(f,f)\n        #     compose1(f, compose1(f, f))\n\n\n\n\n\n # if n == 0:\n            #     return f(f(x))\n            # else:\n            #     n = n -1\n            #     return f(compose1(x))\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def a(x):\r\n        a = x\r\n        b = 0\r\n        i = n\r\n        while i>0:\r\n            b = f(a)\r\n            a = b\r\n            i = i-1\r\n        return b\r\n    return a\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    def a(x):\r\n        a = x\r\n        b = 0\r\n        while n>0:\r\n            b = f(a)\r\n            a = b\r\n            n = n-1\r\n        return b\r\n    return a","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","0","","# Error: expected","#     5","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":100,"studentId":0,"date":null,"diff":"\r\nInputObject                      SideIndicator\r\n-----------                      -------------\r\n    func = identity              =>           \r\n    while n > 0:                 =>           \r\n        func = compose1(func, f) =>           \r\n        n -= 1                   =>           \r\n    return func                  =>           \r\n    func = identity              =>           \r\n    def final(x):                <=           \r\n        if x == 0:               <=           \r\n            return identity      <=           \r\n        else:                    <=           \r\n            return f(final(x-1)) <=           \r\n    return final(n)              <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def final(x):\n        if x == 0:\n            return identity\n        else:\n            return f(final(x-1))\n    return final(n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    func = identity\n    while n > 0:\n        func = compose1(func, f)\n        n -= 1\n    return func\n    func = identity\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 154, in repeated","    return final(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 153, in final","    return f(final(x-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 153, in final","    return f(final(x-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 153, in final","    return f(final(x-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":101,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    if(n==0):           =>           \r\n        return identity =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    for i in range(1, n):\r\n        f = compose1(g, f)\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    g=f\n    if(n==0):\n        return identity\n    for i in range(1,n):\n        f=compose1(g,f)\n    return f\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    for i in range(1, n):\r\n        f = compose1(g, f)\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":102,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        return lambda x: x =>           \r\n        return lambda x: n <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def compose(g, h):\r\n        def func(x):\r\n            return g(h(x))\r\n        return func\r\n    if n==0:\r\n        return lambda x: n\r\n    elif n==1:\r\n        return f\r\n    elif n==2:\r\n        return compose(f, f)\r\n    else:\r\n        return compose(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def compose(g, h):\n        def func(x):\n            return g(h(x))\n        return  func\n    if n == 0:\n        return lambda x: x\n    elif n == 1:\n        return f\n    elif n == 2:\n        return compose(f, f)\n    else:\n        return compose(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose(g, h):\r\n        def func(x):\r\n            return g(h(x))\r\n        return func\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return f\r\n    elif n==2:\r\n        return compose(f, f)\r\n    else:\r\n        return compose(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","0","","# Error: expected","#     5","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":103,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n    while i<n-1: =>           \r\n    while i<=n:  <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    i = 0\n    func = f\n    while i<=n:\n        func = compose1(f, func)\n        i+=1\n    return func\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    i = 0\n    func = f\n    while i<n-1:\n        func = compose1(f, func)\n        i+=1\n    return func\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","10","","# Error: expected","#     8","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":104,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n        k = 0                  =>           \r\n        while k < n:           =>           \r\n            x, k = f(x), k + 1 =>           \r\n        return x               =>           \r\n    def h(x):                  =>           \r\n    return h                   =>           \r\n    g = f                      <=           \r\n    if n == 0:                 <=           \r\n        g = compose1(f,0)      <=           \r\n    while n > 1:               <=           \r\n        g = compose1(f, g)     <=           \r\n        n = n - 1              <=           \r\n    return g                   <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    if n==0:\r\n        g = compose1(f, 0)\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        k = 0\n        while k < n:\n            x, k = f(x), k + 1\n        return x\n    return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    if n==0:\r\n        g = compose1(f, 0)\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 185, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":105,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n    x = lambda g: g =>           \r\n    if (n == 0):    =>           \r\n        return x    =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if (n>1):\r\n        return compose1(repeated(f, n-1), f)\r\n    else:\r\n        return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    x = lambda g: g\n    if (n == 0):\n        return x\n    if (n > 1):\n        return compose1(repeated(f, n-1), f)\n    else:\n        return f\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if (n>1):\r\n        return compose1(repeated(f, n-1), f)\r\n    else:\r\n        return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":106,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        return lambda x: x =>           \r\n        return function    <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    function = f\r\n    if n==0:\r\n        return function\r\n    while n>1:\r\n        function, n = compose1(function, f), n-1\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)    \n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    function = f\n    if n == 0:\n        return lambda x: x\n    while n > 1:\n        function, n = compose1(function, f), n - 1\n    return function\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    function = f\r\n    if n==0:\r\n        return identity\r\n    while n>1:\r\n        function, n = compose1(function, f), n-1\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)    ","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":107,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n    if(n == 0):      =>           \r\n        z = identity =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    z = f\r\n    while n>1:\r\n        z = compose1(f, z)\r\n        n -= 1\r\n    def compute(x):\r\n        return z(x)\r\n    return compute\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)            # increment(increment(increment(5)))\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    z = f\n    while n > 1:\n        z = compose1(f, z)\n        n -= 1\n\n    if(n == 0):\n        z = identity\n\n    def compute(x):\n        return z(x)\n\n        \"\"\" \n        if n == 1:\n            return x   \n        elif n == 1:\n            return f(x)\n        elif n == 2:\n            return f(f(x))\n        elif n == 3 :\n            return f(f(f(x)))\n        elif n == 4:\n            return f(f(f(f(x))))\n        elif n == 5:\n            return f(f(f(f(f(x)))))\n        \"\"\"\n    return compute\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    z = f\r\n    while n>1:\r\n        z = compose1(f, z)\r\n        n -= 1\r\n    def compute(x):\r\n        return z(x)\r\n    return compute\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)            # increment(increment(increment(5)))","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":108,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        total = identity =>           \r\n    return total         =>           \r\n        return n         <=           \r\n        return total     <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    i = 1\r\n    total = f\r\n    if n==0:\r\n        return n\r\n    else:\r\n        while i<n:\r\n            total = compose1(total, f)\r\n            i += 1\r\n        return total\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    i = 1\n    total = f\n    if n == 0:\n        total = identity\n    else:\n        while i < n:\n            total = compose1(total,f)\n            i+=1\n    return total\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    i = 1\r\n    total = f\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        while i<n:\r\n            total = compose1(total, f)\r\n            i += 1\r\n        return total\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":109,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        j = n        =>           \r\n        while j > 0: =>           \r\n            j -= 1   =>           \r\n        n = x        <=           \r\n        while n > 1: <=           \r\n            n -= 1   <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeat(x):\n        n = x\n        while n > 1:\n            x = f(x)\n            n -= 1\n        return x\n    return repeat\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeat(x):\n        j = n\n        while j > 0:\n            x = f(x)\n            j -= 1\n        return x\n    return repeat\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":110,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n            return value  =>           \r\n            return result <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def func(value):\r\n        result = f(value)\r\n        i = 1\r\n        if n==0:\r\n            return result\r\n        while i<n:\r\n            result = f(result)\r\n            i += 1\r\n        return result\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def func(value):\n        result = f(value)\n        i = 1\n        if n == 0:\n            return value\n        while i < n:\n            result = f(result)\n            i += 1\n        return result\n    return func\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def func(value):\r\n        result = f(value)\r\n        i = 1\r\n        if n==0:\r\n            return result\r\n        while i<n:\r\n            result = f(result)\r\n            i += 1\r\n        return result\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":111,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n        if k == 0:             =>           \r\n            return lambda x: x =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def helper(k):\r\n        if k==1:\r\n            return f\r\n        else:\r\n            return compose1(repeated(f, n-1), f)\r\n        return helper(n-1)\r\n    return helper(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(k):\n        if k == 0:\n            return lambda x: x\n        if k == 1:\n            return f\n        else:\n            return compose1(repeated(f, n-1), f)\n        return helper(n-1)\n    return helper(n)\n    #def helper(x):\n    #    counter = 1\n    #    while counter <= n:\n    #        x = f(x)\n    #        counter += 1\n    #    return x\n    #return helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def helper(k):\r\n        if k==1:\r\n            return f\r\n        else:\r\n            return compose1(repeated(f, n-1), f)\r\n        return helper(n-1)\r\n    return helper(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 170, in helper","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 172, in repeated","    return helper(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 170, in helper","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 172, in repeated","    return helper(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 170, in helper","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 172, in repeated","    return helper(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 167, in helper","    if k == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":112,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n        return          <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return \r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return identity\n    elif n == 1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==0:\r\n        return \r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":113,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n            i+=1 =>           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    def helpie(x):\n        value = x\n        i = 1\n        while i <= n:\n            value = f(value)\n        return value\n    return helpie\n\n    # if n == 0:\n    #     return n\n    # else:\n    #     return f(n-1)\n\n    # do f n times to x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    def helpie(x):\n        value = x\n        i = 1\n        while i <= n:\n            value = f(value)\n            i+=1\n        return value\n    return helpie\n\n    # if n == 0:\n    #     return n\n    # else:\n    #     return f(n-1)\n\n    # do f n times to x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     8","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":114,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n        if n == 0:     =>           \r\n            return num =>           \r\n    if n == 0:         <=           \r\n        return 0       <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return 0\r\n    def compose2(num):\r\n        result = f(num)\r\n        for x in range(1, n):\r\n            result = f(result)\r\n        return result\r\n    return compose2\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def compose2(num):\n        if n == 0:\n            return num\n        result = f(num)\n        for x in range(1, n):\n            result = f(result)\n        return result\n    return compose2\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def compose2(num):\r\n        result = f(num)\r\n        for x in range(1, n):\r\n            result = f(result)\r\n        return result\r\n    return compose2\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":115,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n            return x                  =>           \r\n            temp = x                  =>           \r\n            for i in range(n):        =>           \r\n                temp = f(temp)        =>           \r\n            return temp               =>           \r\n    return h                          =>           \r\n            return(x)                 <=           \r\n            return f(repeated(f,n-1)) <=           \r\n    return h                          <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        if n==0:\n            return(x)\n        else:\n            return f(repeated(f,n-1))\n    return h\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        if n==0:\n            return x\n        else:\n            temp = x\n            for i in range(n):\n                temp = f(temp)\n            return temp\n    return h    \n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 173, in h","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":116,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n    def same(x):    =>           \r\n        return x    =>           \r\n        return same =>           \r\n        return 1    <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return 1\r\n    if n<=1:\r\n        return f\r\n    return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def same(x):\n        return x\n    if n == 0:\n        return same\n    if n <= 1:\n        return f\n    return compose1(repeated(f, n-1), f)\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n<=1:\r\n        return f\r\n    return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":117,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n    if n==0:         =>           \r\n        def f(x):    =>           \r\n            return x =>           \r\n                     <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    result, i = f, 1\r\n    while i<n:\r\n        result = compose1(f, result)\r\n        i += 1\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n        def f(x):\n            return x\n    result, i = f, 1\n    while i< n:\n        result = compose1(f , result) \n        i+=1\n    return result\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    result, i = f, 1\r\n    while i<n:\r\n        result = compose1(f, result)\r\n        i += 1\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":118,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        if n == 0:                          =>           \r\n            return repeated(f, n - 1)(f(x)) =>           \r\n    i = n                                   <=           \r\n        if i == 0:                          <=           \r\n            i -= 1                          <=           \r\n            return h(f(x))                  <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = n\n    def h(x):\n        if i == 0:\n            return x\n        else:\n            i -= 1\n            return h(f(x))\n    return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def h(x):\n        if n == 0:\n            return x\n        else:\n            return repeated(f, n - 1)(f(x))\n    return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 164, in h","    if i == 0:","UnboundLocalError: local variable 'i' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":119,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n        return compose1(identity, identity)    =>           \r\n        return compose1(f, repeated(f, n - 1)) =>           \r\n        return                                 <=           \r\n        return f(repeated(f, n - 1))           <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0: \n        return \n    else: \n        return f(repeated(f, n - 1))\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0: \n        return compose1(identity, identity)\n    else: \n        return compose1(f, repeated(f, n - 1))\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":120,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n        return base =>           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def outer(base):\n        x = n\n        while (x > 0):\n            base = f(base)\n            x -= 1\n    return outer\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def outer(base):\n        x = n\n        while (x > 0):\n            base = f(base)\n            x -= 1\n        return base\n    return outer\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","","# Error: expected","#     8","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":121,"studentId":0,"date":null,"diff":"\r\nInputObject                                              SideIndicator\r\n-----------                                              -------------\r\n        return lambda x: f(repeated(f, n-1)(x))          =>           \r\n        return repeated(compose1(f, compose1(f,f)), n-2) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    elif n == 1:\n        return f\n    else:\n        return repeated(compose1(f, compose1(f,f)), n-2)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    elif n == 1:\n        return f\n    else:\n        return lambda x: f(repeated(f, n-1)(x))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","19683","","# Error: expected","#     243","# but got","#     19683","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":122,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n            x = f(x)              =>           \r\n        return x                  =>           \r\n            f = f(lambda y: f(x)) <=           \r\n        return f                  <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def new_func(x):\n        for _ in range(n):\n            f = f(lambda y: f(x))\n        return f\n    return new_func\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def new_func(x):\n        for _ in range(n):\n            x = f(x)\n        return x\n    return new_func\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 173, in new_func","    f = f(lambda y: f(x))","UnboundLocalError: local variable 'f' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":123,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n        return lambda x : x  =>           \r\n        return lambda f : x  <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda f: x\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x : x \n    if n == 1:\n        return f \n    else:\n        return compose1(f,repeated(f,n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==0:\r\n        return lambda f: x\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in <lambda>","    return lambda f : x","NameError: name 'x' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":124,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                         SideIndicator\r\n-----------                                                                         -------------\r\n            return lambda n: n # I have to return a function here: 0 iterations = n =>           \r\n            return f # I have to return a function here: 0 iterations = n           <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def many_composes(n):\r\n        if n==0:\r\n            return f\r\n        if n==1:\r\n            return f\r\n        if n==2:\r\n            return compose1(f, f)\r\n        else:\r\n            return compose1(f, many_composes(n-1))\r\n    return many_composes(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def many_composes(n):\n        if n == 0: \n            return lambda n: n # I have to return a function here: 0 iterations = n\n        if n == 1:\n            return f\n        if n == 2: \n            return compose1(f, f)\n        else: \n            return compose1(f, many_composes(n - 1))\n    return many_composes(n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def many_composes(n):\r\n        if n==0:\r\n            return identity\r\n        if n==1:\r\n            return f\r\n        if n==2:\r\n            return compose1(f, f)\r\n        else:\r\n            return compose1(f, many_composes(n-1))\r\n    return many_composes(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":125,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        return lambda x: x =>           \r\n        return             <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    g = n-1\r\n    if n==0:\r\n        return \r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, g))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    g = n-1\n    if n == 0:\n        return lambda x: x\n    elif n == 1:\n        return f\n    else:\n        return compose1(f, repeated(f, g))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n\n    # ","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = n-1\r\n    if n==0:\r\n        return \r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, g))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":126,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    if n == 0: =>           \r\n    if n == 1: <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return (lambda x: x)\r\n    else:\r\n        return (lambda x: f(repeated(f, n-1)(x)))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return (lambda x: x)\n    else:\n        return (lambda x: f (repeated(f,n-1)(x)))\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return (lambda x: x)\r\n    else:\r\n        return (lambda x: f(repeated(f, n-1)(x)))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":127,"studentId":0,"date":null,"diff":"\r\nInputObject                                      SideIndicator\r\n-----------                                      -------------\r\n        return compose1(f, repeated(f, n-1))     =>           \r\n        return repeated(compose1(f, f) , n - 1)  <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return repeated(compose1(f, f), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return identity\n    elif n == 1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1)) \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":128,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n        i = n # Or specify a nonlocal =>           \r\n        while i > 0:                  =>           \r\n            i -= 1                    =>           \r\n    return nth                        =>           \r\n        x = n # Or specify a nonlocal <=           \r\n        while x > 0:                  <=           \r\n            x -= 1                    <=           \r\n    return nth                        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def nth(x):\r\n        x = n\r\n        while x>0:\r\n            x = f(x)\r\n            x -= 1\r\n        return x\r\n    return nth\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def nth(x):\n        i = n # Or specify a nonlocal\n        while i > 0:\n            x = f(x)\n            i -= 1\n        return x\n    return nth \n   \n     \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def nth(x):\r\n        j = n\r\n        while j>0:\r\n            x = f(x)\r\n            j -= 1\r\n        return x\r\n    return nth\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-j)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-j)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-j)), Selected(\\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     8","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":129,"studentId":0,"date":null,"diff":"\r\nInputObject                              SideIndicator\r\n-----------                              -------------\r\n    def repeated_func(x):                =>           \r\n        if  n == 0:                      =>           \r\n            return repeated(f,n-1)(f(x)) =>           \r\n                                         =>           \r\n    def repeated_func(x):                <=           \r\n        i = n                            <=           \r\n        if  i == 0:                      <=           \r\n            i -= 1                       <=           \r\n            return repeated_func(f(x))   <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \n    def repeated_func(x): \n        i = n\n        if  i == 0:\n            return x \n        else: \n            i -= 1 \n            return repeated_func(f(x))\n    return repeated_func\n\n    #     i = n-1 \n    #     x = f(x)\n    #     while i>0: \n    #         x = f(x)\n    #         i -= 1\n    #     return x \n    # return repeated_func\n\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \n    def repeated_func(x):\n        if  n == 0:\n            return x \n        else: \n\n            return repeated(f,n-1)(f(x))\n    return repeated_func\n\n    #     i = n-1 \n    #     x = f(x)\n    #     while i>0: \n    #         x = f(x)\n    #         i -= 1\n    #     return x \n    # return repeated_func\n\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 193, in repeated_func","    return repeated_func(f(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 193, in repeated_func","    return repeated_func(f(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 193, in repeated_func","    return repeated_func(f(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 193, in repeated_func","    return repeated_func(f(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 193, in repeated_func","    return repeated_func(f(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 193, in repeated_func","    return repeated_func(f(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 189, in repeated_func","    if  i == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     8","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":130,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n    if n == 0: return identity =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    a = f\r\n    for x in range(1, n):\r\n        a = compose1(f, a)\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    a = f\n    if n == 0: return identity\n    for x in range(1, n):\n        a = compose1(f, a)\n    return a\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    a = f\r\n    for x in range(1, n):\r\n        a = compose1(f, a)\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":131,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n    def helper(x, i=0):           =>           \r\n            return x              =>           \r\n        return f(helper(x, i+1))  =>           \r\n    def helper(x, i=1):           <=           \r\n            return f              <=           \r\n        else:                     <=           \r\n            return helper(x, i+1) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n     \n    def helper(x, i=1):\n        if i == n:\n            return f\n        else:\n            return helper(x, i+1)\n    return helper\n\ndef repeated_looped(f,n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated_looped(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated_looped(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated_looped(square, 2)(5) # square(square(5))\n    625\n    >>> repeated_looped(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated_looped(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def looped(x):\n        for i in range(0,n):\n            x = f(x)\n        return x\n\n    return looped\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n\n    return lambda x: f(g(x))\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n     \n    def helper(x, i=0):\n        if i == n:\n            return x\n        return f(helper(x, i+1))\n    return helper\n\ndef repeated_looped(f,n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated_looped(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated_looped(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated_looped(square, 2)(5) # square(square(5))\n    625\n    >>> repeated_looped(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated_looped(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def looped(x):\n        for i in range(0,n):\n            x = f(x)\n        return x\n\n    return looped\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n\n    return lambda x: f(g(x))\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function increment at 0x000001BFD9C57F28>","","# Error: expected","#     8","# but got","#     <function increment at 0x000001BFD9C57F28>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":132,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n        return          <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return \r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    elif n == 1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==0:\r\n        return \r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":133,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n        return b =>           \r\n        return c <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n#    if n == 0:\n#        def zero_helper(n):\n#            def zero_compose(q):\n#                return q\n#            return zero_compose\n#        return zero_helper\n#    else:\n#        def repeat_helper(x):\n#            def compose(i):\n#                if x == 1:\n#                    return f(i)\n#                else:\n#                    return f(repeat_helper(x - 1))\n#            return compose\n#        return repeat_helper(n)\n\n    def zero_helper(a):\n        if n == 0:\n            return a\n        b = f(a)\n        c = 1\n        while c < n:\n            b = f(b)\n            c = c + 1\n        return c\n    return zero_helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n#    if n == 0:\n#        def zero_helper(n):\n#            def zero_compose(q):\n#                return q\n#            return zero_compose\n#        return zero_helper\n#    else:\n#        def repeat_helper(x):\n#            def compose(i):\n#                if x == 1:\n#                    return f(i)\n#                else:\n#                    return f(repeat_helper(x - 1))\n#            return compose\n#        return repeat_helper(n)\n\n    def zero_helper(a):\n        if n == 0:\n            return a\n        b = f(a)\n        c = 1\n        while c < n:\n            b = f(b)\n            c = c + 1\n        return b\n    return zero_helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","3","","# Error: expected","#     8","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":134,"studentId":0,"date":null,"diff":"\r\nInputObject                                                         SideIndicator\r\n-----------                                                         -------------\r\n        return accumulate(combiner, base, lambda x,y: odd(n), term) =>           \r\n        if n == 1 :                                                 =>           \r\n        if n == 0 :                                                 =>           \r\n            return arg                                              =>           \r\n        return accumulate(combiner, base, n, term)                  <=           \r\n        if n == 1:                                                  <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def wrapper(arg):\r\n        if n==1:\r\n            return f(arg)\r\n        else:\r\n            return f(repeated(f, n-1)(arg))\r\n    return wrapper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def wrapper(arg):\n        if n == 1 :\n            return f(arg) \n        if n == 0 :\n            return arg\n        else :\n            return f(repeated(f, n - 1)(arg))\n    return wrapper\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def wrapper(arg):\r\n        if n==1:\r\n            return f(arg)\r\n        else:\r\n            return f(repeated(f, n-1)(arg))\r\n    return wrapper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 195, in wrapper","    return f(repeated(f, n - 1)(arg))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 195, in wrapper","    return f(repeated(f, n - 1)(arg))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 195, in wrapper","    return f(repeated(f, n - 1)(arg))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 195, in wrapper","    return f(repeated(f, n - 1)(arg))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 195, in wrapper","    return f(repeated(f, n - 1)(arg))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 195, in wrapper","    return f(repeated(f, n - 1)(arg))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 192, in wrapper","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":135,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n     return (lambda x: f (repeated(f, n-1)(x))) =>           \r\n     return (lambda x: f (repeat(f, n-1)(x)))   <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n             return (lambda x: x)\n    else:\n     return (lambda x: f (repeat(f, n-1)(x)))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n             return (lambda x: x)\n    else:\n     return (lambda x: f (repeated(f, n-1)(x)))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in <lambda>","    return (lambda x: f (repeat(f, n-1)(x)))","NameError: name 'repeat' is not defined","","# Error: expected","#     8","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":136,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n            return (compose1(f,repeated(f,n)))    =>           \r\n            return (compose1(f,repeated(f,n)), n) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    else:\n        while n > 1:\n            n -= 1\n            return (compose1(f,repeated(f,n)), n)\n        return f\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    else:\n        while n > 1:\n            n -= 1\n            return (compose1(f,repeated(f,n)))\n        return f\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'tuple' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":137,"studentId":0,"date":null,"diff":"\r\nInputObject                                                          SideIndicator\r\n-----------                                                          -------------\r\n        return identity #THE NUMBER, BUT REPEATED RETURNS A FUNCTION =>           \r\n        return sum(n) #THE NUMBER, BUT REPEATED RETURNS A FUNCTION   <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return sum(n)\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity #THE NUMBER, BUT REPEATED RETURNS A FUNCTION\n    elif n == 1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==0:\r\n        return sum(n)\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeated","    return sum(n) #THE NUMBER, BUT REPEATED RETURNS A FUNCTION","TypeError: 'int' object is not iterable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":138,"studentId":0,"date":null,"diff":"\r\nInputObject                              SideIndicator\r\n-----------                              -------------\r\n    return compose1(f, repeated(f, n-1)) =>           \r\n    return f(repeated(f, n-1))           <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n        return identity\n    return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 151, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 151, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 151, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":139,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n    if n == 0:           =>           \r\n        return(identity) =>           \r\n                         =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def iterator(x):\r\n        if x==1:\r\n            return f\r\n        else:\r\n            return compose1(f, iterator(x-1))\r\n    return iterator(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return(identity)\n\n    def iterator(x):\n        if x==1:\n            return f\n        else: \n            return compose1(f, iterator(x-1))\n    \n    return iterator(n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def iterator(x):\r\n        if x==1:\r\n            return f\r\n        else:\r\n            return compose1(f, iterator(x-1))\r\n    return iterator(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in iterator","    return compose1(f, iterator(x-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in iterator","    return compose1(f, iterator(x-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in iterator","    return compose1(f, iterator(x-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in iterator","    return compose1(f, iterator(x-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in iterator","    return compose1(f, iterator(x-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in iterator","    return compose1(f, iterator(x-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in iterator","    if x==1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":140,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        return identity  =>           \r\n        return indentity <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    superFunction = f\r\n    def functionMaker(f, n, superFunction):\r\n        if n>1:\r\n            superFunction = compose1(f, superFunction)\r\n            n = n-1\r\n            return functionMaker(f, n, superFunction)\r\n        else:\r\n            return superFunction\r\n    if n==0:\r\n        return indentity\r\n    else:\r\n        return functionMaker(f, n, superFunction)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    superFunction=f\n    def functionMaker(f,n,superFunction):\n        if n>1:\n            superFunction=compose1(f,superFunction)\n            n=n-1\n            return functionMaker(f,n,superFunction)\n        else:\n            return superFunction\n    if n==0:\n        return identity\n    else:\n        return functionMaker(f,n,superFunction)\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    superFunction = f\r\n    def functionMaker(f, n, superFunction):\r\n        if n>1:\r\n            superFunction = compose1(f, superFunction)\r\n            n = n-1\r\n            return functionMaker(f, n, superFunction)\r\n        else:\r\n            return superFunction\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return functionMaker(f, n, superFunction)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in repeated","    return indentity","NameError: name 'indentity' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":141,"studentId":0,"date":null,"diff":"\r\nInputObject                                      SideIndicator\r\n-----------                                      -------------\r\n        k = 0                                    =>           \r\n        while k < n:                             =>           \r\n            x = f(x)                             =>           \r\n            k += 1                               =>           \r\n        return x                                 =>           \r\n        if n == 0:                               <=           \r\n            return x                             <=           \r\n        else:                                    <=           \r\n            return compose1(f, repeated(f, n-1)) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeated_helper(x):\n        if n == 0:\n            return x\n        else:\n            return compose1(f, repeated(f, n-1))\n\n    return repeated_helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeated_helper(x):\n        k = 0\n        while k < n:\n            x = f(x)\n            k += 1\n        return x\n\n    return repeated_helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function compose1.<locals>.h at 0x0000019DA34A8D90>","","# Error: expected","#     8","# but got","#     <function compose1.<locals>.h at 0x0000019DA34A8D90>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":142,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n    g = identity =>           \r\n    g = n        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    g = n\r\n    while n>0:\r\n        n = n-1\r\n        g = compose1(f, g)\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    g = identity\n    while n > 0:\n        n = n - 1\n        g = compose1(f, g)\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    g = identity\r\n    while n>0:\r\n        n = n-1\r\n        g = compose1(f, g)\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 181, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 181, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 181, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":143,"studentId":0,"date":null,"diff":"\r\nInputObject     SideIndicator\r\n-----------     -------------\r\n    counter = 0 =>           \r\n    counter = 1 <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    x = identity\r\n    counter = 1\r\n    while counter<n:\r\n        x = compose1(x, f)\r\n        counter += 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    x = identity\n    counter = 0\n    while counter < n:\n        x = compose1(x, f)\n        counter += 1\n    return x\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    x = identity\r\n    counter = 0\r\n    while counter<n:\r\n        x = compose1(x, f)\r\n        counter += 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":144,"studentId":0,"date":null,"diff":"\r\nInputObject                              SideIndicator\r\n-----------                              -------------\r\n    def apply_here(x, i=n):              =>           \r\n        if i == 0:                       =>           \r\n            return x                     =>           \r\n        elif i == 1:                     =>           \r\n            return f(x)                  =>           \r\n        else:                            =>           \r\n            return apply_here(f(x), i-1) =>           \r\n                                         =>           \r\n    def apply_here(x):                   <=           \r\n        return 5                         <=           \r\n                                         <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def apply_here(x):\n        return 5\n\n    return apply_here\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def apply_here(x, i=n):\n        if i == 0:\n            return x\n        elif i == 1:\n            return f(x)\n        else:\n            return apply_here(f(x), i-1)\n            \n    return apply_here\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":145,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n            x = f(x) =>           \r\n            x = f(i) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def nth(x):\r\n        i = n\r\n        while i>0:\r\n            x = f(i)\r\n            i -= 1\r\n        return x\r\n    return nth\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def nth(x):\n        i = n\n        while i > 0:\n            x = f(x)\n            i -= 1\n        return x\n    return nth \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def nth(x):\r\n        i = n\r\n        while i>0:\r\n            x = f(x)\r\n            i -= 1\r\n        return x\r\n    return nth\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","2","","# Error: expected","#     8","# but got","#     2","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":146,"studentId":0,"date":null,"diff":"\r\nInputObject                                         SideIndicator\r\n-----------                                         -------------\r\n            return compose1(repeated(f, n-1), f)(x) =>           \r\n            return compose1(repeated(f, n-1), f)    <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def curryme(f):\n        def currymehard(x, y):\n            def currymeharder(z):\n                return f(x, y, z)\n            return currymeharder\n        return currymehard\n    def repeated_counter(f, n, x):\n        if n == 0:\n            return x\n        elif n == 1:\n            return f(x)\n        elif n == 2:\n            return compose1(f, f)(x)\n        else:\n            return compose1(repeated(f, n-1), f)\n    curryevenharder = curryme(repeated_counter)\n    return curryevenharder(f, n)\n    #repeated_counter(f, n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def curryme(f):\n        def currymehard(x, y):\n            def currymeharder(z):\n                return f(x, y, z)\n            return currymeharder\n        return currymehard\n    def repeated_counter(f, n, x):\n        if n == 0:\n            return x\n        elif n == 1:\n            return f(x)\n        elif n == 2:\n            return compose1(f, f)(x)\n        else:\n            return compose1(repeated(f, n-1), f)(x)\n    curryevenharder = curryme(repeated_counter)\n    return curryevenharder(f, n)\n    #repeated_counter(f, n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function compose1.<locals>.h at 0x000001FD29C07F28>","","# Error: expected","#     8","# but got","#     <function compose1.<locals>.h at 0x000001FD29C07F28>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":147,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n            h = f(h) =>           \r\n        return h     =>           \r\n            s = f(h) <=           \r\n        return s     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def helper(x):\n        counter = 1\n        if n == 0:\n            return x\n        h = f(x)\n        while counter < n:\n            s = f(h)\n            counter += 1\n        return s\n    return helper\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def helper(x):\n        counter = 1\n        if n == 0:\n            return x\n        h = f(x)\n        while counter < n:\n            h = f(h)\n            counter += 1\n        return h\n    return helper\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":148,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    a = f                  =>           \r\n    if n ==0:              =>           \r\n        a = compose1( f,a) =>           \r\n    return a               =>           \r\n    k = f                  <=           \r\n    if k ==0:              <=           \r\n        k = compose1( f,k) <=           \r\n    return k               <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    k = f\r\n    if k==0:\r\n        return identity\r\n    while n>1:\r\n        k = compose1(f, k)\r\n        n -= 1\r\n    return k\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    a = f\n    if n ==0:\n        return identity\n    while n > 1:\n        a = compose1( f,a)\n        n -= 1\n    return a\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    k = f\r\n    if k==0:\r\n        return identity\r\n    while n>1:\r\n        k = compose1(f, k)\r\n        n -= 1\r\n    return k\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":149,"studentId":0,"date":null,"diff":"\r\nInputObject  SideIndicator\r\n-----------  -------------\r\n    return x =>           \r\n    return   <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    x=f\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    for i in range(n-1):\n        x=compose1(x,f)\n    return\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    x=f\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    for i in range(n-1):\n        x=compose1(x,f)\n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":150,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n    >>> repeated(square, 0)(5) =>           \r\n    >>> repeated(square, 0)()  <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # f2 = lambda x: x\n    #if n ==0:\n    #    return f2\n    #else:\n    #    while n>0:\n    #        f2= compose1(f,f2)\n    #        n -= 1\n       # return f2\n\n    if n == 0:\n        return lambda x: x\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"any\"))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)()","TypeError: <lambda>() missing 1 required positional argument: 'x'","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":151,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n        for i in range(0, n):                 =>           \r\n            base = f(base)                    =>           \r\n        return base                           =>           \r\n    if n <= 3:                                =>           \r\n        return n                              =>           \r\n        return g(n - 1) + g(n - 2) + g(n - 3) =>           \r\n    else:                                     =>           \r\n                                              =>           \r\n        if n == 1:                            <=           \r\n            return base                       <=           \r\n        else:                                 <=           \r\n            n -= 1                            <=           \r\n            return cycle(f(base))             <=           \r\n    \"*** YOUR CODE HERE ***\"                  <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def cycle(base):\n        if n == 1:\n            return base\n        else:\n            n -= 1\n            return cycle(f(base))\n    return cycle\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def cycle(base):\n        for i in range(0, n):\n            base = f(base)\n        return base\n    return cycle\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 154, in cycle","    if n == 1:","UnboundLocalError: local variable 'n' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":152,"studentId":0,"date":null,"diff":"\r\nInputObject                        SideIndicator\r\n-----------                        -------------\r\n    # Base Case: Don't do anything =>           \r\n    if n == 0:                     =>           \r\n        return lambda x: x         =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    # Base Case: Don't do anything\n    if n == 0:\n        return lambda x: x\n    g = f\n    while n > 1:\n        g = compose1(f, g)\n        n = n - 1\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":153,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n            if count == 1: =>           \r\n            if x == 1:     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeater(x):\n        count = n\n        if n == 0:\n            return x\n        while count > 0:\n            if x == 1:\n                return f(x)\n            x = compose1(f,f)(x)\n            count -=2\n        return x\n    return repeater\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeater(x):\n        count = n\n        if n == 0:\n            return x\n        while count > 0:\n            if count == 1:\n                return f(x)\n            x = compose1(f,f)(x)\n            count -=2\n        return x\n    return repeater\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":154,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n            i = 0         =>           \r\n            while i < n:  =>           \r\n                i += 1    =>           \r\n    return func           =>           \r\n    i = 0                 <=           \r\n            while i <= n: <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    i = 0\n    def func(x):\n        if n == 0: \n            return x\n        else:\n            while i <= n:\n                x = f(x)\n        return x\n\n\n    # def func(x):\n    #     if n == 0:\n    #         return x\n    #     else:  \n    #         return f(x)\n\n    # i = 1\n    # x \n    # while i <= n:\n    #     x = f(x)\n    #     i += 1\n    # return x\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def func(x):\n        if n == 0: \n            return x\n        else:\n            i = 0\n            while i < n:\n                x = f(x)\n                i += 1\n        return x\n    return func\n\n\n    # def func(x):\n    #     if n == 0:\n    #         return x\n    #     else:  \n    #         return f(x)\n\n    # i = 1\n    # x \n    # while i <= n:\n    #     x = f(x)\n    #     i += 1\n    # return x\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":155,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n    if(n==0):                                =>           \r\n        return identity                      =>           \r\n    if(n==1):                                =>           \r\n        return f                             =>           \r\n        return compose1(f, repeated(f, n-1)) =>           \r\n    else:                                    =>           \r\n    return repeated(lambda x: f(x), n-1)     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    return repeated(lambda x: f(x), n-1)\n    \ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if(n==0):\n        return identity\n    if(n==1):\n        return f \n    else:\n        return compose1(f, repeated(f, n-1))\n    \ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 153, in repeated","    return repeated(lambda x: f(x), n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 153, in repeated","    return repeated(lambda x: f(x), n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 153, in repeated","    return repeated(lambda x: f(x), n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 153, in repeated","    return repeated(lambda x: f(x), n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 153, in repeated","    return repeated(lambda x: f(x), n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 153, in repeated","    return repeated(lambda x: f(x), n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 153, in repeated","    return repeated(lambda x: f(x), n-1)","RecursionError: maximum recursion depth exceeded","","# Error: expected","#     ","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":156,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n            return compose1(f,compose_functions(x+1)) =>           \r\n            return compose1(f,g(x+1))                 <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def compose_functions(x):\n        if x == n:\n            return f\n        else:\n            return compose1(f,g(x+1))\n\n    if n == 0:\n        return identity\n    else:\n        return compose_functions(1)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def compose_functions(x):\n        if x == n:\n            return f\n        else:\n            return compose1(f,compose_functions(x+1))\n\n    if n == 0:\n        return identity\n    else:\n        return compose_functions(1)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 178, in h","    return f(g(x))","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":157,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n                     =>           \r\n        i=1          =>           \r\n        if n==0:     =>           \r\n            return x =>           \r\n    i=1              <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    i=1\n    def func(x):\n        a=1\n        while i<=n:\n            if i==1:\n                a=f(x)\n                i+=1\n            else:\n                a=f(a)\n                i+=1\n        return a\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \n    def func(x):\n        a=1\n        i=1\n        if n==0:\n            return x\n        while i<=n:\n            if i==1:\n                a=f(x)\n                i+=1\n            else:\n                a=f(a)\n                i+=1\n        return a\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in func","    while i<=n:","UnboundLocalError: local variable 'i' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":158,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n        return f        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f\r\n    i = 2\r\n    f_next = f\r\n    while i<=n:\r\n        f_next = compose1(f_next, f)\r\n        i += 1\r\n    return f_next\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    i = 2\n    f_next = f\n    while i <= n:\n        f_next = compose1(f_next, f)\n        i += 1\n    return f_next\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    i = 2\r\n    f_next = f\r\n    while i<=n:\r\n        f_next = compose1(f_next, f)\r\n        i += 1\r\n    return f_next\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":159,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n    if n == 0:           =>           \r\n        final = identity =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    final = f\r\n    while n>1:\r\n        g = final\r\n        final = compose1(f, g)\r\n        n -= 1\r\n    return final\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    final = f\n    if n == 0:\n        final = identity\n    while n > 1:\n        g = final\n        final = compose1(f, g)\n        n -= 1\n    return final\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    final = f\r\n    while n>1:\r\n        g = final\r\n        final = compose1(f, g)\r\n        n -= 1\r\n    return final\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":160,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n        return f        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    k, function = 1, f\r\n    if n==0:\r\n        return f\r\n    while k<n:\r\n        k, f = k+1, compose1(function, f)\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    k, function = 1, f\n    if n==0:\n        return identity\n    while k<n:\n        k, f = k+1, compose1(function, f)\n    return f\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    k, function = 1, f\r\n    if n==0:\r\n        return identity\r\n    while k<n:\r\n        k, f = k+1, compose1(function, f)\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":161,"studentId":0,"date":null,"diff":"\r\nInputObject   SideIndicator\r\n-----------   -------------\r\n        k = 1 =>           \r\n    k = 1     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    k = 1\n    def internal(args):\n        result = args \n        while k<=n:\n            result = f(result)\n            k+=1\n        return result\n    return internal\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def internal(args):\n        k = 1\n        result = args \n        while k<=n:\n            result = f(result)\n            k+=1\n        return result\n    return internal\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 167, in internal","    while k<=n:","UnboundLocalError: local variable 'k' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":162,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n    return compose1(f, repeated(f, n-1))              =>           \r\n    return compose1(repeated(f, n), repeated(f, n-1)) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return compose1(identity, identity)\n    return compose1(repeated(f, n), repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return compose1(identity, identity)\n    return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated","    return compose1(repeated(f, n), repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated","    return compose1(repeated(f, n), repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated","    return compose1(repeated(f, n), repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated","    return compose1(repeated(f, n), repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated","    return compose1(repeated(f, n), repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated","    return compose1(repeated(f, n), repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in repeated","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     ","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":163,"studentId":0,"date":null,"diff":"\r\nInputObject                                                  SideIndicator\r\n-----------                                                  -------------\r\ndef compose1(f, g):                                          =>           \r\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"     =>           \r\n    def h(x):                                                =>           \r\n        return f(g(x))                                       =>           \r\n    return h                                                 =>           \r\n    def compose1(f, g):                                      <=           \r\n        \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\" <=           \r\n        def h(x):                                            <=           \r\n            return f(g(x))                                   <=           \r\n        return h                                             <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    a=f\n    if n == 0:\n        return lambda y: y \n    while n>1:\n        a = compose1(f, a)\n        n = n-1\n    return a \n\n    def compose1(f, g):\n        \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n        def h(x):\n            return f(g(x))\n        return h\n\n\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    a=f\n    if n == 0:\n        return lambda y: y \n    while n>1:\n        a = compose1(f, a)\n        n = n-1\n    return a \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    a = compose1(f, a)","UnboundLocalError: local variable 'compose1' referenced before assignment","","# Error: expected","#     ","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":164,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n        return n        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return n\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f,n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":165,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n        return          <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    a = f\r\n    if n==0:\r\n        return \r\n    while n>1:\r\n        a = compose1(f, a)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    a = f\n    if n == 0:\n        return identity\n    while n > 1:\n        a = compose1(f, a)\n        n -= 1\n    return a\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    a = f\r\n    if n==0:\r\n        return \r\n    while n>1:\r\n        a = compose1(f, a)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":166,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n            return compose1(f,repeated(f,n-1))(i) =>           \r\n            return compose1(f,repeated(f,n-1))    <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def base(i):\n    \tif n==0:\n    \t\treturn i\n    \telse:\n    \t\treturn compose1(f,repeated(f,n-1))\n    return base\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def base(i):\n    \tif n==0:\n    \t\treturn i\n    \telse:\n    \t\treturn compose1(f,repeated(f,n-1))(i)\n    return base\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function compose1.<locals>.h at 0x0000017F51748D90>","","# Error: expected","#     8","# but got","#     <function compose1.<locals>.h at 0x0000017F51748D90>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":167,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n        return compose1(f,repeated(f,n-1)) =>           \r\n        t = compose1(f,f)                  <=           \r\n        return repeated(t,n-1)             <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n== 0:\n        return lambda x : x\n    else:\n        t = compose1(f,f)\n        return repeated(t,n-1)\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n== 0:\n        return lambda x : x\n    else:\n        return compose1(f,repeated(f,n-1))\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":168,"studentId":0,"date":null,"diff":"\r\nInputObject                                                      SideIndicator\r\n-----------                                                      -------------\r\n    return identity if n == 0 else compose1(f, repeated(f, n-1)) =>           \r\n    identity if n == 0 else compose1(f, repeated(f, n-1))        <=           \r\n    \"*** YOUR CODE HERE ***\"                                     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    identity if n == 0 else compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    return identity if n == 0 else compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":169,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    if n==0:            =>           \r\n        return identity =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==1:\n        return f\n    if n==0:\n        return identity\n    else:\n        return compose1(repeated(f,n-1),f)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 154, in repeated","    if n==1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":170,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n        return lambda x: x              =>           \r\n    else:                               =>           \r\n        return compose1(mul(1), mul(1)) <=           \r\n    else:                               <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    t = 2\r\n    if n==0:\r\n        return compose1(mul(1), mul(1))\r\n    else:\r\n        func = compose1(f, f)\r\n        while t<n:\r\n            func = compose1(f, func)\r\n            t += 1\r\n        return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    t = 2\n    if n == 0:\n        return lambda x: x\n    else:\n        func = compose1(f, f)\n        while t < n:\n            func = compose1(f ,func)\n            t += 1\n        return func\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    t = 2\r\n    if n==0:\r\n        return compose1(mul(1), mul(1))\r\n    else:\r\n        func = compose1(f, f)\r\n        while t<n:\r\n            func = compose1(f, func)\r\n            t += 1\r\n        return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 172, in repeated","    return compose1(mul(1), mul(1))","TypeError: op_mul expected 2 arguments, got 1","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":171,"studentId":0,"date":null,"diff":"\r\nInputObject                                        SideIndicator\r\n-----------                                        -------------\r\n        return compose1(f, repeated(f, n-1))       =>           \r\n        return compose1(f, repeated(increment, n)) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 1:\n        return f\n    elif n == 0:\n        return identity\n    else:\n        return compose1(f, repeated(increment, n))\n        \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 1:\n        return f\n    elif n == 0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\n        \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 169, in repeated","    return compose1(f, repeated(increment, n))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 169, in repeated","    return compose1(f, repeated(increment, n))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 169, in repeated","    return compose1(f, repeated(increment, n))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 169, in repeated","    return compose1(f, repeated(increment, n))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 169, in repeated","    return compose1(f, repeated(increment, n))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 169, in repeated","    return compose1(f, repeated(increment, n))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 164, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     ","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":172,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                                                   SideIndicator\r\n-----------                                                                                                                   -------------\r\n        return lambda x: x                                                                                                    =>           \r\n    g = f                                                                                                                     =>           \r\n    while n > 1:                                                                                                              =>           \r\n        g = compose1(f ,g)                                                                                                    =>           \r\n        n -= 1                                                                                                                =>           \r\n    return g                                                                                                                  =>           \r\n    return count_partitions(amount, 1)                                                                                        =>           \r\ndef count_partitions(amount, min_denomination):                                                                               =>           \r\n    if amount < 0:                                                                                                            =>           \r\n        return 0                                                                                                              =>           \r\n    elif amount == 0:                                                                                                         =>           \r\n        return 1                                                                                                              =>           \r\n    elif min_denomination > amount:                                                                                           =>           \r\n        return 0                                                                                                              =>           \r\n    else:                                                                                                                     =>           \r\n        return count_partitions(amount - min_denomination, min_denomination) + count_partitions(amount, 2 * min_denomination) =>           \r\n        return zero(f)                                                                                                        <=           \r\n    counter = 1                                                                                                               <=           \r\n    while counter <= n:                                                                                                       <=           \r\n        f = compose1(f, f)                                                                                                    <=           \r\n        counter += 1                                                                                                          <=           \r\n    return f                                                                                                                  <=           \r\n    \"*** YOUR CODE HERE ***\"                                                                                                  <=           \r\n                                                                                                                              <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    if n == 0:\n        return zero(f)\n\n    counter = 1\n    while counter <= n:\n        f = compose1(f, f)\n        counter += 1\n    return f\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    g = f\n    while n > 1:\n        g = compose1(f ,g)\n        n -= 1\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","13","","# Error: expected","#     8","# but got","#     13","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":173,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n            return x                              =>           \r\n            return compose1(f,repeated(f,n-1))(x) =>           \r\n            return lambda a: a                    <=           \r\n        elif(n ==1):                              <=           \r\n            return f                              <=           \r\n            return compose1(f,repeated(f,n-1))    <=           \r\n                                                  <=           \r\n                                                  <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \n    def rerun(x):\n        if(n==0):\n            return lambda a: a\n        elif(n ==1):\n            return f\n        else:\n            return compose1(f,repeated(f,n-1))\n            \n        \n\n    return rerun\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \n    def rerun(x):\n        if(n==0):\n            return x\n        else:\n            return compose1(f,repeated(f,n-1))(x)\n\n    return rerun\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function compose1.<locals>.h at 0x0000023C1F9F8D90>","","# Error: expected","#     8","# but got","#     <function compose1.<locals>.h at 0x0000023C1F9F8D90>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":174,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        return identity    =>           \r\n        return identity(n) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity(n)\r\n    else:\r\n        g = f\r\n        while n>1:\r\n            g = compose1(f, g)\r\n            n -= 1\r\n        return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    if n == 0:\n        return identity\n    else:\n        g = f\n        while n > 1:\n            g = compose1(f, g)\n            n -= 1\n        return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity(identity)\r\n    else:\r\n        g = f\r\n        while n>1:\r\n            g = compose1(f, g)\r\n            n -= 1\r\n        return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":175,"studentId":0,"date":null,"diff":"\r\nInputObject                                                      SideIndicator\r\n-----------                                                      -------------\r\n    def applyfunc(x):                   #apply f() to x, n times =>           \r\n        for _ in range(1, n + 1):                                =>           \r\n            x = f(x)                                             =>           \r\n        return x                                                 =>           \r\n    return applyfunc                                             =>           \r\n    for x in range(1, n + 1):                                    <=           \r\n        return f(f(x)) #apply f to f(x) n times                  <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    for x in range(1, n + 1):\n        return f(f(x)) #apply f to f(x) n times\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def applyfunc(x):                   #apply f() to x, n times\n        for _ in range(1, n + 1):\n            x = f(x)\n        return x\n    return applyfunc\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":176,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        i = n                                =>           \r\n        while i >= 1:                        =>           \r\n            x = f(x)                         =>           \r\n            i -= 1                           =>           \r\n        return repeated(f, n-1)              =>           \r\n    def repeater(x):                         =>           \r\n    return repeater                          =>           \r\n    if n <= 3:                               =>           \r\n        return n                             =>           \r\n    elif n > 3:                              =>           \r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)  =>           \r\n    if n == 0:                               <=           \r\n        return x                             <=           \r\n    elif n == 1:                             <=           \r\n        x = f(x)                             <=           \r\n        return x                             <=           \r\n        return compose1(f, repeated(f, n-1)) <=           \r\n    else:                                    <=           \r\n    \"*** YOUR CODE HERE ***\"                 <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return x\n    elif n == 1:\n        x = f(x)\n        return x\n    else:\n        return compose1(f, repeated(f, n-1))\n\n    \"\"\"def repeater(x):\n        i = n\n        while i >= 1:\n            x = f(x)\n            i -= 1\n        return x\n    return repeater\"\"\"\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"\"\"def repeater(x):\n        i = n\n        while i >= 1:\n            x = f(x)\n            i -= 1\n        return repeated(f, n-1)\n    return repeater\"\"\"\n\n    def repeater(x):\n        i = n\n        while i >= 1:\n            x = f(x)\n            i -= 1\n        return x\n    return repeater\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeated","    x = f(x)","UnboundLocalError: local variable 'x' referenced before assignment","","# Error: expected","#     ","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":177,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    if n == 0:          =>           \r\n        return identity =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    i = 1\r\n    func = f\r\n    while i!=n:\r\n        func = compose1(f, func)\r\n        i += 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    i = 1\n    func = f\n    while i !=  n:\n        func = compose1(f,func)\n        i += 1\n    return func\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    i = 1\r\n    func = f\r\n    while i!=n:\r\n        func = compose1(f, func)\r\n        i += 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     5","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":178,"studentId":0,"date":null,"diff":"\r\nInputObject                            SideIndicator\r\n-----------                            -------------\r\n    def help_me(x):                    =>           \r\n        total = x                      =>           \r\n            total = f(total)           =>           \r\n        return total                   =>           \r\n    return help_me                     =>           \r\n    if n == 0:                         <=           \r\n        return (x)                     <=           \r\n        first = f                      <=           \r\n            composing = compose1(f, n) <=           \r\n            first = composing          <=           \r\n    return composing(x)                <=           \r\n    else:                              <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return (x)\n    else:\n        first = f\n        i = 1\n        while i <= n:\n            composing = compose1(f, n)\n            first = composing\n            i += 1\n    return composing(x)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def help_me(x):\n        total = x\n        i = 1\n        while i <= n:\n            total = f(total)\n            i += 1\n        return total\n    return help_me\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 164, in repeated","    return composing(x)","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":179,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    if n == 0:          =>           \r\n        return identity =>           \r\n                        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def layer(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    out = f\r\n    while (n>1):\r\n        out = layer(out, f)\r\n        n -= 1\r\n    return out\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def layer(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n == 0:\n        return identity\n    out = f\n    while(n>1):\n        out = layer(out, f)\n        n -= 1\n    return out\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def layer(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    out = f\r\n    while (n>1):\r\n        out = layer(out, f)\r\n        n -= 1\r\n    return out\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":180,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n        return identity      =>           \r\n        return compose1(0,0) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    composite = f\r\n    if n!=0:\r\n        while n>1:\r\n            composite = compose1(f, composite)\r\n            n -= 1\r\n        return composite\r\n    else:\r\n        return compose1(0, 0)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    composite = f\n    if n != 0:\n        while n>1:\n            composite = compose1(f, composite)\n            n -= 1\n        return composite\n    else:\n        return identity\n\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    composite = f\r\n    if n!=0:\r\n        while n>1:\r\n            composite = compose1(f, composite)\r\n            n -= 1\r\n        return composite\r\n    else:\r\n        return compose1(0, 0)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 188, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":181,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                   SideIndicator\r\n-----------                                                                   -------------\r\n    def helper(x):                                                            =>           \r\n        i = 1                                                                 =>           \r\n        curr = x                                                              =>           \r\n        while i <= n:                                                         =>           \r\n            curr = f(curr)                                                    =>           \r\n            i += 1                                                            =>           \r\n        return curr                                                           =>           \r\n    return helper                                                             =>           \r\n    if n <= 3:                                                                =>           \r\n        return n                                                              =>           \r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)                         =>           \r\n    if n <= 3:                                                                =>           \r\n        return n                                                              =>           \r\n    else:                                                                     =>           \r\n        first = 1                                                             =>           \r\n        middle = 2                                                            =>           \r\n        curr = 3                                                              =>           \r\n        i = 4                                                                 =>           \r\n        while i <= n:                                                         =>           \r\n            curr, middle, first = curr + 2 * middle + 3 * first, curr, middle =>           \r\n            i += 1                                                            =>           \r\n        return curr                                                           =>           \r\n    i, result, k = 1, 0, 1                                                    =>           \r\n        result += k                                                           =>           \r\n        if i % 7 == 0 or has_seven(i):                                        =>           \r\n            k = -k                                                            =>           \r\n    return result\"\"\"                                                          =>           \r\n    def helper(i, k, result):                                                 =>           \r\n        while i <= n:                                                         =>           \r\n            if n <= 7:                                                        =>           \r\n                return n                                                      =>           \r\n            elif i % 7 == 0 or has_seven(i):                                  =>           \r\n                return helper(i + 1, -k, result + k)                          =>           \r\n            else:                                                             =>           \r\n                return helper(i + 1, k, result + k)                           =>           \r\n        return result                                                         =>           \r\n    helper(1, 1, 0)                                                           =>           \r\n    else:                                                                     =>           \r\n                                                                              =>           \r\n                                                                              =>           \r\n                                                                              =>           \r\n                                                                              =>           \r\n    \"\"\"                                                                       =>           \r\n                                                                              =>           \r\n    i, curr = 1, compose1(f, identity)(*args)                                 <=           \r\n        curr = compose1(f, identity)(curr)                                    <=           \r\n    return curr                                                               <=           \r\n    \"*** YOUR CODE HERE ***\"                                                  <=           \r\n    \"*** YOUR CODE HERE ***\"                                                  <=           \r\n    \"*** YOUR CODE HERE ***\"                                                  <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    i, curr = 1, compose1(f, identity)(*args)\n    while i <= n:\n        curr = compose1(f, identity)(curr)\n        i += 1\n    return curr\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def helper(x):\n        i = 1\n        curr = x\n        while i <= n:\n            curr = f(curr)\n            i += 1\n        return curr\n    return helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in repeated","    i, curr = 1, compose1(f, identity)(*args)","NameError: name 'args' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":182,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n            return x =>           \r\n            return   <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        if n==0:\r\n            return \r\n        else:\r\n            return repeated(f, n-1)(f(x))\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def helper(x):\n        if n == 0:\n            return x\n        else:\n            return repeated(f, n - 1)(f(x))\n    return helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def helper(x):\r\n        if n==0:\r\n            return \r\n        else:\r\n            return repeated(f, n-1)(f(x))\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","","# Error: expected","#     8","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":183,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        return f         =>           \r\n    elif n == 0:         =>           \r\n        return identity  =>           \r\n        return f         <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 1: \n        return f\n    elif n == 0: \n        return identity \n    else: \n        return compose1(f, repeated(f, n-1))\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":184,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                 SideIndicator\r\n-----------                                                                 -------------\r\n    return identity if n==0 else compose1(repeated(f,n-1), f) if n>1 else f =>           \r\n    return compose1(repeated(f,n-1), f) if n>1 else f                       <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return compose1(repeated(f,n-1), f) if n>1 else f\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return identity if n==0 else compose1(repeated(f,n-1), f) if n>1 else f\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":185,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n        while a<n:  =>           \r\n        while a<=n: <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        a = 0\r\n        if n==0:\r\n            return x\r\n        while a<=n:\r\n            wow = lambda x: f(x)\r\n            b = wow(x)\r\n            x = wow(x)\r\n            a += 1\r\n        return b\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \n    def h(x):\n        a = 0\n        if n == 0:\n            return x\n        while a<n:\n            wow = lambda x: f(x)\n            b = wow(x)\n            x = wow(x)\n            a+=1\n        return b\n    return h \n        \n            \n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        a = 0\r\n        if n==0:\r\n            return x\r\n        while a<=n:\r\n            wow = lambda x: f(x)\r\n            b = identity(x)\r\n            x = wow(x)\r\n            a += 1\r\n        return b\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":186,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n        while i<n:  =>           \r\n        while i<=n: <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        i = 1\r\n        g = f\r\n        while i<=n:\r\n            f = compose1(f, g)\r\n            i = i+1\r\n        return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n == 0:\n        return identity\n    else:\n        i = 1\n        g = f\n        while i<n:\n            f = compose1(f,g)\n            i = i+1\n        return f\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        i = 1\r\n        g = f\r\n        while i<n:\r\n            f = compose1(f, g)\r\n            i = i+1\r\n        return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"CallExpressionNode\")))), TChild(LeafWildcard(\"any\"))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":187,"studentId":0,"date":null,"diff":"\r\nInputObject                                                SideIndicator\r\n-----------                                                -------------\r\n    repeated_function = lambda x: x                        =>           \r\n        repeated_function = compose1(f, repeated_function) =>           \r\n    return repeated_function                               =>           \r\n    total = f(x)                                           <=           \r\n        total = f(x)                                       <=           \r\n    return total                                           <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    total = f(x)\n    while n > 0:\n        total = f(x)\n        n -= 1\n    return total\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    repeated_function = lambda x: x\n    while n > 0:\n        repeated_function = compose1(f, repeated_function)\n        n -= 1\n    return repeated_function\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated","    total = f(x)","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":188,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        return when_zero =>           \r\n        return x         <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def when_zero(x):\r\n        return x\r\n    func_layer = f\r\n    i = 1\r\n    if n>1:\r\n        while i<n:\r\n            func_layer = compose1(f, func_layer)\r\n            i += 1\r\n        return func_layer\r\n    elif n==0:\r\n        return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    def when_zero(x):\n        return x\n\n    func_layer = f\n    i = 1\n    if n>1:\n        while i < n:\n            func_layer = compose1(f, func_layer)\n            i+=1\n        return func_layer\n    elif n==0:\n        return when_zero\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def when_zero(x):\r\n        return x\r\n    func_layer = f\r\n    i = 1\r\n    if n>1:\r\n        while i<n:\r\n            func_layer = compose1(f, func_layer)\r\n            i += 1\r\n        return func_layer\r\n    elif n==0:\r\n        return identity\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 170, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":189,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n            if k==n:   =>           \r\n            if k==n+1: <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def doer(x):\r\n        def composer(x, k):\r\n            if k==n+1:\r\n                return x\r\n            else:\r\n                return composer(f(x), k+1)\r\n        return composer(x, 0)\r\n    return doer","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def doer(x):\n        def composer(x,k):\n            if k==n:\n                return x\n            else:\n                return composer(f(x),k+1)\n\n        return composer(x,0)\n\n    return doer\n\n\n\n\n\n\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def doer(x):\r\n        def composer(x, k):\r\n            if k==n+0:\r\n                return x\r\n            else:\r\n                return composer(f(x), k+1)\r\n        return composer(x, 0)\r\n    return doer","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":190,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        return identity                     =>           \r\n    return nested                           =>           \r\n        return compose1(identity, identity) <=           \r\n    return a                                <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    nested = f\r\n    while n>1:\r\n        nested = compose1(f, nested)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity \n    nested = f\n    while n > 1:\n        nested = compose1(f, nested)\n        n -= 1\n    return nested\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    a = f\r\n    while n>1:\r\n        a = compose1(f, a)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in repeated","    return a","NameError: name 'a' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":191,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                 SideIndicator\r\n-----------                                                                 -------------\r\n    return term(n) * product(n - 1, term)                                   =>           \r\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))       =>           \r\n    return identity if n == 0 else compose1(repeated(f, n - 1), f)          =>           \r\n    if n <= 3:                                                              =>           \r\n        return n                                                            =>           \r\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)                           =>           \r\n    if n <= 3:                                                              =>           \r\n        return n                                                            =>           \r\n    g1, g2, g3 = 1, 2, 3                                                    =>           \r\n    while n > 3:                                                            =>           \r\n        g1, g2, g3 = g2, g3, g3 + 2 * g2 + 3 * g1                           =>           \r\n        n -= 1                                                              =>           \r\n    return g3                                                               =>           \r\n        return term(n) * product(n - 1, term)                               <=           \r\n    else:                                                                   <=           \r\n        return combiner(term(n), accumulate(combiner, base, n - 1, term))   <=           \r\n    return lambda n:identity if n == 0 else compose1(repeated(f, n - 1), f) <=           \r\n    else:                                                                   <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return lambda n:identity if n == 0 else compose1(repeated(f, n - 1), f)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return identity if n == 0 else compose1(repeated(f, n - 1), f)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function compose1.<locals>.h at 0x000002A8CB9A6D90>","","# Error: expected","#     8","# but got","#     <function compose1.<locals>.h at 0x000002A8CB9A6D90>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":192,"studentId":0,"date":null,"diff":"\r\nInputObject                                                      SideIndicator\r\n-----------                                                      -------------\r\n    #if cond:                                                    =>           \r\n        #result = 3                                              =>           \r\n        #result = 3 if pred else 5                               =>           \r\n    #else:                                                       =>           \r\n        #result = 5                                              =>           \r\n    if n == 0:                                                   =>           \r\n        return identity                                          =>           \r\n    return compose1(f, repeated(f, n-1))                         =>           \r\n    # square2 = compose1(f, g) # = square(square(_))             =>           \r\n    # compose1(square, square2)(x) # = square(square(square(x))) =>           \r\n    # f = square                                                 =>           \r\n    # g = square                                                 =>           \r\n    # x = 5                                                      =>           \r\n    \"\"\"                                                          =>           \r\n        # #for i in range(1, 4):                                 =>           \r\n        # if i <= 3:                                             =>           \r\n        #     a = n - i                                          =>           \r\n        #     b = g(a)                                           =>           \r\n        # total += i * b                                         =>           \r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)            =>           \r\n    else:                                                        =>           \r\n                                                                 =>           \r\n    x = 0                                                        <=           \r\n    total = 0                                                    <=           \r\n    if x <= n:                                                   <=           \r\n        x += n                                                   <=           \r\n        return compose1                                          <=           \r\n    return total                                                 <=           \r\n    total = 0                                                    <=           \r\n    i = 0                                                        <=           \r\n    elif n > 3:                                                  <=           \r\n        #for i in range(1, 4):                                   <=           \r\n        if i <= 3:                                               <=           \r\n            a = n - i                                            <=           \r\n            b = g(a)                                             <=           \r\n        total += i * b                                           <=           \r\n    return total                                                 <=           \r\n    \"\"\"                                                          <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    x = 0 \n    total = 0 \n    if x <= n:\n        x += n \n        return compose1\n    return total \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    return compose1(f, repeated(f, n-1))\n\n    # square2 = compose1(f, g) # = square(square(_))\n    # compose1(square, square2)(x) # = square(square(square(x)))\n    # f = square\n    # g = square \n    # x = 5 \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: compose1() missing 1 required positional argument: 'g'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":193,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n            return f(repeated(f, n-1)(x))       =>           \r\n            return repeated(compose1(f,f), n-1) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def helper(x):\n        if n == 0:\n            return x\n        else:\n            return repeated(compose1(f,f), n-1)\n    return helper\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def helper(x):\n        if n == 0:\n            return x\n        else:\n            return f(repeated(f, n-1)(x))\n    return helper\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function repeated.<locals>.helper at 0x0000022E56718D90>","","# Error: expected","#     8","# but got","#     <function repeated.<locals>.helper at 0x0000022E56718D90>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":194,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n    else:               =>           \r\n                        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n>0:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n > 0:\n        return compose1(f, repeated(f, n - 1))\n    else:\n        return identity\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n>0:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in h","    return f(g(x))","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":195,"studentId":0,"date":null,"diff":"\r\nInputObject                 SideIndicator\r\n-----------                 -------------\r\n        return lambda x: x  =>           \r\n    elif n == 1:            =>           \r\n        return f            =>           \r\n                            =>           \r\n        return  qqq         <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    x = compose1(f, f)\r\n    if n==0:\r\n        return qqq\r\n    for i in range(n-2):\r\n        x = compose1(x, f)\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    x = compose1(f,f)\n\n    if n == 0:\n        return lambda x: x \n\n    elif n == 1:\n        return f\n\n    for  i in range(n-2):\n        x  = compose1(x,f)\n\n    return x\n \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    x = compose1(f, f)\r\n    if n==0:\r\n        return identity\r\n    for i in range(n-2):\r\n        x = compose1(x, f)\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 175, in repeated","    return  qqq","NameError: name 'qqq' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":196,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        counter = 1                                   =>           \r\n        while counter <= n:                           =>           \r\n            j=f(j)                                    =>           \r\n            counter+=1                                =>           \r\n        return j                                      =>           \r\n    return repeated2                                  =>           \r\n    if n <= 3:                                        =>           \r\n        return n                                      =>           \r\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n    else:                                             =>           \r\n        if j==0:                                      <=           \r\n            return n                                  <=           \r\n        else:                                         <=           \r\n            k=compose1(f,j)                           <=           \r\n            return repeated2(j-1)                     <=           \r\n                                                      <=           \r\n    \"*** YOUR CODE HERE ***\"                          <=           \r\n                                                      <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeated2(j):\n        if j==0:\n            return n\n        else:\n            k=compose1(f,j)\n            return repeated2(j-1)\n           \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeated2(j):\n        counter = 1\n        while counter <= n:\n            j=f(j)\n            counter+=1 \n        return j\n    return repeated2     \ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":197,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n        if i == n:            =>           \r\n            return lambda x:x =>           \r\n        if i == n-1:          <=           \r\n            return f          <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def counter(i):\r\n        if i==n-1:\r\n            return f\r\n        else:\r\n            return compose1(counter(i+1), f)\r\n    return counter(0)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def counter(i):\n        if i == n:\n            return lambda x:x\n        else:\n             \n            return compose1(counter(i+1),f)\n    return counter(0)       \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def counter(i):\r\n        if i==n-1:\r\n            return f\r\n        else:\r\n            return compose1(counter(i+1), f)\r\n    return counter(0)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 177, in counter","    return compose1(counter(i+1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 177, in counter","    return compose1(counter(i+1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 177, in counter","    return compose1(counter(i+1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 177, in counter","    return compose1(counter(i+1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 177, in counter","    return compose1(counter(i+1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 177, in counter","    return compose1(counter(i+1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 173, in counter","    if i == n-1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":198,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        return compose1(f, repeated(f, n-1)) =>           \r\n                                             =>           \r\n        return compose(f, repeated(f, n-1))  <=           \r\n                                             <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    elif n == 1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(LeafWildcard(\"ArgNode\"))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in repeated","    return compose(f, repeated(f, n-1))","NameError: name 'compose' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":199,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                                       SideIndicator\r\n-----------                                                                                                       -------------\r\n    a = identity                                                                                                  =>           \r\n    while n>0:                                                                                                    =>           \r\n        a = compose1(f, a)                                                                                        =>           \r\n        n = n- 1                                                                                                  =>           \r\n    return a                                                                                                      =>           \r\n    # def wow(x):                                                                                                 =>           \r\n    #     g = f(x)                                                                                                =>           \r\n    #     while n > 0:                                                                                            =>           \r\n    #         g = f(g)                                                                                            =>           \r\n    #         n = n-1                                                                                             =>           \r\n    #     return g                                                                                                =>           \r\n    # return wow                                                                                                  =>           \r\n    power = 0                                                                                                     =>           \r\n    while pow(2, power) < amount:                                                                                 =>           \r\n        power = power + 1                                                                                         =>           \r\n    power = power - 1                                                                                             =>           \r\n    def count_partitions(total, largest_coin):                                                                    =>           \r\n        if total == 0:                                                                                            =>           \r\n            return 0                                                                                              =>           \r\n        elif largest_coin == 0:                                                                                   =>           \r\n            return 0                                                                                              =>           \r\n        elif largest_coin:                                                                                        =>           \r\n            return 1                                                                                              =>           \r\n        elif total == 1:                                                                                          =>           \r\n            return 1                                                                                              =>           \r\n        else:                                                                                                     =>           \r\n            return count_partitions(total - pow(2,power), largest_coin) + count_partitions(total, largest_coin-1) =>           \r\n    return count_partitions(amount, pow(2, power))                                                                =>           \r\n                                                                                                                  =>           \r\n                                                                                                                  =>           \r\n                                                                                                                  =>           \r\n                                                                                                                  =>           \r\n    # a = identity                                                                                                <=           \r\n    # while n>0:                                                                                                  <=           \r\n    #     a = compose1(f, a)                                                                                      <=           \r\n    #     n = n- 1                                                                                                <=           \r\n    def wow(x):                                                                                                   <=           \r\n         g = f(x)                                                                                                 <=           \r\n         nonlocal n                                                                                               <=           \r\n         while n > 0:                                                                                             <=           \r\n             g = f(g)                                                                                             <=           \r\n             n = n-1                                                                                              <=           \r\n         return g                                                                                                 <=           \r\n    return wow                                                                                                    <=           \r\n    # return a                                                                                                    <=           \r\n    \"*** YOUR CODE HERE ***\"                                                                                      <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    # a = identity\n    # while n>0:\n    #     a = compose1(f, a)\n    #     n = n- 1\n    # return a\n    def wow(x):\n         g = f(x)\n         nonlocal n\n         while n > 0:\n             g = f(g)\n             n = n-1\n         return g\n    return wow\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    a = identity\n    while n>0:\n        a = compose1(f, a)\n        n = n- 1\n    return a\n    # def wow(x):\n    #     g = f(x)\n    #     while n > 0:\n    #         g = f(g)\n    #         n = n-1\n    #     return g\n    # return wow\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":200,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        return lambda x: x =>           \r\n        return lambda x: 0 <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    composition = f\r\n    if n==0:\r\n        return lambda x: 0\r\n    while n>1:\r\n        composition = compose1(f, composition)\r\n        n -= 1\r\n    return composition\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    composition = f\n    if n == 0:\n        return lambda x: x\n    while n > 1:\n        composition = compose1(f, composition)\n        n -= 1\n    return composition\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    composition = f\r\n    if n==0:\r\n        return lambda x: 0\r\n    while n>1:\r\n        composition = compose1(f, composition)\r\n        n -= 1\r\n    return composition\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","0","","# Error: expected","#     5","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":201,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n        count = n =>           \r\n    count = n     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    count = n\n    def times(x):\n        temp_value = x\n        while count:\n            temp_value = f(temp_value)\n            count -=1\n        return temp_value\n    return times\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def times(x):\n        temp_value = x\n        count = n\n        while count:\n            temp_value = f(temp_value)\n            count -=1\n        return temp_value\n    return times\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 155, in times","    while count:","UnboundLocalError: local variable 'count' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":202,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                          SideIndicator\r\n-----------                                                                          -------------\r\n                                                                                     =>           \r\n                if n == 0:                                                           =>           \r\n                    return x                                                         =>           \r\n                elif n == 1:                                                         =>           \r\n                                                                                     =>           \r\n    if n <= 3:                                                                       =>           \r\n        return n                                                                     =>           \r\n    else:                                                                            =>           \r\n        return g(n-1)+2*g(n-2)+3*g(n-3)                                              =>           \r\n                                                                                     =>           \r\n    if n <= 3:                                                                       =>           \r\n        return n                                                                     =>           \r\n    else:                                                                            =>           \r\n        k = 3                                                                        =>           \r\n        three_list = [1,2,3]                                                         =>           \r\n        while k < n:                                                                 =>           \r\n            three_list.append(3 * three_list[0] + 2 * three_list[1] + three_list[2]) =>           \r\n            del three_list[0]                                                        =>           \r\n            k = k + 1                                                                =>           \r\n        return three_list[2]                                                         =>           \r\n                                                                                     =>           \r\n                                                                                     =>           \r\n    if n == 1:                                                                       =>           \r\n        return 1                                                                     =>           \r\n        return pingpong_value(0, 1)                                                  =>           \r\n    def pingpong_value(counter, direction):                                          =>           \r\n        if k == n:                                                                   =>           \r\n            return pingpong_value                                                    =>           \r\n        if k < n and (has_seven(counter + 1) or divisible_seven(counter + 1)):       =>           \r\n            return direction + pingpong_value(counter + 1, direction * (-1))         =>           \r\n        else:                                                                        =>           \r\n            return direction + pingpong_value(counter + 1, direction)                =>           \r\ndef divisible_seven(k):                                                              =>           \r\n    if k % 7 == 0:                                                                   =>           \r\n    else:                                                                            =>           \r\n                                                                                     =>           \r\n                                                                                     =>           \r\n                                                                                     =>           \r\n        return True                                                                  =>           \r\n        return False                                                                 =>           \r\n    else:                                                                            =>           \r\n                                                                                     =>           \r\n                if n <= 1:                                                           <=           \r\n    \"*** YOUR CODE HERE ***\"                                                         <=           \r\n    \"*** YOUR CODE HERE ***\"                                                         <=           \r\n    \"*** YOUR CODE HERE ***\"                                                         <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def composer(x):\r\n        def repeater(n):\r\n            if n<=1:\r\n                return f(x)\r\n            else:\r\n                return f(repeater(n-1))\r\n        return repeater(n)\r\n    return composer\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def composer(x):\n        \n            def repeater(n):\n                if n == 0:\n                    return x\n                elif n == 1:\n                    return f(x)\n                else:\n                    return f(repeater(n - 1))\n            return repeater(n)\n        \n    return composer\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def composer(x):\r\n        def repeater(n):\r\n            if n<=1:\r\n                return f(x)\r\n            else:\r\n                return f(repeater(n-1))\r\n        return repeater(n)\r\n    return composer\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":203,"studentId":0,"date":null,"diff":"\r\nInputObject                            SideIndicator\r\n-----------                            -------------\r\n    i, compose = 0, identity           =>           \r\n    while i < n:                       =>           \r\n        compose = compose1(compose, f) =>           \r\n        i +=1                          =>           \r\n    return compose                     =>           \r\n    def h(x):                          =>           \r\n        return f(g(x))                 =>           \r\n                                       =>           \r\n    if n == 0:                         <=           \r\n        return identity(n)             <=           \r\n    else:                              <=           \r\n        return compose1(f, n)          <=           \r\n    def h(n):                          <=           \r\n        return f(g(n))                 <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0: \n        return identity(n)\n    else: \n        return compose1(f, n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(n):\n        return f(g(n))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    i, compose = 0, identity\n    while i < n: \n        compose = compose1(compose, f)\n        i +=1\n    return compose\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 171, in h","    return f(g(n))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":204,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n        return 0        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    i, result = 1, f\r\n    if n==0:\r\n        return 0\r\n    while i<n:\r\n        result = compose1(f, result)\r\n        i += 1\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i, result = 1, f\n    if n == 0:\n        return identity\n    while i < n:\n        result = compose1(f,result)\n        i += 1\n    return result\n\n\n        \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    i, result = 1, f\r\n    if n==0:\r\n        return identity\r\n    while i<n:\r\n        result = compose1(f, result)\r\n        i += 1\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":205,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        print (f(x)) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def currying(x):\r\n        i = 0\r\n        while i!=n:\r\n            print(f(x))\r\n            x = f(x)\r\n            i += 1\r\n        return x\r\n    return currying\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def currying (x):\n      i = 0\n      while i != n:\n        x = f(x)\n        i+= 1\n      return x\n    \n    return currying\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def currying(x):\r\n        i = 0\r\n        while i!=n:\r\n            print(identity(x))\r\n            x = f(x)\r\n            i += 1\r\n        return x\r\n    return currying\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","6","7","8","8","","# Error: expected","#     8","# but got","#     6","#     7","#     8","#     8","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":206,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                                        SideIndicator\r\n-----------                                                                                                        -------------\r\n    i = 0                                                                                                          =>           \r\n    if n <= 3:                                                                                                     =>           \r\n        return n                                                                                                   =>           \r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)                                                                    =>           \r\n    answer = 0                                                                                                     =>           \r\n    i = 4                                                                                                          =>           \r\n    sequence = [1,2,3]                                                                                             =>           \r\n    while len(sequence)<n:                                                                                         =>           \r\n        sequence.append(sequence[len(sequence)-1] + 2 * sequence[len(sequence)-2] + 3 * sequence[len(sequence)-3]) =>           \r\n    return sequence[n-1]                                                                                           =>           \r\n                                                                                                                   =>           \r\n    def countdown(k,i):                                                                                            =>           \r\n        if k==n:                                                                                                   =>           \r\n            return i                                                                                               =>           \r\n        elif k%7==0 or has_seven(k):                                                                               =>           \r\n            countup(k+1,i+1)                                                                                       =>           \r\n        return countdown(k+1,i-1)                                                                                  =>           \r\n    def countup(k,i):                                                                                              =>           \r\n        if k==n:                                                                                                   =>           \r\n            return i                                                                                               =>           \r\n        elif k%7==0 or has_seven(k):                                                                               =>           \r\n            countdown(k+1,i-1)                                                                                     =>           \r\n        return countup(k+1,i+1)                                                                                    =>           \r\n    return countup(1,1)                                                                                            =>           \r\n    else:                                                                                                          =>           \r\n                                                                                                                   =>           \r\n                                                                                                                   =>           \r\n    i = 1                                                                                                          <=           \r\n    \"*** YOUR CODE HERE ***\"                                                                                       <=           \r\n    \"*** YOUR CODE HERE ***\"                                                                                       <=           \r\n    \"*** YOUR CODE HERE ***\"                                                                                       <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    i = 1\r\n    intermediate = identity\r\n    while i<n:\r\n        intermediate = compose1(f, intermediate)\r\n        i += 1\r\n    return intermediate\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n        return identity\n    i = 0\n    intermediate = identity\n    while i<n:\n        intermediate = compose1(f, intermediate)\n        i += 1\n\n\n    return intermediate\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    i = 0\r\n    intermediate = identity\r\n    while i<n:\r\n        intermediate = compose1(f, intermediate)\r\n        i += 1\r\n    return intermediate\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":207,"studentId":0,"date":null,"diff":"\r\nInputObject                                         SideIndicator\r\n-----------                                         -------------\r\n        if n == 0:                                  =>           \r\n            return x                                =>           \r\n        answer = f(x)                               =>           \r\n        count = n                                   =>           \r\n        while(count>1):                             =>           \r\n            answer = f(answer)                      =>           \r\n            count -= 1                              =>           \r\n        return answer                               =>           \r\n    return n                                        =>           \r\n        # if n == 0:                                <=           \r\n        #     return x                              <=           \r\n        # answer = f(x)                             <=           \r\n        # count = n                                 <=           \r\n        # while(count>1):                           <=           \r\n        #     answer = f(answer)                    <=           \r\n        #     count -= 1                            <=           \r\n        # return answer                             <=           \r\n        if n == 1:                                  <=           \r\n            return #f(x)                            <=           \r\n        else:                                       <=           \r\n            return repeated(compose1(f, f), n-1)(x) <=           \r\n    if (n <= 3):                                    <=           \r\n        return n                                    <=           \r\n    return total                                    <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \n    def repeat(x):\n        # if n == 0:\n        #     return x\n        # answer = f(x)\n        # count = n\n        # while(count>1):\n        #     answer = f(answer)\n        #     count -= 1\n        # return answer\n\n        if n == 1:\n            return #f(x)\n        else:\n            return repeated(compose1(f, f), n-1)(x)\n    return repeat\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \n    def repeat(x):\n        if n == 0:\n            return x\n        answer = f(x)\n        count = n\n        while(count>1):\n            answer = f(answer)\n            count -= 1\n        return answer\n    return repeat\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","","# Error: expected","#     8","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":208,"studentId":0,"date":null,"diff":"\r\nInputObject                         SideIndicator\r\n-----------                         -------------\r\n    def func(x,n):                  =>           \r\n        if n==0:                    =>           \r\n            return x                =>           \r\n            return func(f(x), n-1)  =>           \r\n    return lambda x: func(x,n)      =>           \r\n    def func(x, k,n):               <=           \r\n        k=1                         <=           \r\n        if k==n:                    <=           \r\n            return func             <=           \r\n            return func(f(x), k, n) <=           \r\n    return func                     <=           \r\n            n=n-1                   <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def func(x, k,n):\n        k=1\n        if k==n:\n            return func\n        else:\n            n=n-1\n            return func(f(x), k, n)\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def func(x,n):\n        if n==0:\n            return x\n        else:\n            return func(f(x), n-1)\n    return lambda x: func(x,n)\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: func() missing 2 required positional arguments: 'k' and 'n'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":209,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n    return original_function =>           \r\n    return x                 <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        def return_value(x):\r\n            return x\r\n        return return_value\r\n    k = 1\r\n    original_function = f\r\n    while k<n:\r\n        original_function = compose1(f, original_function)\r\n        k += 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n == 0: \n        def return_value(x):\n            return x \n        return return_value\n    k = 1\n    original_function = f\n    while k < n:\n        original_function = compose1(f,original_function)\n        k += 1 \n    return original_function\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        def return_value(x):\r\n            return x\r\n        return return_value\r\n    k = 1\r\n    a = f\r\n    while k<n:\r\n        a = compose1(f, a)\r\n        k += 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 177, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":210,"studentId":0,"date":null,"diff":"\r\nInputObject                                            SideIndicator\r\n-----------                                            -------------\r\n        res = arg                                      =>           \r\n        for _ in range(n):                             =>           \r\n            res = f(res)                               =>           \r\n        return res                                     =>           \r\n        return reduce(lambda r, g: g(r), [f] * n, arg) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # f --> a one-argument function that takes a number and returns another number\n    # n --> a non-negative integer\n    def repeat(arg):\n        return reduce(lambda r, g: g(r), [f] * n, arg)\n    return repeat\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # f --> a one-argument function that takes a number and returns another number\n    # n --> a non-negative integer\n    def repeat(arg):\n        res = arg\n        for _ in range(n):\n            res = f(res)\n        return res\n    return repeat\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in repeat","    return reduce(lambda r, g: g(r), [f] * n, arg)","NameError: name 'reduce' is not defined","","# Error: expected","#     8","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":211,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n    z = identity    =>           \r\n    z = identity(n) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    z = identity(n)\r\n    while n>0:\r\n        z = compose1(z, f)\r\n        n -= 1\r\n    return z\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    z = identity\n    while n>0:\n        z = compose1(z,f)\n        n-=1\n    return z\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    z = identity(identity)\r\n    while n>0:\r\n        z = compose1(z, f)\r\n        n -= 1\r\n    return z\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":212,"studentId":0,"date":null,"diff":"\r\nInputObject                 SideIndicator\r\n-----------                 -------------\r\n        return lambda x : x =>           \r\n        return x            <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return x\r\n    else:\r\n        return lambda x: f(repeated(f, n-1)(x))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return lambda x : x\n    else:\n        return lambda x: f(repeated(f, n-1)(x))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return lambda x: f(repeated(f, n-1)(x))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 164, in <lambda>","    return lambda x: f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 164, in <lambda>","    return lambda x: f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 164, in <lambda>","    return lambda x: f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     8","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":213,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n    if n==0:                                    =>           \r\n    if n == 1:                                  =>           \r\n        return f                                =>           \r\n            direction = False                   =>           \r\n        counter+=1                              =>           \r\n        if current_num == 0 and not(direction): =>           \r\n            direction = True                    =>           \r\n                                                =>           \r\n                                                =>           \r\n                                                =>           \r\n    if n==1:                                    <=           \r\n            direction = not(direction)          <=           \r\n            counter+=1                          <=           \r\n            counter+=1                          <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return identity\r\n    g = f\r\n    while n>1:\r\n        g = compose1(g, f)\r\n        n -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==0:\n        return identity\n    if n == 1:\n        return f\n    g = f\n    while n >1:\n        g = compose1(g, f)\n        n-=1\n\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    while n>1:\r\n        g = compose1(g, f)\r\n        n -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":214,"studentId":0,"date":null,"diff":"\r\nInputObject                                              SideIndicator\r\n-----------                                              -------------\r\n    g = f                                                =>           \r\n    while n > 1:                                         =>           \r\n        g = compose1(f, g)                               =>           \r\n        n -= 1                                           =>           \r\n    return g                                             =>           \r\n        return (repeated(f, n - 1), repeated(f, n - 2))  <=           \r\n    else:                                                <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return lambda x: x\n    else:\n        return (repeated(f, n - 1), repeated(f, n - 2)) \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    g = f\n    if n == 0:\n        return lambda x: x\n    while n > 1:\n        g = compose1(f, g)\n        n -= 1\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return (repeated(f, n - 1), repeated(f, n - 2))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return (repeated(f, n - 1), repeated(f, n - 2))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return (repeated(f, n - 1), repeated(f, n - 2))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return (repeated(f, n - 1), repeated(f, n - 2))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return (repeated(f, n - 1), repeated(f, n - 2))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return (repeated(f, n - 1), repeated(f, n - 2))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeated","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     ","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":215,"studentId":0,"date":null,"diff":"\r\nInputObject                                             SideIndicator\r\n-----------                                             -------------\r\n    return accumulate(combiner, base, pred(n), term(n)) =>           \r\n        return repeated(identity, 1)                    =>           \r\n                                                        =>           \r\n                                                        =>           \r\n    return accumulate(combiner, base, n, term)          <=           \r\n        return 1                                        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return 1\r\n    func = f\r\n    while n>1:\r\n        func = compose1(f, func)\r\n        n -= 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return repeated(identity, 1)\n    func = f\n    while n > 1:\n        func = compose1(f, func)\n        n -= 1\n    return func\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    func = f\r\n    while n>1:\r\n        func = compose1(f, func)\r\n        n -= 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":216,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        while i <= n: =>           \r\n        while i == n: <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def recursor(m):\n        i = 1\n        y = m\n        while i == n:\n            y = compose1(f, identity)(y)\n            i += 1\n        return y\n    return recursor\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def recursor(m):\n        i = 1\n        y = m\n        while i <= n:\n            y = compose1(f, identity)(y)\n            i += 1\n        return y\n    return recursor\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":217,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        x = compose1(f, x) =>           \r\n        x = compose(f, x)  <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    counter = 0\r\n    x = identity\r\n    while counter<n:\r\n        x = compose(f, x)\r\n        counter += 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    counter = 0\n    x = identity\n    while counter < n:\n        x = compose1(f, x)\n        counter+= 1\n    return x\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    counter = 0\r\n    x = identity\r\n    while counter<n:\r\n        x = compose1(f, x)\r\n        counter += 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(LeafWildcard(\"ArgNode\"))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 169, in repeated","    x = compose(f, x)","NameError: name 'compose' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":218,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n        return compose1(f,repeated(f,n-1)) =>           \r\n        return f(repeated(f,n-1))          <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return lambda x: x\n    else:\n        return compose1(f,repeated(f,n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":219,"studentId":0,"date":null,"diff":"\r\nInputObject                        SideIndicator\r\n-----------                        -------------\r\n    final = identity               =>           \r\n        final = compose1(f, final) =>           \r\n    if n == 0:                     <=           \r\n        return identity            <=           \r\n    if n == 1:                     <=           \r\n        return f(identity)         <=           \r\n        final = compose1(f, f)     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    if n == 1:\n        return f(identity)\n    while n!= 0:\n        final = compose1(f, f)\n        n -= 1\n    return final\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    final = identity\n    while n!= 0:\n        final = compose1(f, final)\n        n -= 1\n    return final\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":220,"studentId":0,"date":null,"diff":"\r\nInputObject                        SideIndicator\r\n-----------                        -------------\r\n    final = identity               =>           \r\n        final = compose1(f, final) =>           \r\n    if n == 0:                     <=           \r\n        return identity            <=           \r\n    if n == 1:                     <=           \r\n        return f(identity)         <=           \r\n        final = compose1(f, f)     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    if n == 1:\n        return f(identity)\n    while n!= 0:\n        final = compose1(f, f)\n        n -= 1\n    return final\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    final = identity\n    while n!= 0:\n        final = compose1(f, final)\n        n -= 1\n    return final\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":221,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n    return lambda x: f(repeated(f, n-1)(x)) =>           \r\n    return f(repeated(f, n-1))              <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    return lambda x: f(repeated(f, n-1)(x))\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 154, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 154, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 154, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":222,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n        return 0        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==1:\r\n        return f\r\n    elif n==0:\r\n        return 0\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def compose1(f, g):\n        \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n        def h(x):\n            return f(g(x))\n        return h\n    if n == 1:\n        return f\n    elif n == 0:\n        return identity\n    else:\n        return compose1(f,repeated(f,n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==1:\r\n        return f\r\n    elif n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":223,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n        return lambda x: f(repeated(f, n-1)(x)) =>           \r\n        return lambda x: f(repeated(f, n-1))(x) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    else:\n        return lambda x: f(repeated(f, n-1))(x)\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    else:\n        return lambda x: f(repeated(f, n-1)(x))\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in <lambda>","    return lambda x: f(repeated(f, n-1))(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":224,"studentId":0,"date":null,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n        i = n-1    =>           \r\n        if i <= 0: =>           \r\n        i = n      <=           \r\n        if i == 0: <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def helper_repeated(value):\r\n        i = n\r\n        k = f\r\n        if i==0:\r\n            return value\r\n        while i:\r\n            k = compose1(f, k)\r\n            i -= 1\r\n        return k(value)\r\n    return helper_repeated\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def helper_repeated(value):\n        i = n-1\n        k = f\n        if i <= 0:\n            return value\n        while i:\n            k = compose1(f, k)\n            i -= 1\n        return k(value)\n\n    return helper_repeated\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper_repeated(value):\r\n        i = n\r\n        k = identity\r\n        if i==0:\r\n            return value\r\n        while i:\r\n            k = compose1(f, k)\r\n            i -= 1\r\n        return k(value)\r\n    return helper_repeated\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":225,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    o = identity           =>           \r\n        o = compose1(f, o) =>           \r\n    o = f                  <=           \r\n        o = compose(f, o)  <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    o = f\n    while n > 0:\n        o = compose(f, o)\n        n -= 1\n    return o\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    o = identity \n    while n > 0:\n        o = compose1(f, o)\n        n -= 1\n    return o\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 151, in repeated","    o = compose(f, o)","NameError: name 'compose' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":226,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n    counter = n                              =>           \r\n    def function(x, counter = n ):           =>           \r\n        if counter == 0:                     =>           \r\n        else:                                =>           \r\n            return f(function(x, counter-1)) =>           \r\n    return function                          =>           \r\n    def function(x):                         <=           \r\n        counter = n                          <=           \r\n        while counter > 0:                   <=           \r\n            counter -= 1                     <=           \r\n            return f( )                      <=           \r\n        if n == 0:                           <=           \r\n    return function                          <=           \r\n   #counter = n                              <=           \r\n    #def function(x):                        <=           \r\n     #   if counter == 0:                    <=           \r\n      #      return x                        <=           \r\n       # else:                               <=           \r\n        #    counter == counter - 1          <=           \r\n         #   print (counter)                 <=           \r\n          #  return f(function(x))           <=           \r\n   # return function                         <=           \r\n                                             <=           \r\n                                             <=           \r\n                                             <=           \r\n                                             <=           \r\n                                             <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def function(x):\n        counter = n\n        while counter > 0:\n            counter -= 1\n            return f( ) \n        if n == 0:\n            return x\n    return function\n\n\n\n\n\n   #counter = n\n    #def function(x):\n     #   if counter == 0:\n      #      return x\n       # else: \n        #    counter == counter - 1\n         #   print (counter)\n          #  return f(function(x))\n   # return function \n\n\n\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    counter = n\n    def function(x, counter = n ):\n        if counter == 0:\n            return x\n        else: \n            return f(function(x, counter-1))\n    return function \n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 171, in function","    return f( )","TypeError: increment() missing 1 required positional argument: 'x'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":227,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n            y = f(y) =>           \r\n            x = f(y) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def recur_repeat(y):\n        k = 0\n        while k < n:\n            x = f(y)\n            k += 1\n        return y\n    return recur_repeat\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def recur_repeat(y):\n        k = 0\n        while k < n:\n            y = f(y)\n            k += 1\n        return y\n    return recur_repeat\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":228,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        return lambda x: x =>           \r\n        return increment   <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return increment\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":229,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n            return x    =>           \r\n            return f(x) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def repeated_helper(f, n, x):\r\n        if n==0:\r\n            return f(x)\r\n        else:\r\n            return repeated_helper(f, n-1, f(x))\r\n    return lambda x: repeated_helper(f, n, x)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeated_helper(f, n, x):\n        if n==0:\n            return x\n        else:\n            return repeated_helper(f, n-1, f(x))\n    return lambda x: repeated_helper(f, n, x)\n\n\n        \n\n    \"*** YOUR CODE HERE ***\"\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeated_helper(f, n, x):\r\n        if n==0:\r\n            return identity(x)\r\n        else:\r\n            return repeated_helper(f, n-1, f(x))\r\n    return lambda x: repeated_helper(f, n, x)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":230,"studentId":0,"date":null,"diff":"\r\nInputObject                          SideIndicator\r\n-----------                          -------------\r\n    def donothing(n):                =>           \r\n        return repeated(donothing,1) =>           \r\n    return total*(n-3) + n           =>           \r\n    return total*(6-n) + n           <=           \r\n                                     <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return n\r\n    newfunc = f\r\n    count = 1\r\n    while count<n:\r\n        newfunc = compose1(f, newfunc)\r\n        count += 1\r\n    return newfunc","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def compose1(f, g):\n        \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n        def h(x):\n            return f(g(x))\n        return h\n\n    def donothing(n):\n        return n\n\n    if n == 0:\n        return repeated(donothing,1)\n\n    newfunc = f\n    count=1\n    while count<n:\n        newfunc=compose1(f,newfunc)\n        count+=1\n    return newfunc\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return identity\r\n    newfunc = f\r\n    count = 1\r\n    while count<n:\r\n        newfunc = compose1(f, newfunc)\r\n        count += 1\r\n    return newfunc","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":231,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        return lambda x: x =>           \r\n        return a           <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    a, k = lambda x: f(x), n-1\r\n    if n==0:\r\n        return a\r\n    else:\r\n        while k>=1:\r\n            a = compose1(f, a)\r\n            k -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    a, k = lambda x: f(x), n-1\n    if n == 0:\n        return lambda x: x\n    else:\n        while k>=1:\n            a = compose1(f, a)\n            k -= 1\n    return a\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    a, k = lambda x: f(x), n-1\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        while k>=1:\r\n            a = compose1(f, a)\r\n            k -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":232,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n        return compose1(f, repeated(f, n-1))    =>           \r\n    if n <= 3:                                  =>           \r\n        return n                                =>           \r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n    else:                                       =>           \r\n        return compose1(f, repeated(n-1))       <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"any\"))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 171, in repeated","    return compose1(f, repeated(n-1))","TypeError: repeated() missing 1 required positional argument: 'n'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":233,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        return result =>           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def func(x):\n        k = 1\n        result = x\n        while k <= n:\n            result = f(result)\n            k += 1\n\n\n\n\n\n    return func\n    \ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def func(x):\n        k = 1\n        result = x\n        while k <= n:\n            result = f(result)\n            k += 1\n        return result\n\n\n\n\n\n    return func\n    \ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","","# Error: expected","#     8","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":234,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n            h = compose1(f, h) =>           \r\n            h = compose1(f, f) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def pooh(x):\n        k = n\n        if k == 0:\n            return x\n        if k == 1:\n            return f(x)\n        h = f\n        while k > 1:\n            h = compose1(f, f)\n            k -= 1\n        return h(x)\n    return pooh\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def pooh(x):\n        k = n\n        if k == 0:\n            return x\n        if k == 1:\n            return f(x)\n        h = f\n        while k > 1:\n            h = compose1(f, h)\n            k -= 1\n        return h(x)\n    return pooh\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":235,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        return (lambda x:x)                  =>           \r\n    return (lambda x: f(repeated(f,n-1)(x))) =>           \r\n                                             =>           \r\n    count=0                                  <=           \r\n        return f                             <=           \r\n    elif count<n+1:                          <=           \r\n        return f(count)                      <=           \r\n        count+=1                             <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    count=0\n    if n==0:\n        return f\n    elif count<n+1:\n        return f(count)\n        count+=1\n\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \n    if n==0:\n        return (lambda x:x)\n    return (lambda x: f(repeated(f,n-1)(x)))\n\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":236,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n    if n == 0:                               =>           \r\n        return lambda x: x                   =>           \r\n    if n == 1:                               =>           \r\n        return f                             =>           \r\n        return compose1(repeated(f, n-1), f) =>           \r\n    else:                                    =>           \r\n                                             =>           \r\n    a = lambda x : compose1(f, n)(x)         <=           \r\n    return a                                 <=           \r\n                                             <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    a = lambda x : compose1(f, n)(x)\n    return a\n    \ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    if n == 1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 155, in <lambda>","    a = lambda x : compose1(f, n)(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":237,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    g = f                  =>           \r\n        f = compose1(f, g) =>           \r\n        f = compose1(f, f) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return identity\n    while n > 1:\n        f = compose1(f, f)\n        n = n - 1\n    return f\n\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return identity\n    g = f\n    while n > 1:\n        f = compose1(f, g)\n        n = n - 1\n    return f\n\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":238,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n    if n == 0:       =>           \r\n        f = identity =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    f2 = f\r\n    while n>1:\r\n        f2 = compose1(f, f2)\r\n        n -= 1\r\n    return f2\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        f = identity\n    f2 = f\n    while n > 1:\n        f2 = compose1(f, f2)\n        n -= 1\n    return f2\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    f2 = f\r\n    while n>1:\r\n        f2 = compose1(f, f2)\r\n        n -= 1\r\n    return f2\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":239,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n            while y < n:  =>           \r\n            while y <= n: <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def apply_func(x):\r\n        if n==0:\r\n            return x\r\n        if n==1:\r\n            return f(x)\r\n        else:\r\n            y, a = 1, f\r\n            while y<=n:\r\n                a = compose1(f, a)\r\n                y += 1\r\n            return a(x)\r\n    return apply_func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def apply_func(x):\n        if n == 0:\n            return x\n        if n == 1:\n            return f(x)\n        else:\n            y, a = 1, f\n            while y < n:\n                a = compose1(f, a)\n                y += 1\n            return a(x) \n    return apply_func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def apply_func(x):\r\n        if n==0:\r\n            return x\r\n        if n==1:\r\n            return f(x)\r\n        else:\r\n            y, a = 1, identity\r\n            while y<=n:\r\n                a = compose1(f, a)\r\n                y += 1\r\n            return a(x)\r\n    return apply_func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":240,"studentId":0,"date":null,"diff":"\r\nInputObject                     SideIndicator\r\n-----------                     -------------\r\n        return lambda x: x      =>           \r\n        return reduce(compose1) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return reduce(compose1)\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    if n == 1:\n        return f \n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==0:\r\n        return reduce(compose1)\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 164, in repeated","    return reduce(compose1)","NameError: name 'reduce' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":241,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        return lambda x: x                   =>           \r\n    first=g(n-1)                             =>           \r\n    second=g(n-2)                            =>           \r\n    third=g(n-3)                             =>           \r\n    while i<n:                               =>           \r\n        first=g(n-1)                         =>           \r\n        second=first                         =>           \r\n        third=second                         =>           \r\n        current=first + 2*second + 3*third   =>           \r\n        i+=1                                 =>           \r\n    return current                           =>           \r\n        return n                             <=           \r\n    # first=g(n-1)                           <=           \r\n    # second=g(n-1)                          <=           \r\n    # third=g(n-2)                           <=           \r\n    # previous=g(n)                          <=           \r\n    # i=1                                    <=           \r\n    # while i<n:                             <=           \r\n    #     first=                             <=           \r\n    #     second=first                       <=           \r\n    #     third=second                       <=           \r\n    #     current=first + 2*second + 3*third <=           \r\n    #     i+=1                               <=           \r\n    # return current                         <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def call_function(i):\r\n        if i==n-1:\r\n            return f\r\n        else:\r\n            return compose1(f, call_function(i+1))\r\n    if n==0:\r\n        return n\r\n    return call_function(0)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def call_function(i):\n        if i==n-1:\n            return f\n        else:\n            return compose1(f,call_function(i+1))\n    if n==0:\n        return lambda x: x\n    return call_function(0)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def call_function(i):\r\n        if i==n-1:\r\n            return f\r\n        else:\r\n            return compose1(f, call_function(i+1))\r\n    if n==0:\r\n        return identity\r\n    return call_function(0)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":242,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        count = 0         =>           \r\n        while count != n: =>           \r\n            count += 1    =>           \r\n        while n != 0:     <=           \r\n            n -= 1        <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeat(x):\n        while n != 0:\n            x = f(x)\n            n -= 1\n        return x\n    return repeat\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeat(x):\n        count = 0\n        while count != n:\n            x = f(x)\n            count += 1\n        return x\n    return repeat\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 154, in repeat","    while n != 0:","UnboundLocalError: local variable 'n' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":243,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    if n==0:            =>           \r\n        return identity =>           \r\n    if n==1:            <=           \r\n        return f        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==0:\n        return identity\n    else: \n        return compose1(f, repeated(f, n-1))\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    if n==1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":244,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n            x = f(x)                  =>           \r\n        return x                      =>           \r\n            function_to_repeat = f(x) <=           \r\n        return function_to_repeat     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def helper(x):\n        for i in range(n):\n            function_to_repeat = f(x)\n        return function_to_repeat\n    return helper\n    # def compose1(f, g):\n    #     def h(x):\n    #         return f(g(x))\n    #     return h\n    # counter = 1\n\n    # if n == 0:\n    #     return compose1(f, g)\n    # else: \n    #     for i in range(n + 1): \n    #         compose1(f, g) \n    # if n == 0: \n    #     return compose1(f, n)\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def helper(x):\n        for i in range(n):\n            x = f(x)\n        return x\n    return helper\n    # def compose1(f, g):\n    #     def h(x):\n    #         return f(g(x))\n    #     return h\n    # counter = 1\n\n    # if n == 0:\n    #     return compose1(f, g)\n    # else: \n    #     for i in range(n + 1): \n    #         compose1(f, g) \n    # if n == 0: \n    #     return compose1(f, n)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","6","","# Error: expected","#     8","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":245,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    if n == 0: =>           \r\n    if n > 0:  <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n > 0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":246,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    if n == 0:             =>           \r\n        return lambda x: x =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n>1:\r\n        qwer = repeated(f, n-1)\r\n        return lambda x: f(qwer(x))\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n > 1:\n        qwer = repeated(f, n - 1)\n        return lambda x: f(qwer(x))\n    if n == 0:\n        return lambda x: x\n    return f\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n>1:\r\n        qwer = repeated(f, n-1)\r\n        return lambda x: f(qwer(x))\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":247,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        return lambda n: n =>           \r\n        return identity(n) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity(n)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return lambda n: n\n    else:\n        return compose1(f, repeated(f, n-1))\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity(identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 170, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 170, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 170, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":248,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        return compose1(f, repeated(f, n-1)) =>           \r\n        return compose(f, repeated(f, n-1))  <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    if n==1:\r\n        return lambda x: f(x)\r\n    else:\r\n        return compose(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    if  n == 0:\n        return lambda x: x\n    if  n == 1:\n        return lambda x: f(x)\n    else:\n        return compose1(f, repeated(f, n-1))\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    if n==1:\r\n        return lambda x: f(x)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(LeafWildcard(\"ArgNode\"))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 167, in repeated","    return compose(f, repeated(f, n-1))","NameError: name 'compose' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":249,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n    if n == 1:                               =>           \r\n        return compose1(f, repeated(f, n-1)) =>           \r\n    if n == 1:                               <=           \r\n        def func(x):                         <=           \r\n            return f(repeated(f,n-1))        <=           \r\n        return func                          <=           \r\n                                             <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        def func(x):\r\n            return f(repeated(f, n-1))\r\n        return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    if n == 1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        def func(x):\r\n            return f(repeated(f, n-1)(x))\r\n        return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in func","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":250,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n        i = n                =>           \r\n        while i > 0:         =>           \r\n            if i == 1:       =>           \r\n                i -= 1       =>           \r\n                i -= 2       =>           \r\n    counter = n              <=           \r\n        while counter > 0:   <=           \r\n            if counter == 1: <=           \r\n                counter -= 1 <=           \r\n                counter -= 2 <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    counter = n\n    def helper(m):\n        while counter > 0:\n            if counter == 1:\n                m = f(m)\n                counter -= 1\n            else:\n                m = compose1(f, f)(m)\n                counter -= 2\n        return m\n    return helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def helper(m):\n        i = n\n        while i > 0:\n            if i == 1:\n                m = f(m)\n                i -= 1\n            else:\n                m = compose1(f, f)(m)\n                i -= 2\n        return m\n    return helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in helper","    while counter > 0:","UnboundLocalError: local variable 'counter' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":251,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    if(n==0):           =>           \r\n        return identity =>           \r\n    if(n==1):           <=           \r\n        return f        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if (n==1):\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if(n==0):\n        return identity\n    return compose1(f,repeated(f,n-1))\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if (n==1):\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 152, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 152, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 152, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 152, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 152, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 152, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 150, in repeated","    if(n==1):","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":252,"studentId":0,"date":null,"diff":"\r\nInputObject                            SideIndicator\r\n-----------                            -------------\r\n    if n == 0:                         =>           \r\n        return identity                =>           \r\n    else:                              =>           \r\n        count = 1                      =>           \r\n        inner = f                      =>           \r\n        while count < n:               =>           \r\n            shell = compose1(f, inner) =>           \r\n            inner = shell              =>           \r\n            count += 1                 =>           \r\n        return inner                   =>           \r\n    tot = 1 + 2 + 3                    =>           \r\n    if n == 0:                         =>           \r\n        return identity(n)             =>           \r\n    else:                              =>           \r\n        tot += g(n - 1)                =>           \r\n        return tot                     =>           \r\n                                       =>           \r\n    # if n == 0:                       <=           \r\n    #     return x                     <=           \r\n    # else:                            <=           \r\n    count = 1                          <=           \r\n    inner = f                          <=           \r\n    while count < n:                   <=           \r\n        shell = compose1(f, inner)     <=           \r\n        inner = shell                  <=           \r\n        count += 1                     <=           \r\n    return inner                       <=           \r\n    \"*** YOUR CODE HERE ***\"           <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    count = 1\r\n    inner = f\r\n    while count<n:\r\n        shell = compose1(f, inner)\r\n        inner = shell\r\n        count += 1\r\n    return inner\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \n    if n == 0:\n    \treturn identity \n    else: \n\t    count = 1\n\t    inner = f\n\t    while count < n: \n\t    \tshell = compose1(f, inner)\n\t    \tinner = shell \n\t    \tcount += 1\n\t    return inner\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    count = 1\r\n    inner = f\r\n    while count<n:\r\n        shell = compose1(f, inner)\r\n        inner = shell\r\n        count += 1\r\n    return inner\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":253,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    if n == 0:             =>           \r\n        return lambda n: n =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    while n>0:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda n: n\n    if n == 1:\n        return f\n    while n > 0:\n        return compose1(f, repeated(f, n - 1))\n\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    while n>0:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":254,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n            result = f(result)        =>           \r\n            result = compose1(f,f)(x) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def nth(x):\n        result = x\n        count = n\n        while count > 0:\n            result = compose1(f,f)(x)\n            count -= 1\n        return result\n    return nth\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def nth(x):\n        result = x\n        count = n\n        while count > 0:\n            result = f(result)\n            count -= 1\n        return result\n    return nth\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":255,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n    return identity =>           \r\n    return result   <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def identity(x):\r\n        return x\r\n    for i in range(0, n):\r\n        identity = compose1(f, identity)\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def identity(x):\n        return x\n    for i in range(0, n):\n        identity = compose1(f, identity)\n    return identity\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def identity(x):\r\n        return x\r\n    for i in range(0, n):\r\n        identity = compose1(f, identity)\r\n    return identity\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 171, in repeated","    return result","NameError: name 'result' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":256,"studentId":0,"date":null,"diff":"\r\nInputObject                         SideIndicator\r\n-----------                         -------------\r\n    def final(var):                 =>           \r\n        store = n                   =>           \r\n        while store > 0:            =>           \r\n            var = f(var)            =>           \r\n            store -= 1              =>           \r\n        return var                  =>           \r\n    return final                    =>           \r\n    def final(f, n):                <=           \r\n        if (n == 1):                <=           \r\n            return f                <=           \r\n            return f(final(f, n-1)) <=           \r\n    return final(f, n)              <=           \r\n        else:                       <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n\t\"\"\"Return the function that computes the nth application of f.\n\n\t>>> add_three = repeated(increment, 3)\n\t>>> add_three(5)\n\t8\n\t>>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n\t243\n\t>>> repeated(square, 2)(5) # square(square(5))\n\t625\n\t>>> repeated(square, 4)(5) # square(square(square(square(5))))\n\t152587890625\n\t>>> repeated(square, 0)(5)\n\t5\n\t\"\"\"\n\tdef final(f, n):\n\t\tif (n == 1):\n\t\t\treturn f\n\t\telse:\n\t\t\treturn f(final(f, n-1))\n\treturn final(f, n)\ndef compose1(f, g):\n\t\"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n\tdef h(x):\n\t\treturn f(g(x))\n\treturn h\n\n","after":"def repeated(f, n):\n\t\"\"\"Return the function that computes the nth application of f.\n\n\t>>> add_three = repeated(increment, 3)\n\t>>> add_three(5)\n\t8\n\t>>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n\t243\n\t>>> repeated(square, 2)(5) # square(square(5))\n\t625\n\t>>> repeated(square, 4)(5) # square(square(square(square(5))))\n\t152587890625\n\t>>> repeated(square, 0)(5)\n\t5\n\t\"\"\"\n\tdef final(var):\n\t\tstore = n\n\t\twhile store > 0:\n\t\t\tvar = f(var)\n\t\t\tstore -= 1\n\t\treturn var\n\treturn final\ndef compose1(f, g):\n\t\"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n\tdef h(x):\n\t\treturn f(g(x))\n\treturn h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    return final(f, n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in final","    return f(final(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in final","    return f(final(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":257,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        if n == 0:   =>           \r\n            return x =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    answer = 0\r\n    def helper(x):\r\n        i = 0\r\n        while i<n:\r\n            i += 1\r\n            answer = f(x)\r\n            x = f(x)\r\n        return answer\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    answer = 0\n    def helper(x):\n        i = 0\n        if n == 0:\n            return x\n        while i < n:\n            i += 1\n            answer = f(x)\n            x = f(x)\n        return answer\n            \n    return helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    answer = 0\r\n    def helper(x):\r\n        i = 0\r\n        while i<n:\r\n            i += 1\r\n            answer = f(x)\r\n            x = f(x)\r\n        return x\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 164, in helper","    return answer","UnboundLocalError: local variable 'answer' referenced before assignment","","# Error: expected","#     5","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":258,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        h = n            =>           \r\n        if h == 0:       =>           \r\n            while h > 0: =>           \r\n                h -= 1   =>           \r\n        if n == 0:       <=           \r\n            while n > 0: <=           \r\n                n -= 1   <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def change_value(x):\n        if n == 0:\n            return x\n        else:\n            while n > 0:\n                x = f(x)\n                n -= 1\n        return x\n    return change_value\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def change_value(x):\n        h = n\n        if h == 0:\n            return x\n        else:\n            while h > 0:\n                x = f(x)\n                h -= 1\n        return x\n    return change_value\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in change_value","    if n == 0:","UnboundLocalError: local variable 'n' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":259,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    if n == 0:             =>           \r\n        return lambda x: x =>           \r\n    if n == 1:             =>           \r\n    if n <= 1:             <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n<=1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return lambda x: x\n    if n == 1:\n        return f\n    return compose1(f,repeated(f,n-1))\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n<=1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":260,"studentId":0,"date":null,"diff":"\r\nInputObject                 SideIndicator\r\n-----------                 -------------\r\n                return x    =>           \r\n                return f(x) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        def t(n, x):\r\n            if n==0:\r\n                return f(x)\r\n            return t(n-1, f(x))\r\n        return t(n, x)\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        def t(n,x):\n            if n==0:\n                return x\n            return t(n-1, f(x))\n        return t(n, x)\n    return h\n\n\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        def t(n, x):\r\n            if n==0:\r\n                return identity(x)\r\n            return t(n-1, f(x))\r\n        return t(n, x)\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":261,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n        return compose1(f, repeated(f, n - 1)) =>           \r\n        return compose(f, repeated(f, n - 1))  <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    elif n == 1:\n        return f\n    else:\n        return compose1(f, repeated(f, n - 1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(LeafWildcard(\"ArgNode\"))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return compose(f, repeated(f, n - 1))","NameError: name 'compose' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":262,"studentId":0,"date":null,"diff":"\r\nInputObject                                               SideIndicator\r\n-----------                                               -------------\r\n            return compose1(f,repeated_helper(counter-1)) =>           \r\n            return compose1(f,repeated_helper(n-1))       <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def repeated_helper(counter):\r\n        if counter==2:\r\n            return compose1(f, f)\r\n        else:\r\n            return compose1(f, repeated_helper(n-1))\r\n    if n==0:\r\n        return lambda x: x\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return repeated_helper(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeated_helper(counter):\n        if counter == 2:\n            return compose1(f,f)\n        else:\n            return compose1(f,repeated_helper(counter-1))\n    if n == 0:\n        return lambda x: x\n    if n == 1:\n        return f\n    else:\n        return repeated_helper(n)\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeated_helper(counter):\r\n        if counter==2:\r\n            return compose1(f, f)\r\n        else:\r\n            return compose1(f, repeated_helper(counter-1))\r\n    if n==0:\r\n        return lambda x: x\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return repeated_helper(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-counter)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated_helper","    return compose1(f,repeated_helper(n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated_helper","    return compose1(f,repeated_helper(n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated_helper","    return compose1(f,repeated_helper(n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated_helper","    return compose1(f,repeated_helper(n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated_helper","    return compose1(f,repeated_helper(n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated_helper","    return compose1(f,repeated_helper(n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in repeated_helper","    if counter == 2:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     243","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":263,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        return identity   =>           \r\n        return f          =>           \r\n        return identity() <=           \r\n        return f()        <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity()\n    elif n == 1:\n        return f()\n    else:\n        return compose1(f, repeated(f, n-1))\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    elif n == 1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in repeated","    return f()","TypeError: increment() missing 1 required positional argument: 'x'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":264,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n        return lambda x: repeated(f,n-1)(f(x)) =>           \r\n        return lambda x: repeated(f,n-1)(x)    <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    else:\n        return lambda x: repeated(f,n-1)(x)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    else:\n        return lambda x: repeated(f,n-1)(f(x))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":265,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n    return repeated_n    =>           \r\n    return repeated_n(n) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeated_n(x):\n        i = n\n        while i > 0:\n            x = f(x)\n            i -=1\n        return x\n    return repeated_n(n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeated_n(x):\n        i = n\n        while i > 0:\n            x = f(x)\n            i -=1\n        return x\n    return repeated_n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":266,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n        return lambda x: x                        =>           \r\n        return lambda x: f(repeated(f, n - 1)(x)) =>           \r\n        return x                                  <=           \r\n        return f(repeated(f, n - 1))              <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return x\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return lambda x: x\n    else:\n        return lambda x: f(repeated(f, n - 1)(x))\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 155, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 155, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 155, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 153, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":267,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        return identity   =>           \r\n        return identity() <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    finalh = 0\r\n    base = n\r\n    if n==0:\r\n        return identity()\r\n    def repeated_helper(f, n, finalh):\r\n        if n==base:\r\n            finalh = compose1(f, f)\r\n            return repeated_helper(f, n-1, finalh)\r\n        elif n==1:\r\n            return finalh\r\n        elif n>1:\r\n            finalh = compose1(finalh, f)\r\n            return repeated_helper(f, n-1, finalh)\r\n    return repeated_helper(f, n, finalh)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    finalh = 0\n    base = n\n    if n == 0:\n        return identity\n    def repeated_helper(f,n,finalh):\n        if n == base:\n            finalh = compose1(f,f)\n            return repeated_helper(f,n-1, finalh)\n        elif n == 1:\n            return finalh\n        elif n > 1:\n            finalh = compose1(finalh, f)\n            return repeated_helper(f,n-1, finalh)\n\n    return repeated_helper(f,n,finalh)\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    finalh = 0\r\n    base = n\r\n    if n==0:\r\n        return identity()\r\n    def repeated_helper(f, n, finalh):\r\n        if n==base:\r\n            finalh = compose1(f, f)\r\n            return repeated_helper(f, n-1, finalh)\r\n        elif n==1:\r\n            return finalh\r\n        elif n>1:\r\n            finalh = compose1(finalh, f)\r\n            return repeated_helper(f, n-1, finalh)\r\n    return repeated_helper(f, n, finalh)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 170, in repeated","    return identity()","TypeError: identity() missing 1 required positional argument: 'x'","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":268,"studentId":0,"date":null,"diff":"\r\nInputObject                 SideIndicator\r\n-----------                 -------------\r\n    if n == 0:              =>           \r\n        func = lambda x : x =>           \r\n        func = f            =>           \r\n    else:                   =>           \r\n    func = f                <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    func = f\r\n    while n>1:\r\n        func = compose1(f, func)\r\n        n -= 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        func = lambda x : x\n    else:\n        func = f\n    while n > 1:\n        func = compose1(f,func)\n        n -= 1\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    func = f\r\n    while n>1:\r\n        func = compose1(f, func)\r\n        n -= 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":269,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n    def h(x):                  =>           \r\n        k = 0                  =>           \r\n        while k < n:           =>           \r\n            x, k = f(x), k + 1 =>           \r\n        return x               =>           \r\n    return h                   =>           \r\n    g = f                      <=           \r\n    while n > 1:               <=           \r\n        g = compose1(f, g)     <=           \r\n        n = n - 1              <=           \r\n    return g                   <=           \r\n                               <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        k = 0\n        while k < n:\n            x, k = f(x), k + 1\n        return x\n    return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":270,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n        b = identity(1)                        =>           \r\n        return compose1(identity,identity)     =>           \r\n    x = 3                                      =>           \r\n    return x*g(n-x)                            =>           \r\n        x = 3                                  =>           \r\n        total = 0                              =>           \r\n        while x > 0:                           =>           \r\n            total += x * g(n-x)                =>           \r\n            x -= 1                             =>           \r\n        return total                           =>           \r\n                                               =>           \r\n        def zero_func():                       <=           \r\n            return 0                           <=           \r\n        def first_func(x):                     <=           \r\n            return x                           <=           \r\n        return compose1(first_func, zero_func) <=           \r\n        return n + 1                           <=           \r\n        i = 1                                  <=           \r\n        new_num = 0                            <=           \r\n        while i <= n + 1:                      <=           \r\n            new_num += (i * g(n-i))            <=           \r\n            i += 1                             <=           \r\n        return new_num                         <=           \r\n    else:                                      <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    i = 2\r\n    l = f\r\n    if n==0:\r\n        def zero_func():\r\n            return 0\r\n        def first_func(x):\r\n            return x\r\n        return compose1(first_func, zero_func)\r\n    elif n==1:\r\n        return l\r\n    while i<=n:\r\n        l = compose1(f, l)\r\n        i += 1\r\n    return l\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    i = 2\n    l = f\n    if n == 0:\n        b = identity(1)\n        return compose1(identity,identity)\n    elif n == 1:\n        return l\n    while i <= n:\n        l = compose1(f,l)\n        i += 1\n    return l\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    i = 2\r\n    l = f\r\n    if n==0:\r\n        def zero_func():\r\n            return 0\r\n        def first_func(x):\r\n            return x\r\n        return compose1(first_func, identity)\r\n    elif n==1:\r\n        return l\r\n    while i<=n:\r\n        l = compose1(f, l)\r\n        i += 1\r\n    return l\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 176, in h","    return f(g(x))","TypeError: zero_func() takes 0 positional arguments but 1 was given","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":271,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n            return x    =>           \r\n            return f(x) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def repeated_helper(x):\r\n        if n==0:\r\n            return f(x)\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return repeated_helper\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    return compose1(f, f)","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\" \n    def repeated_helper(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f,n-1)(x))\n    return repeated_helper\n    \n    def compose1(f, g):\n        \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n        def h(x):\n            return f(g(x))\n        return h\n    return compose1(f,f)\n\n\n\n    \n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeated_helper(x):\r\n        if n==0:\r\n            return identity(x)\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return repeated_helper\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    return compose1(f, f)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":272,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        return identity                      =>           \r\n        return compose1(f, repeated(f,n-1))  =>           \r\n        return 5                             <=           \r\n        return compose1(f, repeated(f,n-1)); <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return 5\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n == 0:\n        return identity\n    else:    \n        return compose1(f, repeated(f,n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 177, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 177, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 177, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":273,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n    def execute_functions(x):                  =>           \r\n        def counter(i):                        =>           \r\n            if i==n:                           =>           \r\n                return x                       =>           \r\n            else:                              =>           \r\n                return f(counter(i+1))         =>           \r\n        return counter(0)                      =>           \r\n    return execute_functions                   =>           \r\n    def execute_functions(x,i):                <=           \r\n        if i==n:                               <=           \r\n            return x                           <=           \r\n        else:                                  <=           \r\n            return f(execute_functions(x,i+1)) <=           \r\n    return execute_functions(x,1)              <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def execute_functions(x,i):\n        if i==n:\n            return x\n        else:\n            return f(execute_functions(x,i+1))\n    return execute_functions(x,1)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def execute_functions(x):\n        def counter(i):\n            if i==n:\n                return x\n            else:\n                return f(counter(i+1))\n        return counter(0)\n    return execute_functions\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated","    return execute_functions(x,1)","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":274,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n        return compose1(f, repeated(f, n-1))      =>           \r\n                                                  =>           \r\n    if n <= 3:                                    =>           \r\n        return n                                  =>           \r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)       =>           \r\n    else:                                         =>           \r\n        return f(repeated(f, n-1))                <=           \r\n        # # return compose1(f, repeated(f, n-1))  <=           \r\n        # return f(repeated(f, n-1))              <=           \r\n    \"*** YOUR CODE HERE ***\"                      <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1)) \n        \n\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":275,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n    newfunc = f                              =>           \r\n    adder = 0                                =>           \r\n    if n <= 3:                               =>           \r\n        return identity(n)                   =>           \r\n        return g(n) + (adder + 1) * g(n - 1) =>           \r\n    else:                                    =>           \r\n    \"*** YOUR CODE HERE ***\"                 <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    while n > 1:\n        n -= 1\n        newfunc = compose1(f, newfunc)\n    return newfunc\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    newfunc = f\n    while n > 1:\n        n -= 1\n        newfunc = compose1(f, newfunc)\n    return newfunc\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 155, in repeated","    newfunc = compose1(f, newfunc)","UnboundLocalError: local variable 'newfunc' referenced before assignment","","# Error: expected","#     ","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":276,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n        for x in range( 1 , n + 1 ):      =>           \r\n            b = f(b)                      =>           \r\n        return b                          =>           \r\n    return a                              =>           \r\n                                          =>           \r\n        if n == 0:                        <=           \r\n            return f                      <=           \r\n        elif n > 0:                       <=           \r\n            return f(repeated(f , n - 1)) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def a(b):\n        if n == 0:\n            return f\n        elif n > 0:\n            return f(repeated(f , n - 1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def a(b):\n        for x in range( 1 , n + 1 ):\n            b = f(b)\n        return b\n    return a\n\n    \ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":277,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                                                                        \r\n-----------                                                                                                                                        \r\n    return accumulate(lambda base, n: combiner(base, n) if n % 2 == 1 else base, base, n, term) if pred is odd else accumulate(combiner, base, n...\r\n    x = identity                                                                                                                                   \r\n    while n >= 1:                                                                                                                                  \r\n        x = compose1(f, x)                                                                                                                         \r\n        n -= 1                                                                                                                                     \r\n    return x                                                                                                                                       \r\n    return accumulate(lambda base, n: combiner(base, n) if n % 2 == 1 else base, base, n, term)                                                    \r\n    while n > 1:                                                                                                                                   \r\n        func = f(x)                                                                                                                                \r\n        n-=1                                                                                                                                       \r\n    return func                                                                                                                                    \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    while n > 1:\n        func = f(x)\n        n-=1\n    return func\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    x = identity\n    while n >= 1:\n        x = compose1(f, x)\n        n -= 1\n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 151, in repeated","    func = f(x)","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":278,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n    result = identity =>           \r\n    while n>0:        =>           \r\n    result = f        <=           \r\n    while n>1:        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    result = f\r\n    while n>1:\r\n        result = compose1(result, f)\r\n        n = n-1\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    result = identity\n    while n>0:\n        result = compose1(result,f)\n        n = n - 1\n    return result\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    result = f\r\n    while n>1:\r\n        result = compose1(result, f)\r\n        n = n-1\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":279,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n    if n==0:                  =>           \r\n        return identity       =>           \r\n    elif n==1:                =>           \r\n        return f              =>           \r\n        t=f                   =>           \r\n        while n>1:            =>           \r\n            t = compose1(t,f) =>           \r\n            n=n-1             =>           \r\n                              =>           \r\n        return t              =>           \r\n    else:                     =>           \r\n                              =>           \r\n                              <=           \r\n    t=f                       <=           \r\n    while n>1:                <=           \r\n        t = compose1(t,f)     <=           \r\n        n=n-1                 <=           \r\n    return t                  <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    t = f\r\n    while n>1:\r\n        t = compose1(t, f)\r\n        n = n-1\r\n    return t\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n        return identity\n\n    elif n==1:\n        return f\n\n    else:\n        t=f\n        while n>1:\n            t = compose1(t,f)\n            n=n-1\n    \n        return t\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    t = f\r\n    while n>1:\r\n        t = compose1(t, f)\r\n        n = n-1\r\n    return t\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":280,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n            return identity                =>           \r\n    def gHelp(count, total):               =>           \r\n        if count==0:                       =>           \r\n            return total                   =>           \r\n        else:                              =>           \r\n            return gHelp(count-1, total+1) =>           \r\n    return gHelp(n, 0)                     =>           \r\n            return n                       <=           \r\n    \"*** YOUR CODE HERE ***\"               <=           \r\n                                           <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def repeatedHelp(count):\r\n        if count<=0:\r\n            return n\r\n        else:\r\n            return compose1(f, repeatedHelp(count-1))\r\n    return repeatedHelp(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625   \n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeatedHelp(count):\n        if count <= 0:\n            return identity\n        else:\n            return compose1(f,repeatedHelp(count-1))\n    return repeatedHelp(n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeatedHelp(count):\r\n        if count<=0:\r\n            return identity\r\n        else:\r\n            return compose1(f, repeatedHelp(count-1))\r\n    return repeatedHelp(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 167, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 167, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 167, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":281,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n        return f =>           \r\n        return   <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return \n    if n == 1:\n        return lambda x: x\n    return compose1(f, repeated(f,n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    if n == 1:\n        return f\n    return compose1(f, repeated(f,n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":282,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        while k < n:  =>           \r\n        while k <= n: <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def help(x):\r\n        k = 0\r\n        while k<=n:\r\n            x = f(x)\r\n            k += 1\r\n        return x\r\n    return help\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def help(x):\n        k = 0\n        while k < n:\n            x = f(x)\n            k += 1\n        return x\n    return help\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def help(x):\r\n        k = 1\r\n        while k<=n:\r\n            x = f(x)\r\n            k += 1\r\n        return x\r\n    return help\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":283,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n    return repeated_function(lambda x: x, n) =>           \r\n    return repeated_function(f, n - 1)       <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def repeated_function(h, x):\r\n        if x==0:\r\n            return h\r\n        else:\r\n            return repeated_function(compose1(h, f), x-1)\r\n    return repeated_function(f, n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeated_function(h, x):\n        if x == 0:\n            return h\n        else:\n            return repeated_function(compose1(h, f), x - 1)\n    return repeated_function(lambda x: x, n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def repeated_function(h, x):\r\n        if x==0:\r\n            return h\r\n        else:\r\n            return repeated_function(compose1(h, f), x-1)\r\n    return repeated_function(f, n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 158, in repeated_function","    return repeated_function(compose1(h, f), x - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 158, in repeated_function","    return repeated_function(compose1(h, f), x - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 158, in repeated_function","    return repeated_function(compose1(h, f), x - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 158, in repeated_function","    return repeated_function(compose1(h, f), x - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 158, in repeated_function","    return repeated_function(compose1(h, f), x - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 158, in repeated_function","    return repeated_function(compose1(h, f), x - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 155, in repeated_function","    if x == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":284,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    def zerocase(x):    =>           \r\n        return x        =>           \r\n        return zerocase =>           \r\n        return f        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    total = f\r\n    count = n\r\n    while n>1:\r\n        total = compose1(f, total)\r\n        n -= 1\r\n    if n==0:\r\n        return f\r\n    return total\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def zerocase(x):\n\t    return x\n    total = f\n    count = n\n    while n > 1:\n\t    total = compose1(f, total)\n\t    n -= 1\n    if n == 0:\n\t    return zerocase\n    return total\n\n\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    total = f\r\n    count = n\r\n    while n>1:\r\n        total = compose1(f, total)\r\n        n -= 1\r\n    if n==0:\r\n        return identity\r\n    return total\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":285,"studentId":0,"date":null,"diff":"\r\nInputObject                                                    SideIndicator\r\n-----------                                                    -------------\r\n    def func_repeat(num_val):                                  =>           \r\n        i = 0                                                  =>           \r\n        while i < n:                                           =>           \r\n            i += 1                                             =>           \r\n    def seventh_heaven(placeholder, m, counter):               =>           \r\n        if counter == n:                                       =>           \r\n            return placeholder                                 =>           \r\n        elif placeholder % 7 or has_seven(placeholder):        =>           \r\n            m = m*(-1)                                         =>           \r\n        return seventh_heaven(placeholder + m, m, counter + 1) =>           \r\n    return seventh_heaven(0, 1, 0)                             =>           \r\n                                                               =>           \r\n    def func_repeat(num_val):                                  <=           \r\n        while n > 0:                                           <=           \r\n            n -= 1                                             <=           \r\n    counter, placeholder = 1, 1                                <=           \r\n    def seventh_heaven(counter):                               <=           \r\n        placeholder += 1                                       <=           \r\n        if placeholder % 7 or has_seven(placeholder):          <=           \r\n            placeholder -= 1                                   <=           \r\n            placeholder += 1                                   <=           \r\n    while counter <= n:                                        <=           \r\n        seventh_heaven(placeholder)                            <=           \r\n        counter += 1                                           <=           \r\n    return counter                                             <=           \r\n        else:                                                  <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def func_repeat(num_val): \n        while n > 0:\n            num_val = f(num_val)\n            n -= 1\n        return num_val\n    return func_repeat\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def func_repeat(num_val):\n        i = 0\n        while i < n:\n            num_val = f(num_val)\n            i += 1\n        return num_val\n    return func_repeat\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in func_repeat","    while n > 0:","UnboundLocalError: local variable 'n' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":286,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        return compose1(f, repeated(f, n-1)) =>           \r\n        return compose1(f, repeated(n-1))    <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n<1:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n < 1:\n        return lambda x: x\n    elif n == 1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n<1:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"any\"))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return compose1(f, repeated(n-1))","TypeError: repeated() missing 1 required positional argument: 'n'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":287,"studentId":0,"date":null,"diff":"\r\nInputObject                 SideIndicator\r\n-----------                 -------------\r\n        return identity     =>           \r\n        return identity(x)  <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity(x)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n        return identity\n    else:\n        return compose1(f,repeated(f,n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity(identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 155, in repeated","    return identity(x)","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":288,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n    return (lambda x: f(repeated(f, n-1)(x))) =>           \r\n    return (lambda x: f(repeat(f, n-1)(x)))   <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return (lambda x:x)\n    return (lambda x: f(repeat(f, n-1)(x)))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return (lambda x:x)\n    return (lambda x: f(repeated(f, n-1)(x)))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in <lambda>","    return (lambda x: f(repeat(f, n-1)(x)))","NameError: name 'repeat' is not defined","","# Error: expected","#     8","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":289,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n        return ()       <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    elif n==2:\r\n        return compose1(f, f)\r\n    elif n==0:\r\n        return \r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==1:\n        return f\n    elif n==2:\n        return compose1(f,f)\n    elif n==0:\n        return identity\n    else:\n        return compose1(f,repeated(f,n-1))\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    elif n==2:\r\n        return compose1(f, f)\r\n    elif n==0:\r\n        return \r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'tuple' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":290,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n        return f                               =>           \r\n        return compose1(repeated(f, n-1), f)   =>           \r\n        return f(identity)                     <=           \r\n        result = compose1(repeated(f, n-1), f) <=           \r\n        return result                          <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    result = 0\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f(identity)\r\n    else:\r\n        result = compose1(repeated(f, n-1), f)\r\n        return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    result = 0\n    if n == 0:\n        return identity\n    elif n == 1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    result = 0\r\n    if n==0:\r\n        return identity\r\n    elif identity==1:\r\n        return f(identity)\r\n    else:\r\n        result = compose1(repeated(f, n-1), f)\r\n        return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 180, in repeated","    result = compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 180, in repeated","    result = compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 178, in repeated","    return f(identity)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":291,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        return repeat(n) =>           \r\n        return repeat(m) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def composed_function(x):\r\n        def repeat(m):\r\n            if m==0:\r\n                return x\r\n            elif m==1:\r\n                return f(x)\r\n            else:\r\n                return f(repeat(m-1))\r\n        return repeat(m)\r\n    return composed_function","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    def composed_function(x):\n        def repeat(m):\n            if m == 0:\n                return x\n            elif m == 1:\n                return f(x)\n            else:\n                return f(repeat(m-1))\n        return repeat(n)\n    return composed_function\n\n    \"\"\"\n    def var(x):\n        def compose1(f, n):\n            if n == 0:\n                return x\n            elif n == 1:\n                return f(x)\n            return f(compose1(f, n-1))\n        return compose1\n\"\"\"\n\n    # def h(x):\n    #     if n == 0:\n    #         return 0\n    #     return f(repeated(f, n-1))\n    # return h\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def composed_function(x):\r\n        def repeat(m):\r\n            if m==0:\r\n                return x\r\n            elif m==1:\r\n                return f(x)\r\n            else:\r\n                return f(repeat(m-1))\r\n        return repeat(n)\r\n    return composed_function","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in composed_function","    return repeat(m)","NameError: name 'm' is not defined","","# Error: expected","#     8","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":292,"studentId":0,"date":null,"diff":"\r\nInputObject   SideIndicator\r\n-----------   -------------\r\n        i = 1 =>           \r\n    i = 1     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    i = 1\n    def inner(x):\n        while i <= n:\n            x = f(x)\n            i += 1\n        return x\n    return inner\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def inner(x):\n        i = 1\n        while i <= n:\n            x = f(x)\n            i += 1\n        return x\n    return inner\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in inner","    while i <= n:","UnboundLocalError: local variable 'i' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":293,"studentId":0,"date":null,"diff":"\r\nInputObject                         SideIndicator\r\n-----------                         -------------\r\n    def nega(lmao):                 =>           \r\n        breh = n                    =>           \r\n        while breh > 0:             =>           \r\n            lmao = f(lmao)          =>           \r\n            breh -=1                =>           \r\n        return lmao                 =>           \r\n    def nega(count):                <=           \r\n        if count > 1:               <=           \r\n            return f(nega(count-1)) <=           \r\n        return f(n)                 <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def nega(count):\n        if count > 1:\n            return f(nega(count-1))\n        return f(n)\n    return nega\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def nega(lmao):\n        breh = n\n        while breh > 0:\n            lmao = f(lmao)\n            breh -=1 \n        return lmao\n    return nega\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","15","","# Error: expected","#     243","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":294,"studentId":0,"date":null,"diff":"\r\nInputObject                        SideIndicator\r\n-----------                        -------------\r\n        def helper(y):             =>           \r\n            something = x          =>           \r\n            if y == 0:             =>           \r\n                return x           =>           \r\n            while y != 0:          =>           \r\n                var = f(something) =>           \r\n                something = var    =>           \r\n                total = 0 + var    =>           \r\n                y -= 1             =>           \r\n            return total           =>           \r\n        return helper(n)           =>           \r\n    return h                       =>           \r\n        x = f(f(x))                <=           \r\n        return x                   <=           \r\n    if n == 0:                     <=           \r\n        return f(x)                <=           \r\n        n -= 1                     <=           \r\n        return h + h               <=           \r\n    else:                          <=           \r\n                                   <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def h(x):\n        x = f(f(x))\n        return x\n    if n == 0:\n        return f(x)\n    else:\n        n -= 1\n        return h + h \n    \n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def h(x):\n        def helper(y):\n            something = x\n            if y == 0:\n                return x\n            while y != 0:\n                var = f(something)\n                something = var\n                total = 0 + var\n                y -= 1\n            return total    \n        return helper(n)\n    return h\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return h + h","TypeError: unsupported operand type(s) for +: 'function' and 'function'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":295,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n                              =>           \r\n    n = n                     <=           \r\n    def c(x):                 <=           \r\n        while n > 0:          <=           \r\n            compose1(f, f)(x) <=           \r\n            n -= 1            <=           \r\n    return c                  <=           \r\n    \"\"\"                       <=           \r\n    \"\"\"                       <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"\"\"\n    def c(x):\n        for i in range(n):\n            x = f(x)\n        return x\n    return c\n    \"\"\"\n    n = n\n    def c(x):\n        while n > 0:\n            compose1(f, f)(x)\n            n -= 1\n    return c\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def c(x):\n        for i in range(n):\n            x = f(x)\n        return x\n    return c\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in c","    while n > 0:","UnboundLocalError: local variable 'n' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":296,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        return lambda x:x =>           \r\n        return x          <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    y = lambda x: f(x)\r\n    if n==0:\r\n        return x\r\n    else:\r\n        i = 1\r\n        while i<n:\r\n            y = compose1(f, y)\r\n            i += 1\r\n        return y\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    y = lambda x: f(x)\n    if n==0:\n        return lambda x:x\n    else:\n        i=1\n        while i<n:\n            y = compose1(f, y)\n            i+=1\n        return y\n    \n    # i=1\n    # y=base\n    # while i<=n:\n    #     y = combiner(y, term(i))\n    #     i+=1\n    # return y\n\n\ndef compose1(f, g):    \n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    y = lambda x: f(x)\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        i = 1\r\n        while i<n:\r\n            y = compose1(f, y)\r\n            i += 1\r\n        return y\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":297,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n    if n == 0:                 =>           \r\n        return identity        =>           \r\n        x = compose1(f, x)     =>           \r\n        i += 1                 =>           \r\n    return x                   =>           \r\n        if x == 0:             <=           \r\n            return n           <=           \r\n        else:                  <=           \r\n            x = compose1(f, x) <=           \r\n            i += 1             <=           \r\n            return x           <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    x = f\n    i = 1\n    while i < n:\n        if x == 0:\n            return n\n        else:\n            x = compose1(f, x)\n            i += 1\n            return x\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    x = f\n    i = 1\n    while i < n:\n        x = compose1(f, x)\n        i += 1\n    return x\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":298,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        return lambda x: x =>           \r\n        return x           <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return x\r\n    elif n==1:\r\n        return f(x)\r\n    func = compose1(f, f)\r\n    while n>2:\r\n        n -= 1\r\n        func = compose1(f, func)\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    elif n == 1:\n        return f(x)\n    func = compose1(f,f)\n    while n > 2:\n        n -= 1\n        func = compose1(f, func)\n    return func\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f(x)\r\n    func = compose1(f, f)\r\n    while n>2:\r\n        n -= 1\r\n        func = compose1(f, func)\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":299,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n    def total(x): =>           \r\n        return x  =>           \r\n    total = 0     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    count = 1\n    total = 0\n    while count <= n:\n        total = compose1(f, total)\n        count += 1\n    return total\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    count = 1\n    def total(x):\n        return x\n    while count <= n:\n        total = compose1(f, total)\n        count += 1\n    return total\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":300,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        def h(x, n = n): =>           \r\n        def h(x, n):     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # def helper(x):\n    #     if n == 0:\n    #         return x\n    #     x = f(x) \n    #     return repeated(f,n-1)\n\n\n    # return helper\n\n    def compose(func):\n        def h(x, n):\n            if n == 0:\n                return x\n            return h(func(x), n-1)\n        return h\n    return compose(f)\n\n\"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n\n\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # def helper(x):\n    #     if n == 0:\n    #         return x\n    #     x = f(x) \n    #     return repeated(f,n-1)\n\n\n    # return helper\n\n    def compose(func):\n        def h(x, n = n):\n            if n == 0:\n                return x\n            return h(func(x), n-1)\n        return h\n    return compose(f)\n\n\"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: h() missing 1 required positional argument: 'n'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":301,"studentId":0,"date":null,"diff":"\r\nInputObject                              SideIndicator\r\n-----------                              -------------\r\n        if n==0:                         =>           \r\n            return x                     =>           \r\n        else:                            =>           \r\n            return f (h(n-1, x))         =>           \r\n        if n==0: return x                <=           \r\n        else: return f (repeated(f,n-1)) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def h(n, x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return f(repeated(f, n-1))\r\n    return lambda x: h(n, x)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(n,x):\n        if n==0: \n            return x\n        else: \n            return f (h(n-1, x))\n    return lambda x: h(n, x)\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(n, x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return lambda x: h(n, x)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 158, in <lambda>","    return lambda x: h(n, x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in h","    else: return f (repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":302,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n    new_f = f                             =>           \r\n        new_f = compose1(f,new_f)         =>           \r\n                                          <=           \r\n        new_f = compose1(f,f)             <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    if n == 0:\n        return identity\n    while n>1:\n        new_f = compose1(f,f)        \n        n -= 1\n    return new_f\n   \ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    new_f = f\n    if n == 0:\n        return identity\n    while n>1:\n        new_f = compose1(f,new_f)        \n        n -= 1\n    return new_f\n   \ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":303,"studentId":0,"date":null,"diff":"\r\nInputObject                                         SideIndicator\r\n-----------                                         -------------\r\n        return compose1(f, repeated(f, n - 1))      =>           \r\n        return repeated(compose1(result, f), n - 1) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return identity\n    else:\n        return repeated(compose1(result, f), n - 1)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n - 1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return repeated(compose1(result, f), n - 1)","NameError: name 'result' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":304,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        return compose1(f, repeated(f, n-1)) =>           \r\n        return f(repeated(f, n-1))           <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if (n==0):\r\n        return lambda x: x\r\n    elif (n==1):\r\n        return lambda x: f(x)\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if(n == 0):\n        return lambda x: x\n    elif(n == 1):\n        return lambda x: f(x)\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if (n==0):\r\n        return lambda x: x\r\n    elif (n==1):\r\n        return lambda x: f(x)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":305,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n        return lambda x: f(repeated(f, n - 1)(x)) =>           \r\n        return lambda x: f(repeated(f, n - 1))    <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return lambda x: f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    else:\n        return lambda x: f(repeated(f, n - 1)(x))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return lambda x: f(repeated(f, n-1)(x))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in <lambda>","    return lambda x: f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":306,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        return compose1(f, repeated(f, n-1)) =>           \r\n        return compose1(repeated(f, n-1))    <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** LULU'S CODE HERE ***\"\n\n    if n == 0:\n        return identity\n    elif n == 1:\n        return f\n    else:\n        return compose1(repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** LULU'S CODE HERE ***\"\n\n    if n == 0:\n        return identity\n    elif n == 1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 171, in repeated","    return compose1(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 171, in repeated","    return compose1(repeated(f, n-1))","TypeError: compose1() missing 1 required positional argument: 'g'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":307,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n        return compose1(f, repeated(f, n - 1)) =>           \r\n        return repeated(compose1(f, f), n - 1) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return repeated(compose1(f, f), n-1)","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def compose1(f, g):\n        \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n        def h(x):\n            return f(g(x))\n        return h\n    if n == 0:\n        return identity\n    elif n == 1:\n        return f\n    else:\n        return compose1(f, repeated(f, n - 1))\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":308,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        return identity   =>           \r\n        return identity() <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    if n==0:\r\n        return identity()\r\n    return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 1:\n        return f\n    if n == 0:\n        return identity\n    return compose1(repeated(f, n-1), f) \n\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    if n==0:\r\n        return identity()\r\n    return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 171, in repeated","    return identity()","TypeError: identity() missing 1 required positional argument: 'x'","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":309,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n            return compose1(identity, identity) =>           \r\n            return compose1(f, identity)        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def func_app(rep):\r\n        if rep==0:\r\n            return compose1(f, identity)\r\n        else:\r\n            return compose1(f, func_app(rep-1))\r\n    return func_app(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.    \n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def func_app(rep):\n        if rep == 0:\n            return compose1(identity, identity)\n        else:\n            return compose1(f, func_app(rep-1))\n    return func_app(n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def func_app(rep):\r\n        if rep==0:\r\n            return compose1(identity, identity)\r\n        else:\r\n            return compose1(f, func_app(rep-1))\r\n    return func_app(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":310,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return f        =>           \r\n    elif n == 0:        =>           \r\n        return identity =>           \r\n        return f(*args) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f(args)\r\n    else:\r\n        i = 1\r\n        g = f\r\n        while i<n:\r\n            g = compose1(f, g)\r\n            i += 1\r\n        return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 1:\n        return f\n    elif n == 0:\n        return identity\n    else:\n        i = 1\n        g = f\n        while i < n:\n            g = compose1(f, g)\n            i += 1\n        return g\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f(args)\r\n    else:\r\n        i = 1\r\n        g = f\r\n        while i<n:\r\n            g = compose1(f, g)\r\n            i += 1\r\n        return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":311,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n    if n == 0:                                =>           \r\n        return lambda x: x                    =>           \r\n        return compose1(f,repeated(f,n-1))    =>           \r\n    if n == 1:                                <=           \r\n        return f                              <=           \r\n        return compose1(f,f(repeated(f,n-1))) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return f\n    else:\n        return compose1(f,f(repeated(f,n-1)))\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return lambda x: x\n    else:\n        return compose1(f,repeated(f,n-1))\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 121, in repeated","    return compose1(f,f(repeated(f,n-1)))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 121, in repeated","    return compose1(f,f(repeated(f,n-1)))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":312,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    if n == 0:             =>           \r\n        return identity    =>           \r\n    if n >= 0:             <=           \r\n        return lambda x: 0 <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n>=0:\r\n        x = n-2\r\n        g = compose1(f, f)\r\n        while x>0:\r\n            g = compose1(g, f)\r\n            x -= 1\r\n        return g\r\n    else:\r\n        return lambda x: 0\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    else:\n        x = n - 2\n        g = compose1(f, f)\n        while x > 0:\n            g = compose1(g, f)\n            x -= 1\n        return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n>=0:\r\n        x = n-2\r\n        g = compose1(f, f)\r\n        while x>0:\r\n            g = compose1(g, f)\r\n            x -= 1\r\n        return g\r\n    else:\r\n        return lambda x: 0\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","625","","# Error: expected","#     5","# but got","#     625","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":313,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n        return f        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f\r\n    return_funct = f\r\n    for i in range(n-1):\r\n        return_funct = compose1(f, return_funct)\r\n    return return_funct\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    \n    return_funct = f\n    for i in range(n-1):\n        return_funct = compose1(f, return_funct)\n\n    return return_funct\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    return_funct = f\r\n    for i in range(n-1):\r\n        return_funct = compose1(f, return_funct)\r\n    return return_funct\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":314,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n    def helper(x):             <=           \r\n        if n == 0:             <=           \r\n            return x           <=           \r\n        return repeated(f,n-1) <=           \r\n    '''                        <=           \r\n    return helper              <=           \r\n    '''                        <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def helper(x):\n        if n == 0:\n            return x\n        return repeated(f,n-1)\n    return helper\n\n    '''\n    def helper(x, counter = n):\n        result = x\n        while counter > 0:\n            result = f(result)\n            counter -= 1\n        return result\n    return helper\n    '''\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def helper(x, counter = n):\n        result = x\n        while counter > 0:\n            result = f(result)\n            counter -= 1\n        return result\n    return helper\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function repeated.<locals>.helper at 0x000001ED702E6D08>","","# Error: expected","#     8","# but got","#     <function repeated.<locals>.helper at 0x000001ED702E6D08>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":315,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        return compose1(f, repeated(f,n-1)) =>           \r\n        compose1(f, repeated(f,n-1))        <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if (n == 0):\n        return compose1(identity,identity)\n    else:\n        compose1(f, repeated(f,n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if (n == 0):\n        return compose1(identity,identity)\n    else:\n        return compose1(f, repeated(f,n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":316,"studentId":0,"date":null,"diff":"\r\nInputObject                 SideIndicator\r\n-----------                 -------------\r\n        return lambda x : x =>           \r\n        return f/f          <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    k = 1\r\n    x = f\r\n    if n==0:\r\n        return f/f\r\n    else:\r\n        while k<n:\r\n            x = compose1(x, f)\r\n            k += 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    k = 1\n    x = f\n    if n == 0:\n        return lambda x : x\n    else:\n        while k < n:\n            x = compose1(x,f)\n            k +=1\n    return x\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    k = 1\r\n    x = f\r\n    if n==0:\r\n        return f/f\r\n    else:\r\n        while k<n:\r\n            x = compose1(x, f)\r\n            k += 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated","    return f/f","TypeError: unsupported operand type(s) for /: 'function' and 'function'","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":317,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        return lambda x: x =>           \r\n        return lambda x: n <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: n\r\n    if n==1:\r\n        return lambda x: f(x)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==0:\n        return lambda x: x\n    if n==1:\n        return lambda x: f(x)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    if n==1:\r\n        return lambda x: f(x)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","0","","# Error: expected","#     5","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":318,"studentId":0,"date":null,"diff":"\r\nInputObject                         SideIndicator\r\n-----------                         -------------\r\n    def step(x, z = n-1):           =>           \r\n        if z == -1:                 =>           \r\n            return x                =>           \r\n        if z == 0:                  =>           \r\n            return f(step(x,z - 1)) =>           \r\n    def step(x, z = 1):             <=           \r\n        if z >= n:                  <=           \r\n            return f(step(x,z + 1)) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def step(x, z = 1):\r\n        if z>=n:\r\n            return f(x)\r\n        else:\r\n            return f(step(x, z+1))\r\n    return step\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def step(x, z = n-1):\n        if z == -1:\n            return x\n        if z == 0:\n            return f(x)\n        else:\n            return f(step(x,z - 1))\n    return step\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def step(x, z = 1):\r\n        if z>=n:\r\n            return f(x)\r\n        else:\r\n            return f(step(x, z+1))\r\n    return step\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":319,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n            return compose1(g, f) =>           \r\n            return g              <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def repeated_helper(g, n, i):\r\n        if i==n:\r\n            return g\r\n        else:\r\n            return repeated_helper(compose1(g, f), n, i+1)\r\n    return repeated_helper(identity, n, 1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return identity\n    def repeated_helper(g, n, i):\n        if i == n:\n            return compose1(g, f)\n        else:\n            return repeated_helper(compose1(g, f), n, i+1)\n    return repeated_helper(identity, n, 1)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def repeated_helper(g, n, i):\r\n        if i==n:\r\n            return g\r\n        else:\r\n            return repeated_helper(compose1(g, f), n, i+1)\r\n    return repeated_helper(identity, n, 0)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":320,"studentId":0,"date":null,"diff":"\r\nInputObject                              SideIndicator\r\n-----------                              -------------\r\n            return f(repeated(f,n-1)(x)) =>           \r\n            return f(repeated(f,n-1))(x) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def new(x):\n        if n == 0:\n            return x\n        else:\n            return f(repeated(f,n-1))(x)\n    return new\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def new(x):\n        if n == 0:\n            return x\n        else:\n            return f(repeated(f,n-1)(x))\n    return new\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in new","    return f(repeated(f,n-1))(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":321,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n    def func(x): =>           \r\n        i = n    =>           \r\n    return func  =>           \r\n    def n(x):    <=           \r\n        i = k    <=           \r\n    return n     <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def n(x):\r\n        i = k\r\n        while i>0:\r\n            x = f(x)\r\n            i -= 1\r\n        return x\r\n    return n\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    def func(x):\n        i = n\n        while i > 0:\n            x = f(x)\n            i -= 1\n        return x\n    return func\n    \ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, k):\r\n    def n(x):\r\n        i = k\r\n        while i>0:\r\n            x = f(x)\r\n            i -= 1\r\n        return x\r\n    return n\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"any\"))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\"))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in n","    i = k","NameError: name 'k' is not defined","","# Error: expected","#     8","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":322,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n        return lambda x:x                      =>           \r\n        return lambda x: f(repeated(f,n-1)(x)) =>           \r\n        return f                               <=           \r\n        return f(repeated(f,n-1)(x))           <=           \r\n                                               <=           \r\n                                               <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n ==0:\n        return f\n    else:\n        return f(repeated(f,n-1)(x))\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n ==0:\n        return lambda x:x\n    else:\n        return lambda x: f(repeated(f,n-1)(x))\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return f(repeated(f,n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return f(repeated(f,n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return f(repeated(f,n-1)(x))","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":323,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n        finalfunc = compose1(f,finalfunc) =>           \r\n        finalfunc = f(identity)           <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    finalfunc = identity\n    x = 1\n\n    while x<=n:\n        finalfunc = f(identity)\n        x += 1\n\n    return finalfunc\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    finalfunc = identity\n    x = 1\n\n    while x<=n:\n        finalfunc = compose1(f,finalfunc)\n        x += 1\n\n    return finalfunc\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 169, in repeated","    finalfunc = f(identity)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":324,"studentId":0,"date":null,"diff":"\r\nInputObject                 SideIndicator\r\n-----------                 -------------\r\n    return repeated_func    =>           \r\n    return repeated_func(x) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeated_func(x):\n        k = n\n        while k > 0:\n            x = f(x)\n            k -= 1\n        return x\n    return repeated_func(x)\n\n\n'''\n    if n==0:\n        return x\n    elif n==1:\n        return f(n)\n    while n > 1:\n        return compose1(f, f(n))\n'''\n        \n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeated_func(x):\n        k = n\n        while k > 0:\n            x = f(x)\n            k -= 1\n        return x\n    return repeated_func\n\n\n'''\n    if n==0:\n        return x\n    elif n==1:\n        return f(n)\n    while n > 1:\n        return compose1(f, f(n))\n'''\n        \n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 176, in repeated","    return repeated_func(x)","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":325,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n    while n > 0: =>           \r\n    else:        =>           \r\n    while n > 1: <=           \r\n    if n == 1:   <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def compose(f, g):\n            def h(x):\n                return f(g(x))\n            return h\n    def h(x):\n        return x\n    while n > 1:\n        h = compose(f, h)\n        n -= 1\n    if n == 1:\n        return h\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def compose(f, g):\n            def h(x):\n                return f(g(x))\n            return h\n    def h(x):\n        return x\n    while n > 0:\n        h = compose(f, h)\n        n -= 1\n    else:\n        return h\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":326,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        if n == 0:   =>           \r\n            return x =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        if n==1:\r\n            return f(x)\r\n        return f(repeated(f, n-1)(x))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def h(x):\n        if n == 0:\n            return x\n        if n == 1:\n            return f(x)\n        return f(repeated(f, n-1)(x))\n    return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def h(x):\r\n        if n==1:\r\n            return f(x)\r\n        return f(repeated(f, n-1)(x))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in h","    return f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in h","    return f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in h","    return f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in h","    return f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in h","    return f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in h","    return f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 158, in h","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":327,"studentId":0,"date":null,"diff":"\r\nInputObject                              SideIndicator\r\n-----------                              -------------\r\n            return lambda x: x           =>           \r\n            return lambda f: lambda x: x <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def compose(func1, func2):\r\n        def inner(x):\r\n            return func1(func2(x))\r\n        return inner\r\n    def case_zero(x):\r\n        return \r\n    def inner_repeat(func1, func2, number):\r\n        if number==0:\r\n            return lambda f: lambda x: x\r\n        elif number<=1:\r\n            return func2\r\n        else:\r\n            func2 = compose(func1, func2)\r\n            return inner_repeat(func1, func2, number-1)\r\n    return inner_repeat(f, f, n)","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def compose(func1, func2):\n        def inner(x):\n            return func1(func2(x))\n        return inner\n    def case_zero(x):\n        return\n\n    def inner_repeat(func1, func2, number):\n        if number == 0:\n            return lambda x: x\n        elif number <= 1:\n            return func2\n        else:\n            func2 = compose(func1, func2)\n            return inner_repeat(func1, func2, number-1)\n    return inner_repeat(f, f, n)\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def compose(func1, func2):\r\n        def inner(x):\r\n            return func1(func2(x))\r\n        return inner\r\n    def case_zero(x):\r\n        return \r\n    def inner_repeat(func1, func2, number):\r\n        if number==0:\r\n            return lambda f: lambda x: x\r\n        elif number<=1:\r\n            return func2\r\n        else:\r\n            func2 = compose(func1, func2)\r\n            return inner_repeat(func1, func2, number-1)\r\n    return inner_repeat(f, f, n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","<function repeated.<locals>.inner_repeat.<locals>.<lambda>.<locals>.<lambda> at 0x00000205CE8E7378>","","# Error: expected","#     5","# but got","#     <function repeated.<locals>.inner_repeat.<locals>.<lambda>.<locals>.<lambda> at 0x00000205CE8E7378>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":328,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n        counter = 0                        =>           \r\n        while counter < n:                 =>           \r\n            x, counter = f(x), counter + 1 =>           \r\n        return x                           =>           \r\n    def h(x):                              =>           \r\n    return h                               =>           \r\n    g = f                                  <=           \r\n    while n > 1:                           <=           \r\n        g = compose1(f,g)                  <=           \r\n        n = n - 1                          <=           \r\n    return g                               <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        counter = 0\n        while counter < n:\n            x, counter = f(x), counter + 1\n        return x\n    return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":329,"studentId":0,"date":null,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n            j += 1 =>           \r\n            k += 1 <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeated(k):\n        j, result = 0, k\n        while j < n:\n            result = f(result)\n            k += 1\n        return result\n    return repeated\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeated(k):\n        j, result = 0, k\n        while j < n:\n            result = f(result)\n            j += 1\n        return result\n    return repeated\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     8","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":330,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n            return f(repeated(f, n-1)(x)) =>           \r\n            return f(repeated(h, n-1)(x)) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return f(repeated(h, n-1)(x))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def h(x):\n        if n == 0:\n            return x\n        else:\n            return f(repeated(f, n-1)(x))\n    return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in h","    return f(repeated(h, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in h","    return f(repeated(h, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in h","    return f(repeated(h, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in h","    return f(repeated(h, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in h","    return f(repeated(h, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in h","    return f(repeated(h, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in h","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     8","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":331,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n            return x                      =>           \r\n            return f(helper(x, f, n - 1)) =>           \r\n            return x                      <=           \r\n            return f(helper(f, x, n - 1)) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x, f=f, n=n):\n        if n == 0:\n            return x\n        else:\n            return f(helper(f, x, n - 1))\n    return helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x, f=f, n=n):\n        if n == 0:\n\t        return x\n        else:\n\t        return f(helper(x, f, n - 1))\n    return helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in helper","    return f(helper(f, x, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in helper","    return f(helper(f, x, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in helper","    return f(helper(f, x, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":332,"studentId":0,"date":null,"diff":"\r\nInputObject                     SideIndicator\r\n-----------                     -------------\r\n        if n==0:                =>           \r\n            return x            =>           \r\n        else:                   =>           \r\n            while i<n:          =>           \r\n                h=compose1(h,f) =>           \r\n                i+=1            =>           \r\n            return h(x)         =>           \r\n        while i<n:              <=           \r\n            h=compose1(h,f)     <=           \r\n            i+=1                <=           \r\n        return h(x)             <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def repeat(x):\r\n        i = 1\r\n        h = f\r\n        while i<n:\r\n            h = compose1(h, f)\r\n            i += 1\r\n        return h(x)\r\n    return repeat\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeat(x):\n        i=1\n        h=f\n        if n==0:\n            return x\n        else:\n            while i<n:\n                h=compose1(h,f)\n                i+=1\n            return h(x)\n    return repeat\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def repeat(x):\r\n        i = 1\r\n        h = f\r\n        while i<n:\r\n            h = compose1(h, f)\r\n            i += 1\r\n        return h(x)\r\n    return repeat\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":333,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n        return 0        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    w = f\r\n    while n>1:\r\n        w = compose1(f, w)\r\n        n -= 1\r\n    if n==0:\r\n        return 0\r\n    else:\r\n        return w\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    w=f\n    while n>1:\n        w= compose1(f,w)\n        n -=1\n    if n == 0:\n        return identity\n    else:\n        return w\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    w = f\r\n    while n>1:\r\n        w = compose1(f, w)\r\n        n -= 1\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return w\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":334,"studentId":0,"date":null,"diff":"\r\nInputObject                                          SideIndicator\r\n-----------                                          -------------\r\n                                                     =>           \r\n                                                     =>           \r\n            result, loop_lo = f(result), loop_lo + 1 =>           \r\n        return result                                =>           \r\n                                                     =>           \r\n                                                     =>           \r\n         result, loop_lo = f(result), loop_lo + 1    <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def lo_repeated(input_lo):\n        loop_lo, result = 1, input_lo\n        while loop_lo <= n:\n         result, loop_lo = f(result), loop_lo + 1\n\n\n\n    return lo_repeated\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def lo_repeated(input_lo):\n        \n        loop_lo, result = 1, input_lo\n        \n        while loop_lo <= n:\n            result, loop_lo = f(result), loop_lo + 1\n\n        return result\n\n\n\n\n    return lo_repeated\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","","# Error: expected","#     8","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":335,"studentId":0,"date":null,"diff":"\r\nInputObject                                                               SideIndicator\r\n-----------                                                               -------------\r\n    # if n==0:                                                            =>           \r\n    #     return base                                                     =>           \r\n    # else:                                                               =>           \r\n    #     return combiner(n,accumulate(combiner,base,n-1,term))           =>           \r\n    return accumulate(combiner,base, n, lambda x: term if pred  else pop) =>           \r\n    # new_func= lambda x: x                                               =>           \r\n    # if n==0:                                                            =>           \r\n    #     return new_func                                                 =>           \r\n    # else:                                                               =>           \r\n    #     while n>0:                                                      =>           \r\n    #         new_func = compose1(f,new_func)                             =>           \r\n    #         n-= 1                                                       =>           \r\n    # return new_func                                                     =>           \r\n    if n==0:                                                              =>           \r\n        return lambda x:x                                                 =>           \r\n        return compose1(f,repeated(f,n-1))                                =>           \r\n    else:                                                                 =>           \r\n                                                                          =>           \r\n    #return accumulate(combiner,base, pred, n, lambda x: term if pred )   <=           \r\n    while n>= 0:                                                          <=           \r\n        new_func = compose1(f,new_func)                                   <=           \r\n        n-= 1                                                             <=           \r\n    return new_func                                                       <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    while n>= 0:\n        new_func = compose1(f,new_func)\n        n-= 1\n    return new_func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    # new_func= lambda x: x\n    # if n==0:\n    #     return new_func\n    # else:\n    #     while n>0:\n    #         new_func = compose1(f,new_func)\n    #         n-= 1\n    # return new_func\n\n    if n==0:\n        return lambda x:x\n    else:\n        return compose1(f,repeated(f,n-1))\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 155, in repeated","    new_func = compose1(f,new_func)","UnboundLocalError: local variable 'new_func' referenced before assignment","","# Error: expected","#     ","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":336,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n    x = lambda x: x =>           \r\n    elif n == 0:    =>           \r\n        return x    =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n>1:\r\n        return compose1(f, repeated(f, n-1))\r\n    else:\r\n        return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    x = lambda x: x\n    if n > 1:\n        return compose1(f, repeated(f, n-1))\n    elif n == 0:\n        return x\n    else:\n        return f \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n>1:\r\n        return compose1(f, repeated(f, n-1))\r\n    else:\r\n        return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":337,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    if n <= 0:          =>           \r\n        return identity =>           \r\n    elif n == 1:        =>           \r\n    if n == 1:          <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 0:\n    \treturn identity\n    elif n == 1:\n    \treturn f\n    else:\n    \treturn compose1(f, repeated(f, n - 1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":338,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n        return compose1(f,repeated(f,n-1))        =>           \r\n        return compose1(identity,repeated(f,n-1)) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(identity, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==0:\n        return identity\n    else:\n        return compose1(f,repeated(f,n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":339,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n    def get_number (x):                        =>           \r\n        for i in range (0, n):                 =>           \r\n            x = f(x)                           =>           \r\n        return x                               =>           \r\n    return get_number                          =>           \r\n    # g returns a number! it recieves a number <=           \r\n    def g(x):                                  <=           \r\n        if  n == 0:                            <=           \r\n            return f(x)                        <=           \r\n        else:                                  <=           \r\n            return f(repeated(f, n-1))         <=           \r\n                                               <=           \r\n    return compose1(g, f)                      <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # g returns a number! it recieves a number\n    ","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def get_number (x):\n        for i in range (0, n):\n            x = f(x)\n        return x\n    return get_number\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 175, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 167, in g","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":340,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n    if n == 0:                                 =>           \r\n        return compose1(identity, identity)    =>           \r\n        return compose1(f, repeated(f, n - 1)) =>           \r\n    if n != 0:                                 <=           \r\n        while n > 0:                           <=           \r\n             return compose1(f, f)             <=           \r\n        return x                               <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def compose1(f, g):\n        \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n        def h(x):\n            return f(g(x))\n        return h\n    if n != 0:\n        while n > 0:\n             return compose1(f, f)\n    else:\n        return x\n\n\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def compose1(f, g):\n        \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n        def h(x):\n            return f(g(x))\n        return h\n    if n == 0:\n        return compose1(identity, identity)\n    else:\n        return compose1(f, repeated(f, n - 1))\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":341,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    if n == 0:             =>           \r\n        return lambda x: x =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def rep_help(t, k):\r\n        if k>n:\r\n            return t\r\n        t = compose1(f, t)\r\n        k += 1\r\n        return rep_help(t, k)\r\n    return rep_help(f, 2)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def rep_help(t, k):\n        if k > n:\n            return t\n        t = compose1(f, t)\n        k += 1\n        return rep_help(t, k)\n    if n == 0:\n        return lambda x: x\n    return rep_help(f, 2)\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def rep_help(t, k):\r\n        if k>n:\r\n            return t\r\n        t = compose1(f, t)\r\n        k += 1\r\n        return rep_help(t, k)\r\n    return rep_help(f, 2)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":342,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        return identity    =>           \r\n        return identity(x) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity(x)\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        def compose1(f, g):\r\n            def h(x):\r\n                return f(g(x))\r\n            return h\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    elif n == 1:\n        return f\n    else:\n        def compose1(f, g):\n            def h(x):\n                return f(g(x))\n            return h\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity(identity)\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        def compose1(f, g):\r\n            def h(x):\r\n                return f(g(x))\r\n            return h\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return identity(x)","NameError: name 'x' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":343,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        return total =>           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def repeater(f,n,x):\n        counter = n\n        total = x\n        while counter >= 1:\n            total = f(total)\n            counter = counter - 1\n\n    if n == 0:\n        return lambda x: x\n    else:\n        return lambda x: repeater(f,n,x)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def repeater(f,n,x):\n        counter = n\n        total = x\n        while counter >= 1:\n            total = f(total)\n            counter = counter - 1\n        return total\n\n    if n == 0:\n        return lambda x: x\n    else:\n        return lambda x: repeater(f,n,x)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","","# Error: expected","#     8","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":344,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        return identity  =>           \r\n                         =>           \r\n        return f         <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    result = f\r\n    if n==0:\r\n        return f\r\n    while n>1:\r\n        result = compose1(f, result)\r\n        n -= 1\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    result  = f \n    if n == 0: \n        return identity \n    \n    while n > 1:\n        result = compose1(f, result)\n        n -= 1\n    return result\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    result = f\r\n    if n==0:\r\n        return identity\r\n    while n>1:\r\n        result = compose1(f, result)\r\n        n -= 1\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":345,"studentId":0,"date":null,"diff":"\r\nInputObject                                               SideIndicator\r\n-----------                                               -------------\r\n        return compose1(f, repeated(f, n-1))              =>           \r\n        return compose1(f, repeated(compose1(f, f), n-1)) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(compose1(f, f), n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    elif n == 1: \n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(compose1(identity, f), n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","12","","# Error: expected","#     8","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":346,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n        return compose1(f,repeated(f,n-1)) =>           \r\n        return repeated(compose(f,f),n-1)  <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n        return identity\n    else:\n        return repeated(compose(f,f),n-1)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n        return identity\n    else:\n        return compose1(f,repeated(f,n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 155, in repeated","    return repeated(compose(f,f),n-1)","NameError: name 'compose' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":347,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n    while n >= 1: =>           \r\n    while n >= 0: <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    a = lambda x: x\r\n    while n>=0:\r\n        a = compose1(a, f)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    a = lambda x: x\n    while n >= 1:\n        a = compose1(a, f)\n        n -=1\n    return a\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    a = lambda x: x\r\n    while n>=1:\r\n        a = compose1(a, f)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":348,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    if n == 0:          =>           \r\n        return identity =>           \r\n                        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        i = 2\r\n        m = f\r\n        while i<=n:\r\n            m = compose1(f, m)\r\n            i += 1\r\n        return m\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n\n    if n == 0:\n        return identity\n    if n == 1:\n        return f\n    else:\n        i = 2\n        m = f\n        while i <= n:\n            m = compose1(f,m)\n            i += 1\n        return m \n\n    \n    \n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        i = 2\r\n        m = f\r\n        while i<=n:\r\n            m = compose1(f, m)\r\n            i += 1\r\n        return m\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":349,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        if n==0:     =>           \r\n            return x =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def num(x):\r\n        a = n\r\n        tot = 1\r\n        tot = f(x)\r\n        while a-1>0:\r\n            tot = f(tot)\r\n            a = a-1\r\n        return tot\r\n    return num\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def num(x):\n        if n==0:\n            return x\n        a=n\n        tot = 1\n        tot = f(x)\n        while a-1>0:\n            tot= f(tot)\n            a=a-1\n        return tot\n    return num\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def num(x):\r\n        a = n\r\n        tot = 1\r\n        tot = f(x)\r\n        while a-1>0:\r\n            tot = f(tot)\r\n            a = a-1\r\n        return tot\r\n    return num\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":350,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    if n == 0:             =>           \r\n        return lambda x: x =>           \r\n                           =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    func, k = f, 1\r\n    while k<n:\r\n        func, k = compose1(f, func), k+1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    func, k = f, 1\n    while k < n:\n        func, k = compose1(f, func), k+1\n    return func\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    func, k = f, 1\r\n    while k<n:\r\n        func, k = compose1(f, func), k+1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":351,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n        return lambda x: f(repeated(f, n - 1)(x)) =>           \r\n        return lambda x: f(repeated(f, n - 1))(x) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 1:\n        return f\n    elif n == 0:\n        return identity\n    else:\n        return lambda x: f(repeated(f, n - 1))(x)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 1:\n        return f\n    elif n == 0:\n        return identity\n    else:\n        return lambda x: f(repeated(f, n - 1)(x))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in <lambda>","    return lambda x: f(repeated(f, n - 1))(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":352,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    if n == 0:          =>           \r\n        return identity =>           \r\n    if n <= 1:          <=           \r\n        return          <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 1:\n        return \n    def helper(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    return helper(repeated(f,n-1),f)\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return identity\n    def helper(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    return helper(repeated(f,n-1),f)\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 164, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 164, in h","    return f(g(x))","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":353,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n        while n>1:  =>           \r\n        while n>=0: <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    x=f\n    if n ==0:\n        return lambda x: identity(x)\n    else:\n        while n>=0:\n            x=compose1(f,x)\n            n-=1\n        return x\n    # if n==0:\n    #     return lambda x:x\n    # else:\n    #     return repeated(compose1(f,f),n-1)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    x=f\n    if n ==0:\n        return lambda x: identity(x)\n    else:\n        while n>1:\n            x=compose1(f,x)\n            n-=1\n        return x\n    # if n==0:\n    #     return lambda x:x\n    # else:\n    #     return repeated(compose1(f,f),n-1)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","10","","# Error: expected","#     8","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":354,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        return compose1(f, repeated(f, n-1)) =>           \r\n        return compse1(f, repeated(f, n-1))  <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compse1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return lambda x: x\n    if n == 1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(LeafWildcard(\"ArgNode\"))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return compse1(f, repeated(f, n-1))","NameError: name 'compse1' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":355,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    if n == 0:          =>           \r\n        return identity =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def helper(g, k):\r\n        if k==1:\r\n            return g\r\n        else:\r\n            return helper(compose1(g, f), k-1)\r\n    return helper(f, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n    \treturn identity\n    def helper(g,k):\n   \t\tif k == 1:\n   \t\t\treturn g\n   \t\telse:\n   \t\t\treturn helper(compose1(g,f),k-1)\n    return helper(f,n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def helper(g, k):\r\n        if k==1:\r\n            return g\r\n        else:\r\n            return helper(compose1(g, f), k-1)\r\n    return helper(f, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in helper","    return helper(compose1(g,f),k-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in helper","    return helper(compose1(g,f),k-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in helper","    return helper(compose1(g,f),k-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in helper","    return helper(compose1(g,f),k-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in helper","    return helper(compose1(g,f),k-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in helper","    return helper(compose1(g,f),k-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in helper","    if k == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":356,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    if n == 0:             =>           \r\n        return lambda x: x =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return lambda x: x\n    if n ==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 173, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 173, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 173, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 173, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 173, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 173, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 170, in repeated","    if n ==1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":357,"studentId":0,"date":null,"diff":"\r\nInputObject   SideIndicator\r\n-----------   -------------\r\n        i = 0 =>           \r\n        i = 1 <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        i = 1\r\n        while i!=n:\r\n            x = f(x)\r\n            i += 1\r\n        return x\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        i = 0\n        while i != n:\n            x = f(x)\n            i += 1\n        return x\n    \n    return h\n    \ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        i = 0\r\n        while i!=n:\r\n            x = f(x)\r\n            i += 1\r\n        return x\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":358,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n        for i in range(0,n): =>           \r\n        for i in range(0,a): <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def fun(a):\r\n        x = a\r\n        for i in range(0, a):\r\n            x = f(x)\r\n        return x\r\n    return fun\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def fun(a):\n    \tx = a\n    \tfor i in range(0,n):\n    \t\tx = f(x)\n    \treturn x\n\n    return fun\n\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def fun(a):\r\n        x = a\r\n        for i in range(0, n):\r\n            x = f(x)\r\n        return x\r\n    return fun\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","10","","# Error: expected","#     8","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":359,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        return identity    =>           \r\n        return identity(n) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity(n)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity(identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":360,"studentId":0,"date":null,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n        if k==n+1: =>           \r\n        if k==n:   <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def partial_rep(k, val):\r\n        if k==n:\r\n            return val\r\n        else:\r\n            return partial_rep(k+1, f(val))\r\n    return lambda x: partial_rep(1, x)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def partial_rep(k,val):\n        if k==n+1:\n            return val\n        else:\n            return partial_rep(k+1,f(val))\n    return lambda x: partial_rep(1,x)\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def partial_rep(k, val):\r\n        if k==n:\r\n            return val\r\n        else:\r\n            return partial_rep(k+1, f(val))\r\n    return lambda x: partial_rep(0, x)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":361,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n    return lambda x: f(repeated(f, n-1)(x)) =>           \r\n    return lambda x: f(repeat(f, n-1)(x))   <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    return lambda x: f(repeat(f, n-1)(x))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    return lambda x: f(repeated(f, n-1)(x))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in <lambda>","    return lambda x: f(repeat(f, n-1)(x))","NameError: name 'repeat' is not defined","","# Error: expected","#     8","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":362,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n    a, total = 0, lambda x: x =>           \r\n    a, total = 0, x           <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    a, total = 0, x\r\n    while a<n:\r\n        total = compose1(f, total)\r\n        a += 1\r\n    return total\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    a, total = 0, lambda x: x\n    while a < n:\n        total = compose1(f, total)\n        a += 1\n    return total\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    a, total = 0, identity\r\n    while a<n:\r\n        total = compose1(f, total)\r\n        a += 1\r\n    return total\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    a, total = 0, x","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":363,"studentId":0,"date":null,"diff":"\r\nInputObject     SideIndicator\r\n-----------     -------------\r\n    while(n>1): =>           \r\n    while(n>0): <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    current = f\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    while (n>0):\r\n        current = compose1(f, current)\r\n        n -= 1\r\n    return current\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    current = f\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    while(n>1):\n        current = compose1(f, current)\n        n-=1\n    return current\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    current = identity\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    while (n>0):\r\n        current = compose1(f, current)\r\n        n -= 1\r\n    return current\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":364,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        return identity                     =>           \r\n    if n <= 3:                              =>           \r\n        return n                            =>           \r\n        return g(n-1)+(2*g(n-2))+(3*g(n-3)) =>           \r\n    else:                                   =>           \r\n        return f                            <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return identity\n    else:\n        return compose1(f,repeated(f,n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":365,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n            a -=1 =>           \r\n            a -=a <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    def h(x):\n        a=n\n        b = f(x)\n        if n==0:\n            return x\n        while a > 1:\n            b = f(b)\n            a -=a\n        return b\n    return h\n\n    \n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    def h(x):\n        a=n\n        b = f(x)\n        if n==0:\n            return x\n        while a > 1:\n            b = f(b)\n            a -=1\n        return b\n    return h\n\n    \n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":366,"studentId":0,"date":null,"diff":"\r\nInputObject                     SideIndicator\r\n-----------                     -------------\r\n    return repeated_repeater    =>           \r\n    return repeated_repeater(x) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeated_repeater(x):\n        k = n\n        while k > 0:\n            x = f(x)\n            k -= 1\n        return x\n    return repeated_repeater(x)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeated_repeater(x):\n        k = n\n        while k > 0:\n            x = f(x)\n            k -= 1\n        return x\n    return repeated_repeater\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in repeated","    return repeated_repeater(x)","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":367,"studentId":0,"date":null,"diff":"\r\nInputObject                                              SideIndicator\r\n-----------                                              -------------\r\n        return compose1(f, repeated(f, n-1))             =>           \r\n        return compose1(n-1, repeated(f, n-1))           <=           \r\ndef compose1(f, g):                                      <=           \r\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\" <=           \r\n    def h(x):                                            <=           \r\n        return f(g(x))                                   <=           \r\n    return h                                             <=           \r\n                                                         <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    elif n == 1:\n        return f\n    else:\n        return compose1(n-1, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    elif n == 1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 173, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 173, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":368,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        elif m == 0: =>           \r\n            return x =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def much_repeated(x, m):\r\n        if m==1:\r\n            return f(x)\r\n        else:\r\n            return f(much_repeated(x, m-1))\r\n    return lambda j: much_repeated(j, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def much_repeated(x, m):\n        if m == 1:\n            return f(x)\n        elif m == 0:\n            return x\n        else:\n            return f(much_repeated(x, m-1))\n    return lambda j: much_repeated(j, n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def much_repeated(x, m):\r\n        if m==1:\r\n            return f(x)\r\n        else:\r\n            return f(much_repeated(x, m-1))\r\n    return lambda j: much_repeated(j, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in much_repeated","    return f(much_repeated(x, m-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in much_repeated","    return f(much_repeated(x, m-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in much_repeated","    return f(much_repeated(x, m-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in much_repeated","    return f(much_repeated(x, m-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in much_repeated","    return f(much_repeated(x, m-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in much_repeated","    return f(much_repeated(x, m-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in much_repeated","    if m == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":369,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        if n==0:     =>           \r\n            return x =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def repeat_value(x):\r\n        a = 2\r\n        k = f(x)\r\n        while a<=n:\r\n            a = a+1\r\n            k = f(k)\r\n        return k\r\n    return repeat_value\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeat_value (x):\n        a = 2\n        k= f(x)\n        if n==0:\n            return x\n        while a <= n:\n            a= a + 1\n            k= f(k)\n        return k\n    return repeat_value\n      \ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def repeat_value(x):\r\n        a = 2\r\n        k = f(x)\r\n        while a<=n:\r\n            a = a+1\r\n            k = f(k)\r\n        return k\r\n    return repeat_value\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":370,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n    while n > 0: =>           \r\n    while n > 1: <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def identity(x):\r\n        return x\r\n    a = identity\r\n    while n>1:\r\n        a = compose1(f, a)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def identity(x):\n        return x\n\n    #if n == 1:\n    #    return f\n    #elif n == 0:\n    #    return identity\n    #else:\n    #    return repeated(compose1(f, f), (n - 1))\n    a = identity\n    while n > 0:\n        a = compose1(f, a)\n        n -= 1\n    return a\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def identity(x):\r\n        return x\r\n    a = identity\r\n    while n>0:\r\n        a = compose1(f, a)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":371,"studentId":0,"date":null,"diff":"\r\nInputObject                      SideIndicator\r\n-----------                      -------------\r\n    >>> repeated(square, 0)(5)   =>           \r\n        h=f                      =>           \r\n            h=compose1(h,f)      =>           \r\n    >>> repeated(square, 0)(5)   <=           \r\n            h=compose1(f,f)      <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        i=2\n        while i<=n:\n            h=compose1(f,f)\n            i+=1\n        return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)  \n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        i=2\n        h=f\n        while i<=n:\n            h=compose1(h,f)\n            i+=1\n        return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":372,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n        fn = compose1(f, fn) =>           \r\n        n -= 1               =>           \r\n        fn = compose(f, fn)  <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    fn, i = id, 0\n    while n > 0:\n        fn = compose(f, fn)\n    return fn\n\ndef id(x):\n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    fn, i = id, 0\n    while n > 0:\n        fn = compose1(f, fn)\n        n -= 1\n    return fn\n\ndef id(x):\n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    fn = compose(f, fn)","NameError: name 'compose' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":373,"studentId":0,"date":null,"diff":"\r\nInputObject                 SideIndicator\r\n-----------                 -------------\r\n    return repeated_tracker =>           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeated_tracker(k):\n        counter = 1\n        while counter <= n:\n            k = f(k)\n            counter += 1\n        return k\n        \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeated_tracker(k):\n        counter = 1\n        while counter <= n:\n            k = f(k)\n            counter += 1\n        return k\n    return repeated_tracker\n        \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":374,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n    while k < n:  =>           \r\n    while k <= n: <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    identity = lambda x: x\r\n    k = 0\r\n    while k<=n:\r\n        identity = compose1(f, identity)\r\n        k = k+1\r\n    return identity\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    identity = lambda x: x\n    k = 0\n    while k < n:\n        identity = compose1(f, identity)\n        k = k + 1\n    return identity\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    identity = lambda x: x\r\n    k = 1\r\n    while k<=n:\r\n        identity = compose1(f, identity)\r\n        k = k+1\r\n    return identity\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":375,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n        return compose1(f, repeated(f, n-1))   =>           \r\n        return compose1(repeated(f, n-1), n-1) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    elif n == 1:\n        return f\n    else: \n        return compose1(repeated(f, n-1), n-1)\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    elif n == 1:\n        return f\n    else: \n        return compose1(f, repeated(f, n-1))\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 174, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":376,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        return lambda a:a =>           \r\n        return            <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return \r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==0:\n        return lambda a:a\n    if n==1:\n        return f\n    return compose1(f,repeated(f,n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==0:\r\n        return \r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":377,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        while k < n:  =>           \r\n        while k <= n: <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def repeater(x):\r\n        k = 0\r\n        while k<=n:\r\n            x = f(x)\r\n            k = k+1\r\n        return x\r\n    return repeater\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeater(x):\n        k = 0\n        while k < n:\n            x = f(x)\n            k = k + 1\n        return x\n    return repeater\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeater(x):\r\n        k = 1\r\n        while k<=n:\r\n            x = f(x)\r\n            k = k+1\r\n        return x\r\n    return repeater\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":378,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n    return compose1(repeated(f, n - 1), (f)) =>           \r\n    return compose(repeated(f, n - 1), (f))  <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n <= 0:\n        return lambda x : x\n    if n == 1:\n        return f\n    return compose(repeated(f, n - 1), (f))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n <= 0:\n        return lambda x : x\n    if n == 1:\n        return f\n    return compose1(repeated(f, n - 1), (f))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in repeated","    return compose(repeated(f, n - 1), (f))","NameError: name 'compose' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":379,"studentId":0,"date":null,"diff":"\r\nInputObject                              SideIndicator\r\n-----------                              -------------\r\n    return compose1(f,repeated(f,n-1))   =>           \r\n    return compose1((f,repeated(f)),n-1) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    return compose1((f,repeated(f)),n-1)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    return compose1(f,repeated(f,n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated","    return compose1((f,repeated(f)),n-1)","TypeError: repeated() missing 1 required positional argument: 'n'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":380,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n    a = lambda x: x          =>           \r\n        a = compose1(f, a)   =>           \r\n    a = lambda x: f(x)       <=           \r\n        a = compose1(f, a-1) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    a = lambda x: f(x)\n    while  n >= 1:\n        a = compose1(f, a-1)\n        n -= 1\n    return a\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    a = lambda x: x\n    while  n >= 1:\n        a = compose1(f, a)\n        n -= 1\n    return a\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 170, in repeated","    a = compose1(f, a-1)","TypeError: unsupported operand type(s) for -: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":381,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n        return          <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    function = f\r\n    if n==0:\r\n        return \r\n    while n>1:\r\n        function = compose1(function, f)\r\n        n = n-1\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    function = f\n    if n == 0:\n        return identity\n    while n > 1:\n        function = compose1(function,f)\n        n = n - 1\n    return function\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    function = f\r\n    if n==0:\r\n        return \r\n    while n>1:\r\n        function = compose1(function, f)\r\n        n = n-1\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":382,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n    def call(x):     =>           \r\n    def call(f,n,x): <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def call(f,n,x):\n        for i in range(0,n):\n            x = f(x)\n        return x\n    return call\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def call(x):\n        for i in range(0,n):\n            x = f(x)\n        return x\n    return call\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: call() missing 2 required positional arguments: 'n' and 'x'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":383,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n        return compose1(identity, identity)    =>           \r\n        return compose1(identity, f)           =>           \r\n        return compose1(f, repeated(f, n-1))   =>           \r\n        return compose1(identity, identity)()  <=           \r\n        return compose1(identity, f)()         <=           \r\n        return compose1(f, repeated(f, n-1))() <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def compose1(f, g):\n        \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n        def h(x):\n            return f(g(x))\n        return h\n    if n == 0:\n        return compose1(identity, identity)()\n    if n == 1:\n        return compose1(identity, f)()\n    else:\n        return compose1(f, repeated(f, n-1))()\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def compose1(f, g):\n        \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n        def h(x):\n            return f(g(x))\n        return h\n    if n == 0:\n        return compose1(identity, identity)\n    if n == 1:\n        return compose1(identity, f)\n    else:\n        return compose1(f, repeated(f, n-1))\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in repeated","    return compose1(f, repeated(f, n-1))()","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in repeated","    return compose1(f, repeated(f, n-1))()","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in repeated","    return compose1(identity, f)()","TypeError: h() missing 1 required positional argument: 'x'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":384,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    function = f           =>           \r\n    while n > 1:           =>           \r\n    function = lambda x: x <=           \r\n    while n > 0:           <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    function = lambda x: x\r\n    while n>0:\r\n        function = compose1(f, function)\r\n        n -= 1\r\n    def funct(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return function(x)\r\n    return funct\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # func = compose1(f, f)\n    # while n > 0:\n    # \tfunc = compose1(f, func)\n    # \tn -= 1\n    function = f\n    while n > 1:\n    \tfunction = compose1(f, function)\n    \tn -= 1\n\n    def funct(x):\n    \tif n == 0:\n    \t\treturn x\n    \telse:\n    \t\treturn function(x)\n    return funct\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    function = lambda x: x\r\n    while n>0:\r\n        function = compose1(f, function)\r\n        n -= 1\r\n    def funct(x):\r\n        if identity==0:\r\n            return x\r\n        else:\r\n            return function(x)\r\n    return funct\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":385,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n        return compose1(f, repeated(f, n - 1)) =>           \r\n        return f(repeated(f, n - 1))           <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    elif n == 1:\n        return f\n    else:\n        return compose1(f, repeated(f, n - 1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":386,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        return compose1(f, repeated(f, n-1)) =>           \r\n        return repeated(compose1, n-1)       <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return identity\n    else:\n        return repeated(compose1, n-1)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":387,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n            return f(repeated(f, n-1)(x)) =>           \r\n            n-=1                          <=           \r\n            return f(func(x))             <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def func(x):\n        if n == 0:\n            return x\n        else:\n            n-=1\n            return f(func(x))\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def func(x):\n        if n == 0:\n            return x\n        else:\n            return f(repeated(f, n-1)(x))\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in func","    if n == 0:","UnboundLocalError: local variable 'n' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":388,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n        for i in range(n):   =>           \r\n            x = f(x)         =>           \r\n        return x             =>           \r\n        y = f(x)             <=           \r\n        for i in range(n-1): <=           \r\n            y = f(y)         <=           \r\n        return(y)            <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def eff(x):\r\n        y = f(x)\r\n        for i in range(n-1):\r\n            y = f(y)\r\n        return (y)\r\n    return eff\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def eff(x):\n        for i in range(n):\n            x = f(x)\n        return x\n    return eff\n    \ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def eff(x):\r\n        y = f(x)\r\n        for i in range(n-1):\r\n            y = f(y)\r\n        return (y)\r\n    return eff\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":389,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        return total =>           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeated_function(base):\n        trial, total = 1, base\n        while trial <= n:\n            total = f(total)\n            trial = trial + 1\n    return repeated_function\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeated_function(base):\n        trial, total = 1, base\n        while trial <= n:\n            total = f(total)\n            trial = trial + 1\n        return total\n    return repeated_function\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","","# Error: expected","#     8","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":390,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n        return f    =>           \r\n        return f(x) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n>1:\r\n        return compose1(f, repeated(f, n-1))\r\n    elif n==1:\r\n        return f(x)\r\n    else:\r\n        return identity\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n > 1:\n        return compose1(f,repeated(f,n-1))\n    elif n == 1:\n        return f\n    else:\n        return identity\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n>0:\r\n        return compose1(f, repeated(f, n-1))\r\n    elif n==1:\r\n        return f(x)\r\n    else:\r\n        return identity\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeated","    return f(x)","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":391,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        if n == 0:   =>           \r\n            return x =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        num = 1\r\n        g = f(x)\r\n        while num<n:\r\n            g = f(g)\r\n            num = num+1\r\n        return g\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def h(x):\n        num = 1\n        g = f(x)\n        if n == 0:\n            return x\n        while num < n:\n            g = f(g)\n            num = num + 1\n        return g\n    return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def h(x):\r\n        num = 1\r\n        g = f(x)\r\n        while num<n:\r\n            g = f(g)\r\n            num = num+1\r\n        return g\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":392,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n                return identity(func) =>           \r\n                return identity(x)    <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper1(func):\n        def helper2(num):\n            if num == 0:\n                return identity(x)\n            else:\n                return f(helper2(num - 1))\n        return helper2(n)\n    return helper1\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper1(func):\n        def helper2(num):\n            if num == 0:\n                return identity(func)\n            else:\n                return f(helper2(num - 1))\n        return helper2(n)\n    return helper1\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 164, in helper1","    return helper2(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in helper2","    return f(helper2(num - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in helper2","    return f(helper2(num - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in helper2","    return f(helper2(num - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in helper2","    return identity(x)","NameError: name 'x' is not defined","","# Error: expected","#     8","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":393,"studentId":0,"date":null,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n            k -= 1 =>           \r\n            k += 1 <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def helper(x):\n        k = n\n        while k>0:\n            x = f(x)\n            k += 1\n        return x\n    return helper\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def helper(x):\n        k = n\n        while k>0:\n            x = f(x)\n            k -= 1\n        return x\n    return helper\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     8","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":394,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    if n == 0:          =>           \r\n        return identity =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    a = f\r\n    while n>1:\r\n        a = compose1(f, a)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    a = f\n    if n == 0:\n        return identity\n    while n > 1:\n        a = compose1(f, a)\n        n -= 1\n    return a\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    a = f\r\n    while n>1:\r\n        a = compose1(f, a)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":395,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n        print(n) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        print(n)\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n\n    if n == 0:\n        return identity\n    elif n == 1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        print(n)\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","3","2","","# Error: expected","#     ","# but got","#     3","#     2","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":396,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return f        =>           \r\n    elif n == 0:        =>           \r\n        return identity =>           \r\n        return 1        <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 1:\n        return 1\n    return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 1:\n        return f\n    elif n == 0:\n        return identity\n    return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":397,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        if k==n:        =>           \r\n    if n==0:            =>           \r\n        return identity =>           \r\n        if k>=n:        <=           \r\n                        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def help_repeat(k, f):\r\n        if k>=n:\r\n            return f\r\n        else:\r\n            return compose1(f, help_repeat(k+1, f))\r\n    return help_repeat(1, f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def help_repeat(k, f):\n        if k==n: \n            return f\n        else:\n            return compose1( f, help_repeat(k+1, f))\n    \n    if n==0:\n        return identity\n\n    return help_repeat(1,f)\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def help_repeat(k, f):\r\n        if k>=n:\r\n            return f\r\n        else:\r\n            return compose1(f, help_repeat(k+1, f))\r\n    return help_repeat(1, f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":398,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n        for i in range(0,n): =>           \r\n        for i in range(1,n): <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def repeater(x):\r\n        for i in range(1, n):\r\n            x = f(x)\r\n        return x\r\n    return repeater\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeater(x):\n        for i in range(0,n):\n            x = f(x)\n        return x\n    return repeater\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeater(x):\r\n        for i in range(0, n):\r\n            x = f(x)\r\n        return x\r\n    return repeater\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":399,"studentId":0,"date":null,"diff":"\r\nInputObject                              SideIndicator\r\n-----------                              -------------\r\n    return compose1(f, repeated(f, n-1)) =>           \r\n    return compose1(f, repeated(n-1))    <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    return compose1(f, repeated(n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"any\"))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    return compose1(f, repeated(n-1))","TypeError: repeated() missing 1 required positional argument: 'n'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":400,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n        return f(repeated(f, n-1)(x)) =>           \r\n        return f(repeated(f, n-1))    <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def func(x):\r\n        if n==0:\r\n            return x\r\n        return f(repeated(f, n-1))\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def func(x):\n        if n == 0:\n            return x\n        return f(repeated(f, n-1)(x))\n    return func\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def func(x):\r\n        if n==0:\r\n            return x\r\n        return f(repeated(f, n-1)(x))\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in func","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":401,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n        k = 0                  =>           \r\n        while k < n:           =>           \r\n            x, k = f(x), k + 1 =>           \r\n        return x               =>           \r\n    def h(x):                  =>           \r\n    return h                   =>           \r\n    g = f                      <=           \r\n    while n >= 1:              <=           \r\n        g = compose1(f, g)     <=           \r\n        n = n - 1              <=           \r\n    return g                   <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>=1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        k = 0\n        while k < n:\n            x, k = f(x), k + 1\n        return x\n    return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    g = identity\r\n    while n>=1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":402,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n    g = f                         =>           \r\n    while n > 1:                  =>           \r\n        g = compose1(f,g)         =>           \r\n        n -= 1                    =>           \r\n        return g(i)               =>           \r\n                                  <=           \r\n        else:                     <=           \r\n            g = f                 <=           \r\n            while n > 1:          <=           \r\n                g = compose1(f,g) <=           \r\n                n -= 1            <=           \r\n            return g(i)           <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n   \n    def base(i):\n        if n==0:\n            return i\n        else:\n            g = f\n            while n > 1:\n                g = compose1(f,g)\n                n -= 1\n            return g(i)        \n    return base\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    g = f\n    while n > 1:\n        g = compose1(f,g)\n        n -= 1\n    def base(i):\n        if n==0:\n            return i\n        return g(i)        \n    return base\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in base","    if n==0:","UnboundLocalError: local variable 'n' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":403,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        k = lambda x: x =>           \r\n        k = lambda: x   <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n>1:\r\n        return compose1(f, repeated(f, n-1))\r\n    elif n==1:\r\n        return f\r\n    elif n==0:\r\n        k = lambda : x\r\n        return k\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    if n > 1:\n        return compose1(f, repeated(f, n-1))\n    elif n ==1: \n        return f\n    elif n ==0: \n        k = lambda x: x\n        return k \n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n>1:\r\n        return compose1(f, repeated(f, n-1))\r\n    elif n==1:\r\n        return f\r\n    elif n==0:\r\n        k = lambda : x\r\n        return identity\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: <lambda>() takes 0 positional arguments but 1 was given","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":404,"studentId":0,"date":null,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n    def h(x, i=0): =>           \r\n    def h(x, i):   <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    i = 0\n    def h(x, i):\n        if i == n:\n            return x\n        else:\n            i += 1\n            return f(h(x, i))\n    return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    i = 0\n    def h(x, i=0):\n        if i == n:\n            return x\n        else:\n            i += 1\n            return f(h(x, i))\n    return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: h() missing 1 required positional argument: 'i'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":405,"studentId":0,"date":null,"diff":"\r\nInputObject                                              SideIndicator\r\n-----------                                              -------------\r\n        return compose1((repeated(f,n-1)),f)             =>           \r\n        return lambda x: compose1(f(repeated (f,n-1),f)) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n        return lambda x: x\n    else:\n        return lambda x: compose1(f(repeated (f,n-1),f))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n        return lambda x: x\n    else:\n        return compose1((repeated(f,n-1)),f)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in <lambda>","    return lambda x: compose1(f(repeated (f,n-1),f))","TypeError: increment() takes 1 positional argument but 2 were given","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":406,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        b,i = f,n        =>           \r\n        if i == 0:       =>           \r\n            return value =>           \r\n        a,b,i = 0,f,n    <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def repeated_function(value):\r\n        a, b, i = 0, f, n\r\n        while i>1:\r\n            b = compose1(f, b)\r\n            i -= 1\r\n        return b(value)\r\n    return repeated_function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeated_function(value):\n        b,i = f,n\n        if i == 0:\n            return value\n        while i > 1:\n            b = compose1(f,b)\n            i -= 1\n        return b(value)\n    \"\"\"    if (n == 1):\n            return f(value)\n        else:\n            return compose1(f,repeated(f, n-1))(value)\"\"\"\n    return repeated_function\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def repeated_function(value):\r\n        a, b, i = 0, f, n\r\n        while i>1:\r\n            b = compose1(f, b)\r\n            i -= 1\r\n        return b(value)\r\n    return repeated_function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":407,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n    elif n == 0: =>           \r\n    elif n < 0:  <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==1:\r\n        return f\r\n    elif n<0:\r\n        return repeated(identity, 1)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n\n    if n == 1:\n        return f\n    elif n == 0:\n        return repeated(identity, 1)\n    else:\n        return compose1(f,repeated(f,n-1))\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==1:\r\n        return f\r\n    elif n<0:\r\n        return repeated(identity, 1)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":408,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        return identity  =>           \r\n        return indentity <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return indentity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\n \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 164, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 164, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 164, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeated","    return indentity","NameError: name 'indentity' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":409,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        a = identity =>           \r\n    if n==0:         =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    a = f\r\n    while n>1:\r\n        a = compose1(a, f)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    a = f\n    if n==0:\n        a = identity\n    while n>1:\n        a = compose1(a,f)\n        n-=1 \n    return a\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    a = f\r\n    while n>1:\r\n        a = compose1(a, f)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":410,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n            n_func = f(x)                     =>           \r\n            return repeated(f, n - 1)(n_func) =>           \r\n                                              =>           \r\n            while n > 0:                      <=           \r\n                n_func = f(x)                 <=           \r\n                n = n - 1                     <=           \r\n                return repeated(n_func)       <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeated_function(x):\n        if n == 0:\n            return x\n        else:\n            while n > 0:\n                n_func = f(x)\n                n = n - 1\n                return repeated(n_func)\n    return repeated_function\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeated_function(x):\n        if n == 0:\n            return x\n        else:\n            n_func = f(x)\n            return repeated(f, n - 1)(n_func)\n\n    return repeated_function\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeated_function","    if n == 0:","UnboundLocalError: local variable 'n' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":411,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        return compose1(repeated(f, n-1), f) =>           \r\n    if n <= 3:                               =>           \r\n        return n                             =>           \r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)  =>           \r\n    else:                                    =>           \r\n        return repeated(compose1(f, f), n-1) <=           \r\n    \"*** YOUR CODE HERE ***\"                 <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    else:\n        return repeated(compose1(f, f), n-1)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    else:\n        return compose1(repeated(f, n-1), f)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":412,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n        i = 2                         =>           \r\n        while i <= n:                 =>           \r\n            func = compose1(f, func)  =>           \r\n        return func                   =>           \r\n            i += 1                    =>           \r\n    elif n == 1:                      <=           \r\n        return lambda x:f(x)          <=           \r\n        return f(repeated(f, n-1))    <=           \r\n    #else:                            <=           \r\n    #    i = 2                        <=           \r\n    #    while i <= n:                <=           \r\n    #        func = compose1(f, func) <=           \r\n    #        i += 1                   <=           \r\n    #    return func                  <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    func = lambda x: f(x)\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return lambda x: f(x)\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    func = lambda x: f(x)\n    if n == 0 : \n        return lambda x: x\n    else: \n        i = 2\n        while i <= n:\n            func = compose1(f, func)\n            i += 1\n        return func\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    func = lambda x: f(x)\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return lambda x: f(x)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 176, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 176, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":413,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n            return compose1(identity, identity) =>           \r\n            return compose1(f, identity)        =>           \r\n            return x                            <=           \r\n            return f(x)                         <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    repeat = compose1(f, f)\r\n    counter = 2\r\n    def incorporates_repeat(repeat, counter, n):\r\n        if n==0:\r\n            return x\r\n        if n==1:\r\n            return f(x)\r\n        if counter<n:\r\n            repeat = compose1(repeat, f)\r\n            counter += 1\r\n            return incorporates_repeat(repeat, counter, n)\r\n        return repeat\r\n    return incorporates_repeat(repeat, counter, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    repeat = compose1(f, f)\n    counter = 2\n    def incorporates_repeat(repeat, counter, n):\n        if n == 0:\n            return compose1(identity, identity)\n        if n == 1:\n            return compose1(f, identity)\n        if counter < n:\n            repeat = compose1(repeat, f)\n            counter += 1\n            return incorporates_repeat(repeat, counter, n)\n        return repeat\n    return incorporates_repeat(repeat, counter, n)\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    repeat = compose1(f, f)\r\n    counter = 2\r\n    def incorporates_repeat(repeat, counter, n):\r\n        if n==0:\r\n            return identity\r\n        if n==1:\r\n            return f(x)\r\n        if counter<n:\r\n            repeat = compose1(repeat, f)\r\n            counter += 1\r\n            return incorporates_repeat(repeat, counter, n)\r\n        return repeat\r\n    return incorporates_repeat(repeat, counter, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 186, in repeated","    return incorporates_repeat(repeat, counter, n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 178, in incorporates_repeat","    return x","NameError: name 'x' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":414,"studentId":0,"date":null,"diff":"\r\nInputObject                                                      SideIndicator\r\n-----------                                                      -------------\r\n        test_num = n                                             =>           \r\n        while test_num > 0:                                      =>           \r\n            x = f(x)                                             =>           \r\n            test_num = test_num - 1                              =>           \r\n        return x                                                 =>           \r\n        k = 1                                                    <=           \r\n        total = 0                                                <=           \r\n        while k <= n:                                            <=           \r\n            if n >= 2:                                           <=           \r\n                if total == 0:                                   <=           \r\n                    total = compose1(f(x), f(x)) + total         <=           \r\n                    k = k + 1                                    <=           \r\n                else:                                            <=           \r\n                    total = compose1(f(total), f(total)) + total <=           \r\n                    k = k + 1                                    <=           \r\n                total = f(n)                                     <=           \r\n        return total                                             <=           \r\n            else:                                                <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def helper(x):\n        k = 1\n        total = 0\n        while k <= n:\n            if n >= 2:\n                if total == 0:\n                    total = compose1(f(x), f(x)) + total\n                    k = k + 1\n                else:\n                    total = compose1(f(total), f(total)) + total\n                    k = k + 1\n            else:\n                total = f(n)\n        if n == 0:\n            return x\n        return total\n    return helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def helper(x):\n        test_num = n\n        while test_num > 0:\n            x = f(x)\n            test_num = test_num - 1\n        if n == 0:\n            return x\n        return x\n    return helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 171, in helper","    total = compose1(f(x), f(x)) + total","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":415,"studentId":0,"date":null,"diff":"\r\nInputObject                              SideIndicator\r\n-----------                              -------------\r\n        if n>0:                          =>           \r\n            return f(repeated(f,n-1)(x)) =>           \r\n        else:                            =>           \r\n            return x                     =>           \r\n        if n>1:                          <=           \r\n            return f(repeated(f,n))      <=           \r\n                                         <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x):\n        if n>1:\n            return f(repeated(f,n))\n    return helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x):\n        if n>0:\n            return f(repeated(f,n-1)(x))\n        else:\n            return x\n    return helper\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 167, in helper","    return f(repeated(f,n))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":416,"studentId":0,"date":null,"diff":"\r\nInputObject                                          SideIndicator\r\n-----------                                          -------------\r\n        k = 0                                        =>           \r\n        while k < n:                                 =>           \r\n            x, k = f(x), k + 1                       =>           \r\n        return x                                     =>           \r\n    def h(x):                                        =>           \r\n    return h                                         =>           \r\n    # g = f                                          <=           \r\n    # while n > 1:                                   <=           \r\n    #     g = compose1(f, g)                         <=           \r\n    #     n = n - 1                                  <=           \r\n    # return g                                       <=           \r\n    return accumulate(compose1, f, n-1, lambda k: f) <=           \r\n                                                     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # g = f\n    # while n > 1:\n    #     g = compose1(f, g)\n    #     n = n - 1\n    # return g\n    return accumulate(compose1, f, n-1, lambda k: f)\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def h(x):\n        k = 0\n        while k < n:\n            x, k = f(x), k + 1\n        return x\n    return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 78, in accumulate","    return accumulate(combiner, base, n-1, term)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 78, in accumulate","    return accumulate(combiner, base, n-1, term)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 78, in accumulate","    return accumulate(combiner, base, n-1, term)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 78, in accumulate","    return accumulate(combiner, base, n-1, term)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 78, in accumulate","    return accumulate(combiner, base, n-1, term)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 78, in accumulate","    return accumulate(combiner, base, n-1, term)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 74, in accumulate","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":417,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n        i, composedval = 1, x =>           \r\n        i, composedval = 0, x <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def repeat_helper(x):\r\n        i, composedval = 0, x\r\n        while i<=n:\r\n            composedval = f(composedval)\r\n            i += 1\r\n        return composedval\r\n    return repeat_helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeat_helper(x):\n        i, composedval = 1, x\n        while i <= n:\n            composedval = f(composedval)\n            i += 1\n        return composedval\n    return repeat_helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeat_helper(x):\r\n        i, composedval = 1, x\r\n        while i<=n:\r\n            composedval = f(composedval)\r\n            i += 1\r\n        return composedval\r\n    return repeat_helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":418,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        return compose1(f, repeated(f, n-1)) =>           \r\n        return compose(f, repeated(f, n-1))  <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(LeafWildcard(\"ArgNode\"))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 167, in repeated","    return compose(f, repeated(f, n-1))","NameError: name 'compose' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":419,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        if a == 0:      =>           \r\n            return x    =>           \r\n        if a == 1:      <=           \r\n            return f(x) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def helper(x, a = n):\r\n        if a==1:\r\n            return f(x)\r\n        else:\r\n            return f(helper(x, a-1))\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x, a=n):\n        if a == 0:\n            return x\n        else:\n            return f(helper(x, a - 1))\n    return helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def helper(x, a = n):\r\n        if a==1:\r\n            return f(x)\r\n        else:\r\n            return f(helper(x, a-1))\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in helper","    return f(helper(x, a - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in helper","    return f(helper(x, a - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in helper","    return f(helper(x, a - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in helper","    return f(helper(x, a - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in helper","    return f(helper(x, a - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in helper","    return f(helper(x, a - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in helper","    if a == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":420,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        return repeat =>           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        i, repeat = 1, x\n        while i <= n:\n            repeat = f(repeat)\n            i += 1\n    return h\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        i, repeat = 1, x\n        while i <= n:\n            repeat = f(repeat)\n            i += 1\n        return repeat\n    return h\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","","# Error: expected","#     8","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":421,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n            x = f(x)   =>           \r\n            # x = f(x) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        i = n\n        while i > 0:\n            # x = f(x)\n            i -= 1\n        return x\n    return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        i = n\n        while i > 0:\n            x = f(x)\n            i -= 1\n        return x\n    return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":422,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n            if k > 0:                   =>           \r\n                return rf(x, j-1, f(k)) =>           \r\n            else:                       =>           \r\n                return rf(x, j-1, f(x)) =>           \r\n                                        =>           \r\n            return rf(x, j-1, f(x))     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def rf(x, j=n, k=0):\n        if j == 0:\n            if k > 0:\n                return k\n            else:\n                return x\n        else:\n            return rf(x, j-1, f(x))\n    return rf\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def rf(x, j=n, k=0):\n        if j == 0:\n            if k > 0:\n                return k\n            else:\n                return x\n        else:\n            if k > 0:\n                return rf(x, j-1, f(k))\n            else:\n                return rf(x, j-1, f(x))\n\n    return rf\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","6","","# Error: expected","#     8","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":423,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    if n == 0:          =>           \r\n        return identity =>           \r\n    #if n == 0:         <=           \r\n        #return x       <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    k = 1\r\n    result = f\r\n    while k<n:\r\n        result = compose1(f, result)\r\n        k += 1\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    ##def compose(f):\n        #\"\"\"return a function h such that h(x) = f(g(x)).\"\"\"\n        #def h(x):\n            #return f(f(x))\n        #return h\n\n    k = 1\n    if n == 0:\n        return identity\n    result = f\n    while k < n:\n        result = compose1(f,result)\n        k+=1\n    return result\n\n\n\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    k = 1\r\n    result = f\r\n    while k<n:\r\n        result = compose1(f, result)\r\n        k += 1\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":424,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n    return (lambda x: f (repeated(f, n-1)(x)))  =>           \r\n    return (lambda x: f (repeat(f, n-1)(x)))    <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n        return (lambda x: x)\n    return (lambda x: f (repeat(f, n-1)(x))) \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n        return (lambda x: x)\n    return (lambda x: f (repeated(f, n-1)(x))) \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in <lambda>","    return (lambda x: f (repeat(f, n-1)(x)))","NameError: name 'repeat' is not defined","","# Error: expected","#     8","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":425,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n    \"\"\"def h(f, n):                          =>           \r\n            return repeated(f, n - 1)        =>           \r\n    return h(f, n, )\"\"\"                      =>           \r\n    def compose1(f, g):                      =>           \r\n        def h(x):                            =>           \r\n            return f(g(x))                   =>           \r\n        return h                             =>           \r\n    if n == 0:                               =>           \r\n        return identity                      =>           \r\n    elif n == 1:                             =>           \r\n        return f                             =>           \r\n    while n >= 1:                            =>           \r\n        return compose1(repeated(f, n-1), f) =>           \r\n                                             =>           \r\n                                             =>           \r\n    def h(f, n, x):                          <=           \r\n            x = f(x)                         <=           \r\n            return repeated(f, n - 1, x)     <=           \r\n                                             <=           \r\n    return h(f, n, f)                        <=           \r\n                                             <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    def h(f, n, x):\n        if n == 0:\n            return identity\n        elif n == 1:\n            return f\n        else:\n            x = f(x)\n            return repeated(f, n - 1, x)\n            \n    return h(f, n, f)\n\n    \n\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    \"\"\"def h(f, n):\n        if n == 0:\n            return identity\n        elif n == 1:\n            return f\n        else:\n            return repeated(f, n - 1)\n\n    return h(f, n, )\"\"\"\n\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n == 0:\n        return identity\n    elif n == 1:\n        return f\n    while n >= 1:\n        return compose1(repeated(f, n-1), f)\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 169, in repeated","    return h(f, n, f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in h","    x = f(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":426,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        x = compose1(f,x) =>           \r\n        x = compose(f,x)  <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    i, x = 1, identity\r\n    while i<=n:\r\n        x = compose(f, x)\r\n        i += 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    i, x = 1, identity\n    while i <= n:\n        x = compose1(f,x)\n        i += 1\n    return x\n    \n        \ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    i, x = 1, identity\r\n    while i<=n:\r\n        x = compose1(f, x)\r\n        i += 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(LeafWildcard(\"ArgNode\"))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    x = compose(f,x)","NameError: name 'compose' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":427,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n                           =>           \r\n    if n==0:               =>           \r\n        return lambda n: n =>           \r\n    elif n<=1:             =>           \r\n    if n<=1:               <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n<=1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n==0:\n        return lambda n: n\n    elif n<=1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n<=1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":428,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    if n == 0:          =>           \r\n        return identity =>           \r\n    if n == 1:          <=           \r\n        return f        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    return compose1(f,repeated(f,n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":429,"studentId":0,"date":null,"diff":"\r\nInputObject                      SideIndicator\r\n-----------                      -------------\r\n    if n != 0:                   =>           \r\n        ans = f                  =>           \r\n        count = 1                =>           \r\n        while count < n:         =>           \r\n            ans= compose1(f,ans) =>           \r\n            count += 1           =>           \r\n        return ans               =>           \r\n        return identity          =>           \r\n    else:                        =>           \r\n    ans = f                      <=           \r\n    count = 1                    <=           \r\n    while count < n:             <=           \r\n        ans= compose1(f,ans)     <=           \r\n        count += 1               <=           \r\n    return ans                   <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    ans = f\r\n    count = 1\r\n    while count<n:\r\n        ans = compose1(f, ans)\r\n        count += 1\r\n    return ans\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n != 0:\n        ans = f\n        count = 1\n        while count < n:\n            ans= compose1(f,ans)\n            count += 1\n        return ans\n    else:\n        return identity\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    ans = f\r\n    count = 1\r\n    while count<n:\r\n        ans = compose1(f, ans)\r\n        count += 1\r\n    return ans\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":430,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n    g = identity               =>           \r\n    for i in range(1, n + 1):  =>           \r\n        g = compose1(f, g)     =>           \r\n    return g                   =>           \r\n    def s(x):                  <=           \r\n        return x               <=           \r\n    for i in range (1, n):     <=           \r\n        def s(x):              <=           \r\n            return f(s(x))     <=           \r\n    return s                   <=           \r\n                               <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    \"\"\"if n == 0:\n        def s(x):\n            return x\n\n    elif n == 1:\n        def s(x):\n            return f(x)\n\n    else:\n        def s(x):\n            return f(repeated(f, n - 1)(x))\n    return s\"\"\"\n\n    def s(x):\n        return x\n\n    for i in range (1, n):\n        def s(x):\n            return f(s(x))\n\n    return s\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    \"\"\"if n == 0:\n        def s(x):\n            return x\n\n    elif n == 1:\n        def s(x):\n            return f(x)\n\n    else:\n        def s(x):\n            return f(repeated(f, n - 1)(x))\n    return s\"\"\"\n\n    g = identity\n\n    for i in range(1, n + 1): \n        g = compose1(f, g)\n    return g\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 175, in s","    return f(s(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 175, in s","    return f(s(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 175, in s","    return f(s(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 175, in s","    return f(s(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 175, in s","    return f(s(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 175, in s","    return f(s(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 175, in s","    return f(s(x))","RecursionError: maximum recursion depth exceeded","","# Error: expected","#     8","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":431,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    def func(x):           =>           \r\n        counter = n        =>           \r\n        while counter > 0: =>           \r\n            counter -= 1   =>           \r\n    def func(x, n):        <=           \r\n        while n > 0:       <=           \r\n            n -= 1         <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"\"\"if n == 0:\n        return ???\n    elif n == 1:\n        return f(idk)\n    else:\n        idk = compose1(f, f)\n        n -= 1\n        repeated(f, n)\n    return idk\"\"\"\n    def func(x, n):\n        while n > 0:\n            x = f(x)\n            n -= 1\n        return x\n    return func\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"\"\"if n == 0:\n        return ???\n    elif n == 1:\n        return f(idk)\n    else:\n        idk = compose1(f, f)\n        n -= 1\n        repeated(f, n)\n    return idk\"\"\"\n    def func(x):\n        counter = n\n        while counter > 0:\n            x = f(x)\n            counter -= 1\n        return x\n    return func\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: func() missing 1 required positional argument: 'n'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":432,"studentId":0,"date":null,"diff":"\r\nInputObject                 SideIndicator\r\n-----------                 -------------\r\n    a = identity            =>           \r\n    while n > 0:            =>           \r\n        a = compose1 (f, a) =>           \r\n    a = f                   <=           \r\n    while n > 1:            <=           \r\n        a = compose1 (f,a)  <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    a = f\r\n    while n>1:\r\n        a = compose1(f, a)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    a = identity\n    while n > 0:\n        a = compose1 (f, a)\n        n -= 1\n    return a\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    a = f\r\n    while n>1:\r\n        a = compose1(f, a)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":433,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n    if n == 0:                                  =>           \r\n        return (lambda x: x)                    =>           \r\n    return (lambda x: f(repeated(f, n-1)(x)))   =>           \r\n    def compose1(x):                            <=           \r\n        if n == 0:                              <=           \r\n            return compose1(x)                  <=           \r\n        return compose1(f(repeated(f, n-1)(x))) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def compose1(x):\n        if n == 0:\n            return compose1(x)\n        return compose1(f(repeated(f, n-1)(x)))\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return (lambda x: x)\n    return (lambda x: f(repeated(f, n-1)(x)))\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":434,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    if n == 0:             =>           \r\n        return lambda x: x =>           \r\n    elif n == 1:           =>           \r\n        return f           =>           \r\n    elif n == 2:           =>           \r\n    if n == 2:             <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==2:\r\n        return compose1(f, f)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    elif n == 1:\n        return f\n    elif n == 2:\n        return compose1(f, f)\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==2:\r\n        return compose1(f, f)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in repeated","    if n == 2:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":435,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n    k=f     =>           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if (n==0): return identity\n    for i in range(1, n):\n    \tk=compose1(k, f)\n    return k\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if (n==0): return identity\n    k=f\n    for i in range(1, n):\n    \tk=compose1(k, f)\n    return k\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 155, in repeated","    k=compose1(k, f)","UnboundLocalError: local variable 'k' referenced before assignment","","# Error: expected","#     ","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":436,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n    def make_new(f,n):                                =>           \r\n            return make_new(compose1(function,f),n-1) =>           \r\n    return make_new(f,n)                              =>           \r\n    if n <=3:                                         =>           \r\n        return n                                      =>           \r\n        return g(n-1)+2*g(n-2)+3*g(n-3)               =>           \r\n    \"\"\"if n == 0:                                     <=           \r\n        return identity                               <=           \r\n    elif n == 1:                                      <=           \r\n        return f                                      <=           \r\n        return repeated(compose1(f,f),n-1)\"\"\"         <=           \r\n    def make_new():                                   <=           \r\n            return repeated(make_new(function,f),n-1) <=           \r\n    return make_new()                                 <=           \r\n                                                      <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    function = f\r\n    def make_new():\r\n        if n==0:\r\n            return identity\r\n        elif n==1:\r\n            return f\r\n        else:\r\n            return repeated(make_new(function, f), n-1)\r\n    return make_new()\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"\"\"\n    function = f\n    i =1\n    while i<n:\n        function = compose1(function,f)\n        i+=1\n    if n ==0:\n        return identity\n    else:\n        return function\"\"\"\n    \"*** YOUR CODE HERE ***\"\n    function = f\n    def make_new(f,n):\n        if n == 0:\n            return identity\n        elif n == 1:\n            return f\n        else:\n            return make_new(compose1(function,f),n-1)\n    return make_new(f,n)\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    function = f\r\n    def make_new():\r\n        if n==0:\r\n            return identity\r\n        elif n==1:\r\n            return f\r\n        else:\r\n            return compose1(repeated(function, n-1), f)\r\n    return make_new()\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 187, in repeated","    return make_new()","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 186, in make_new","    return repeated(make_new(function,f),n-1)","TypeError: make_new() takes 0 positional arguments but 2 were given","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":437,"studentId":0,"date":null,"diff":"\r\nInputObject                 SideIndicator\r\n-----------                 -------------\r\n    if n == 0:              =>           \r\n        return lambda x: x  =>           \r\n    elif n == 1:            =>           \r\n    if n == 1:              <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x \n    elif n == 1: \n        return f\n    return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":438,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n        return compose1(f, repeated(f, n - 1)) =>           \r\n        return f(repeated(f, n - 1))           <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n<1:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n < 1:\n        return lambda x: x\n    elif n == 1:\n        return f\n    else:\n        return compose1(f, repeated(f, n - 1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n<1:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":439,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        return compose1(f, repeated(f, n-1)) =>           \r\n        return repeated(compose1(f,f), n-1)  <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return repeated(compose1(f, f), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    if n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\n\n   # f never changes \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    \n    def h(x):\n        return f(g(x))\n    return h\n\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":440,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n    i = 1   =>           \r\n    i = 0   <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    i = 0\r\n    function = f\r\n    while i<n:\r\n        function = compose1(f, function)\r\n        i += 1\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==0:\n        return identity\n    i = 1\n    function = f\n    while i<n:\n        function = compose1(f,function)\n        i += 1\n    return function\n\n\n\n\n    \"\"\"if n==0:\n        return n\n    def combined(x):\n        if n==0:\n            return lambda x: x\n        else:\n            return lambda x: f(combined(n-1)(x)\n    return combined\n\n    def compose_func(i):\n        if i==n:\n            return lambda x: f(f(f(x)))\n        elif n==0:\n            return x\n        else:\n            return compose_func(i+1)\n    return compose_func(0)\n\n\n    return combined_function(x)\n    return lambda x: compose1\"\"\"\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    i = 0\r\n    function = identity\r\n    while i<n:\r\n        function = compose1(f, function)\r\n        i += 1\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":441,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n    def combine_fun(x):      =>           \r\n        temp = x             =>           \r\n        i = 1                =>           \r\n        while i <= n:        =>           \r\n            temp = f(temp)   =>           \r\n            i = i + 1        =>           \r\n        return temp          =>           \r\n    return combine_fun       =>           \r\n    def input_value(x):      <=           \r\n        total, k = x, 1      <=           \r\n        if n == 0:           <=           \r\n            return x         <=           \r\n        while k <= n:        <=           \r\n            total = f(total) <=           \r\n            k = k+1          <=           \r\n        return input_value   <=           \r\n    return input_value       <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def input_value(x):\n        total, k = x, 1\n        if n == 0:\n            return x\n        while k <= n:\n            total = f(total)\n            k = k+1\n        return input_value\n    return input_value\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def combine_fun(x):\n        temp = x\n        i = 1\n        while i <= n:\n            temp = f(temp)\n            i = i + 1\n        return temp\n    return combine_fun\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function repeated.<locals>.input_value at 0x000002590DD3BBF8>","","# Error: expected","#     8","# but got","#     <function repeated.<locals>.input_value at 0x000002590DD3BBF8>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":442,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        if count==0: =>           \r\n                     =>           \r\n        if count==1: <=           \r\n                     <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def func(x, count = n):\r\n        if count==1:\r\n            return x\r\n        else:\r\n            return func(f(x), count-1)\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    def func(x, count=n):\n        if count==0:\n            return x\n        else:\n\n            return func(f(x), count-1)\n    return func\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def func(x, count = n):\r\n        if count==0:\r\n            return x\r\n        else:\r\n            return func(f(x), count-1)\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":443,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n                      =>           \r\n        iterative = 0 =>           \r\n    iterative = 0     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    \n\n\n    # def h(x):\n    #     k = 0\n    #     while k < n:\n    #         x, k = f(x), k + 1\n    #     return x\n    # return h\n\n\n\n    iterative = 0\n    def h(x):\n        while iterative < n:\n            x = f(x)\n            iterative = iterative + 1\n        return x\n    return h\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n\n#========================QUESTION 5========================\n\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    \n\n\n    # def h(x):\n    #     k = 0\n    #     while k < n:\n    #         x, k = f(x), k + 1\n    #     return x\n    # return h\n\n\n\n    \n    def h(x):\n        iterative = 0\n        while iterative < n:\n            x = f(x)\n            iterative = iterative + 1\n        return x\n    return h\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n\n#========================QUESTION 5========================\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 190, in h","    while iterative < n:","UnboundLocalError: local variable 'iterative' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":444,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    if n == 0:          =>           \r\n        return identity =>           \r\n                        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    x = 1\r\n    g = f\r\n    while x<n:\r\n        g = compose1(f, g)\r\n        x = x+1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = 1\n    g = f\n    if n == 0:\n        return identity\n    while x < n:\n        g = compose1(f, g)\n        x = x + 1\n    return g\n\n\n\n\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    x = 1\r\n    g = f\r\n    while x<n:\r\n        g = compose1(f, g)\r\n        x = x+1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":445,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n        return          <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    k = 1\r\n    g = f\r\n    if n==0:\r\n        return \r\n    else:\r\n        while k<n:\r\n            g, k = compose1(f, g), k+1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def compose1(f, g):\n        \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n        def h(x):\n            return f(g(x))\n        return h\n    k=1\n    g=f\n    if n==0:\n        return identity\n    else:\n        while k<n:\n            g, k = compose1(f,g), k+1\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    k = 1\r\n    g = f\r\n    if n==0:\r\n        return \r\n    else:\r\n        while k<n:\r\n            g, k = compose1(f, g), k+1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":446,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n            x, k= f(x), k + 1           =>           \r\n        return x                        =>           \r\n    return h                            =>           \r\n            x, k= compose1(f, n), k + 1 <=           \r\n            return x                    <=           \r\n        return h                        <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        k = 0 \n        while k < n:\n            x, k= compose1(f, n), k + 1\n            return x\n        return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        k = 0 \n        while k < n:\n            x, k= f(x), k + 1\n        return x\n    return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":447,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n    if n == 0:                               =>           \r\n        return lambda x: x                   =>           \r\n    elif n == 1:                             =>           \r\n        return f                             =>           \r\n    elif n == 2:                             =>           \r\n        return compose1(f, f)                =>           \r\n    else:                                    =>           \r\n        return compose1(f, repeated(f, n-1)) =>           \r\n        if n == 1:                           <=           \r\n            return x                         <=           \r\n        elif n == 2:                         <=           \r\n            return f                         <=           \r\n        else:                                <=           \r\n            return f(f(x))                   <=           \r\n    return repeated(h, n-1)                  <=           \r\n    def h(x):                                <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        if n == 1:\n            return x\n        elif n == 2:\n            return f\n        else:\n            return f(f(x))\n    return repeated(h, n-1)\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    elif n == 1:\n        return f\n    elif n == 2:\n        return compose1(f, f)\n    else:\n        return compose1(f, repeated(f, n-1))\n    \n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return repeated(h, n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return repeated(h, n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return repeated(h, n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return repeated(h, n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return repeated(h, n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return repeated(h, n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return repeated(h, n-1)","RecursionError: maximum recursion depth exceeded","","# Error: expected","#     ","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":448,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    if n == 0:          =>           \r\n        return identity =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    stack = f\r\n    while n>1:\r\n        stack = compose1(f, stack)\r\n        n -= 1\r\n    return stack\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    stack = f\n    while n > 1:\n        stack = compose1(f, stack)\n        n -= 1\n    return stack\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    stack = f\r\n    while n>1:\r\n        stack = compose1(f, stack)\r\n        n -= 1\r\n    return stack\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":449,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    elif n == 0:           =>           \r\n        return lambda x: x =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\n    return compose1(repeated(f, n), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    if n == 1:\n        return f\n    elif n == 0:\n        return lambda x: x\n    else:\n        return compose1(repeated(f, n-1), f)\n    return compose1(repeated(f, n), f)\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\n    return compose1(repeated(f, n), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 169, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 169, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 169, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 169, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 169, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 169, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":450,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n            return x =>           \r\n            return 0 <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def helper_function(x):\r\n        if n==0:\r\n            return 0\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return helper_function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def helper_function(x):\n        if n == 0:\n            return x\n        else:\n            return f(repeated(f,n-1)(x))\n    return helper_function\n        \ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def helper_function(x):\r\n        if n==0:\r\n            return 0\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return helper_function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","3","","# Error: expected","#     8","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":451,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        return lambda x: x =>           \r\n        return (x)         <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    if n==0:\r\n        return (x)\r\n    else:\r\n        while n-1>0:\r\n            n = n-1\r\n            g = compose1(f, g)\r\n        return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5) \n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    g = f\n    if n == 0:\n        return lambda x: x\n    else:\n        while n - 1 > 0:\n            n = n - 1\n            g = compose1(f, g)\n        return g\n  \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    g = f\r\n    if n==0:\r\n        return (identity)\r\n    else:\r\n        while n-1>0:\r\n            n = n-1\r\n            g = compose1(f, g)\r\n        return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5) ","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 169, in repeated","    return (x)","NameError: name 'x' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":452,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        return lambda x:x =>           \r\n        return n          <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return n\r\n    if n==1:\r\n        return lambda x: f(x)\r\n    return lambda x: f(repeated(f, n-1)(x))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n ==0:\n        return lambda x:x\n    if n==1:\n        return lambda x:f(x)\n    return lambda x:f(repeated(f, n-1)(x))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return lambda x: f(x)\r\n    return lambda x: f(repeated(f, n-1)(x))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","15","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":453,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n        return n        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return n\r\n    i = 0\r\n    g = f\r\n    while i<n-1:\r\n        g = compose1(g, f)\r\n        i += 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    i = 0\n    g = f\n    while i < n - 1:\n        g = compose1(g, f)\n        i += 1\n    return g\n    \n    #if n == 1:\n    #    return f\n    #else:\n    #    return repeated(compose1(f, f), n-1)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    i = 0\r\n    g = f\r\n    while i<n-1:\r\n        g = compose1(g, f)\r\n        i += 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":454,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    if n == 0:             =>           \r\n        return lambda x: x =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return lambda x: x\n    if n == 1:\n        return f\n    else:\n        return compose1(f, repeated(f, n - 1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 170, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 170, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 170, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 170, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 170, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 170, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 167, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":455,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n    while n > 0:                                  =>           \r\n    if n <= 3:                                    =>           \r\n        return n                                  =>           \r\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) =>           \r\n    if n <= 3:                                    =>           \r\n        return n                                  =>           \r\n    g1, g2, g3 = 1, 2, 3                          =>           \r\n    for i in range(4, n + 1):                     =>           \r\n        g1, g2, g3 = g2, g3, g1 * 3 + g2 * 2 + g3 =>           \r\n    return g3                                     =>           \r\n    while n > o:                                  <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    repeated_function = lambda x:x\n    while n > o:\n        repeated_function, n = compose1(f, repeated_function), n - 1\n    return repeated_function\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    repeated_function = lambda x:x\n    while n > 0:\n        repeated_function, n = compose1(f, repeated_function), n - 1\n    return repeated_function\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in repeated","    while n > o:","NameError: name 'o' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":456,"studentId":0,"date":null,"diff":"\r\nInputObject                          SideIndicator\r\n-----------                          -------------\r\n        return lambda x: identity(x) =>           \r\n        def lol(x):                  <=           \r\n            return lol(x)            <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        def lol(x):\r\n            return lol(x)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n        return lambda x: identity(x)\n    else:\n        return compose1(f,repeated(f,n-1))\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==0:\r\n        def lol(x):\r\n            return lol(x)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in h","    return f(g(x))","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":457,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n        return lambda x: x    =>           \r\n        return lambda x: f(x) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: f(x)\r\n    return lambda y: f(repeated(f, n-1)(y))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==0:\n        return lambda x: x\n    return lambda y: f(repeated(f, n-1)(y))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: identity(x)\r\n    return lambda y: f(repeated(f, n-1)(y))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":458,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n    if n == 0:                 =>           \r\n        return lambda num: num =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    g = f\n    if n == 0:\n        return lambda num: num\n    while n > 1:\n        g = compose1(f,g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":459,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n        return compose1(f, repeated(f, n - 1)) =>           \r\n        return repeated(compose1(f,f), n - 1)  <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n>0:\r\n        return repeated(compose1(f, f), n-1)\r\n    else:\r\n        return identity\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n > 0:\n        return compose1(f, repeated(f, n - 1))\n    else:\n        return identity\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n>0:\r\n        return compose1(repeated(f, n-1), f)\r\n    else:\r\n        return identity\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":460,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n        return x        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return x\r\n    def carrier(x):\r\n        if x==1:\r\n            return f\r\n        else:\r\n            return compose1(f, carrier(x-1))\r\n    return carrier(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    \n    def carrier(x):\n        if x == 1:\n            return f\n        else:\n            return compose1(f, carrier(x-1))\n\n\n    return carrier(n)\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def carrier(x):\r\n        if x==1:\r\n            return f\r\n        else:\r\n            return compose1(f, carrier(x-1))\r\n    return carrier(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":461,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        k = n        =>           \r\n        while k > 0: =>           \r\n            k -= 1   =>           \r\n        while n > 0: <=           \r\n            n -= 1   <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def fn(x):\n        while n > 0:\n            x = f(x)\n            n -= 1\n        return x\n    return fn\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def fn(x):\n        k = n\n        while k > 0:\n            x = f(x)\n            k -= 1\n        return x\n    return fn\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 158, in fn","    while n > 0:","UnboundLocalError: local variable 'n' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":462,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    if n < 1:           =>           \r\n        return identity =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    for _ in range(1, n):\r\n        g = compose1(f, g)\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    g = f\n    if n < 1:\n        return identity\n    for _ in range(1,n):\n       g = compose1(f,g)\n    return g\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    for _ in range(1, n):\r\n        g = compose1(f, g)\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":463,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n    return compose1(f, repeated(f, n-1))        =>           \r\n    return compose1(identity, repeated(f, n-1)) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    if n==1:\r\n        return compose1(identity, f)\r\n    return compose1(identity, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n        return compose1(identity, identity)\n    if n==1:\n        return compose1(identity, f)\n    return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    if n==1:\r\n        return compose1(identity, f)\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","6","","# Error: expected","#     8","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":464,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n        def compose(f, n):              =>           \r\n            return f(compose(f, n - 1)) =>           \r\n        return compose(f, n)            =>           \r\n        def helper(f, n):               <=           \r\n            return f(helper(f, n - 1))  <=           \r\n        helper(f, n)                    <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def h(x):\n        def helper(f, n):\n            if n == 0:\n                return identity(x)\n            return f(helper(f, n - 1))\n        helper(f, n)\n    return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def h(x):\n        def compose(f, n):\n            if n == 0:\n                return identity(x)\n            return f(compose(f, n - 1))\n        return compose(f, n)\n    return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","","# Error: expected","#     8","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":465,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n            x = f(x)                        =>           \r\n    if n <=3:                               =>           \r\n        return n                            =>           \r\n    return g(n-1) + 2 * g(n-2) + 3 * g(n-3) =>           \r\n            x = g(x)                        <=           \r\n    \"*** YOUR CODE HERE ***\"                <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def nth(x):\r\n        k = n\r\n        while k>0:\r\n            x = g(x)\r\n            k = k-1\r\n        return x\r\n    return nth\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def nth(x):\n        k = n\n        while k > 0:\n            x = f(x)\n            k = k - 1\n        return x\n    return nth\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def nth(x):\r\n        k = n\r\n        while k>0:\r\n            x = f(x)\r\n            k = k-1\r\n        return x\r\n    return nth\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","","# Error: expected","#     8","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":466,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        function = x    =>           \r\n        function = f(x) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def helper_function(x):\r\n        if n==0:\r\n            return x\r\n        counter = 1\r\n        function = f(x)\r\n        while counter<=n:\r\n            counter += 1\r\n            function = f(function)\r\n        return function\r\n    return helper_function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper_function(x):\n        if n == 0:\n            return x\n        counter = 1\n        function = x\n        while counter <= n:\n            counter += 1\n            function = f(function)\n        return function\n    return helper_function\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper_function(x):\r\n        if n==0:\r\n            return x\r\n        counter = 1\r\n        function = identity(x)\r\n        while counter<=n:\r\n            counter += 1\r\n            function = f(function)\r\n        return function\r\n    return helper_function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":467,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n        return          <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    elif n==0:\r\n        return \r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==1:\n        return f\n    elif n == 0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    elif n==0:\r\n        return \r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":468,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        i = 1             =>           \r\n        while i <= n:     =>           \r\n            x = f(x)      =>           \r\n            i += 1        =>           \r\n        return x          =>           \r\n    def h(x):             =>           \r\n    return h              =>           \r\n    g = f                 <=           \r\n    while n > 1:          <=           \r\n        k = compose1(f,g) <=           \r\n        n = n-1           <=           \r\n    return g              <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    g = f\n    while n > 1:\n        k = compose1(f,g)\n        n = n-1\n    return g\n \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def h(x):\n        i = 1\n        while i <= n:\n            x = f(x)\n            i += 1\n        return x\n    return h\n \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","6","","# Error: expected","#     8","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":469,"studentId":0,"date":null,"diff":"\r\nInputObject   SideIndicator\r\n-----------   -------------\r\n    def h(x): =>           \r\n    def g(x): <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    ","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def h(x):\n        k = 0\n        while k < n:\n            x, k = f(x), k + 1\n        return x\n    return h\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 178, in repeated","    return h","NameError: name 'h' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":470,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n    while n > 0: =>           \r\n    while n > 1: <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def value_holder(x):\r\n        return x\r\n    while n>1:\r\n        value_holder = compose1(f, value_holder)\r\n        n -= 1\r\n    return value_holder\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def value_holder(x):\n        return x\n    while n > 0:\n        value_holder = compose1(f, value_holder)\n        n -= 1\n    return value_holder\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def value_holder(x):\r\n        return x\r\n    while n>0:\r\n        value_holder = compose1(f, value_holder)\r\n        n -= 1\r\n    return value_holder\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":471,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n        new_func = compose1(identity, identity) =>           \r\n    return new_func                             =>           \r\n        def h(n):                               <=           \r\n            return identity(x)                  <=           \r\n        return h                                <=           \r\n        return new_func                         <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        def h(n):\r\n            return identity(x)\r\n        return h\r\n    else:\r\n        new_func = f\r\n        n = n-1\r\n        while n>=1:\r\n            new_func = compose1(new_func, f)\r\n            n -= 1\r\n        return new_func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        new_func = compose1(identity, identity)\n    else:\n        new_func = f\n        n = n - 1\n        while n >= 1:\n            new_func = compose1(new_func, f)\n            n -= 1\n    return new_func\n     #make one function return another function --> repeated() =\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        def h(n):\r\n            return identity(x)\r\n        return identity\r\n    else:\r\n        new_func = f\r\n        n = n-1\r\n        while n>=1:\r\n            new_func = compose1(new_func, f)\r\n            n -= 1\r\n        return new_func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in h","    return identity(x)","NameError: name 'x' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":472,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n        k=1 =>           \r\n        k=0 <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        k = 0\r\n        while k<=n:\r\n            x = f(x)\r\n            k = k+1\r\n        return x\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        k=1\n        while k<=n:\n            x=f(x)\n            k=k+1\n        return x \n    return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        k = 1\r\n        while k<=n:\r\n            x = f(x)\r\n            k = k+1\r\n        return x\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":473,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        res = x            =>           \r\n        for i in range(n): =>           \r\n        res = n            <=           \r\n        for i in range(x): <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repated_helper(x):\n        res = n\n        for i in range(x):\n            res = f(res)\n        return res\n    \n    return repated_helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repated_helper(x):\n        res = x\n        for i in range(n):\n            res = f(res)\n        return res\n    \n    return repated_helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","15","","# Error: expected","#     243","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":474,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        return lambda x: x                   =>           \r\n    elif n == 1:                             =>           \r\n        return f                             =>           \r\n        return compose1(f, repeated(f,n-1))  =>           \r\n       return f                              <=           \r\n       return compose1(f, repeated(f,n-1))   <=           \r\n    # if n=1:                                <=           \r\n    #     return repeated(f,1)               <=           \r\n    #     return repeated(f,repeated(f,n-1)) <=           \r\n                                             <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    elif n == 1:\n        return f\n    else:\n        return compose1(f, repeated(f,n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":475,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n    fn = lambda x: x =>           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    while n > 0:\n        fn = compose1(f, fn)\n        n = n - 1\n    return fn\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    fn = lambda x: x\n    while n > 0:\n        fn = compose1(f, fn)\n        n = n - 1\n    return fn\n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in repeated","    fn = compose1(f, fn)","UnboundLocalError: local variable 'fn' referenced before assignment","","# Error: expected","#     ","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":476,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n    def repeater(x, count = n):              =>           \r\n        if count == 0:                       =>           \r\n            return x                         =>           \r\n            return f(repeater(x, count - 1)) =>           \r\n    def repeater(x):                         <=           \r\n        if x == 0:                           <=           \r\n            return n                         <=           \r\n            return f(repeater(f, x-1))       <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def repeater(x):\n        if x == 0:\n            return n\n        else:\n            return f(repeater(f, x-1))\n    return repeater\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def repeater(x, count = n):\n        if count == 0:\n            return x\n        else:\n            return f(repeater(x, count - 1))\n    return repeater\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in repeater","    return f(repeater(f, x-1))","TypeError: repeater() takes 1 positional argument but 2 were given","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":477,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n    return inner =>           \r\n                 <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    def inner(x):\n        for r in range(n):\n            x=f(x)\n        return x\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        if f(g(x))%1==0:\n            print(\"is int\")\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def inner(x):\n        for r in range(n):\n            x=f(x)\n        return x\n    return inner\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        if f(g(x))%1==0:\n            print(\"is int\")\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":478,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    if n == 0:             =>           \r\n        return lambda x: x =>           \r\n                           =>           \r\n    i = 1                  <=           \r\n    x = lambda x: x        <=           \r\n    print (x)              <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    result = lambda x: f(x)\r\n    i = 2\r\n    while i<=n:\r\n        result = compose1(f, result)\r\n        i += 1\r\n    return result\r\n    i = 1\r\n    x = lambda x: x\r\n    print(x)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    result = lambda x: f(x)\n    i = 2\n    if n == 0:\n        return lambda x: x\n    while i <= n:\n        result = compose1(f, result)\n        i+=1\n    return result\n\n\n    # # if n == 0:\n    # #     return x\n    # while i<=n:\n    #     result = f(result)\n    # return result\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    result = lambda x: f(x)\r\n    i = 2\r\n    while i<=n:\r\n        result = compose1(f, result)\r\n        i += 1\r\n    return result\r\n    i = 1\r\n    x = lambda x: x\r\n    print(x)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":479,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n        return n        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return n\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \n    apply f a total number of n times\n\n    \"*** YOUR CODE HERE ***\" \n    \"\"\"\n\n    # if n == 0:\n    #     return f\n    # else: \n    #     f += f(term) \n    #     repeated(f, n - 1)\n\n    if n == 0:\n        return identity\n    if n == 1:\n        return f\n    return compose1(f, repeated(f, n - 1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":480,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n            x = f(x) =>           \r\n            x = h(x) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def j(x):\r\n        i = 0\r\n        while i<n:\r\n            i += 1\r\n            x = h(x)\r\n        return x\r\n    return j\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def j(x):\n        i = 0\n        while i < n:\n            i += 1\n            x = f(x)\n        return x\n    return j\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def j(x):\r\n        i = 0\r\n        while i<n:\r\n            i += 1\r\n            x = f(x)\r\n        return x\r\n    return j\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in j","    x = h(x)","NameError: name 'h' is not defined","","# Error: expected","#     8","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":481,"studentId":0,"date":null,"diff":"\r\nInputObject                         SideIndicator\r\n-----------                         -------------\r\n    func=f                          =>           \r\n    if n==0:                        =>           \r\n        return identity             =>           \r\n    if(n<=3):                       =>           \r\n        return n                    =>           \r\n    return g(n-1)+2*g(n-2)+3*g(n-3) =>           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    while n>1:\n        func=compose1(f,func)\n        n-=1\n    return func\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    func=f\n    if n==0:\n        return identity\n    while n>1:\n        func=compose1(f,func)\n        n-=1\n    return func\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in repeated","    func=compose1(f,func)","UnboundLocalError: local variable 'func' referenced before assignment","","# Error: expected","#     ","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":482,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        while n > 2: =>           \r\n            n -= 1   =>           \r\n        if n > 2:    <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n > 1:\n        returnFunc = compose1(f,f)\n        if n > 2:\n            returnFunc = compose1(returnFunc, f)\n        return returnFunc\n    else:\n        return identity\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n > 1:\n        returnFunc = compose1(f,f)\n        while n > 2:\n            returnFunc = compose1(returnFunc, f)\n            n -= 1\n        return returnFunc\n    else:\n        return identity\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","27","","# Error: expected","#     243","# but got","#     27","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":483,"studentId":0,"date":null,"diff":"\r\nInputObject     SideIndicator\r\n-----------     -------------\r\n    return func =>           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def func(x):\n        if (n == 0):\n            return x\n        return repeated(f,n-1)(f(x))\n    #return f(repeated(f,n-1))\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def func(x):\n        if (n == 0):\n            return x\n        return repeated(f,n-1)(f(x))\n    return func\n    #return f(repeated(f,n-1))\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":484,"studentId":0,"date":null,"diff":"\r\nInputObject                     SideIndicator\r\n-----------                     -------------\r\n        base = compose1(f,base) =>           \r\n        base = compose(f,base)  <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    base = lambda x: x\r\n    for x in range(n):\r\n        base = compose(f, base)\r\n    return base\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    base = lambda x: x\n    for x in range(n):\n        base = compose1(f,base)\n    return base\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    base = lambda x: x\r\n    for x in range(n):\r\n        base = compose1(f, base)\r\n    return base\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(LeafWildcard(\"ArgNode\"))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 155, in repeated","    base = compose(f,base)","NameError: name 'compose' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":485,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n        return          <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return \r\n    g = f\r\n    while n>1:\r\n        f, n = compose1(f, g), n-1\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    g = f\n    while n > 1:\n        f, n = compose1(f, g), n-1\n    return f\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==0:\r\n        return \r\n    g = f\r\n    while n>1:\r\n        f, n = compose1(f, g), n-1\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":486,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n    if n == 1:                              =>           \r\n        return f                            =>           \r\n        return compose1(f, repeated(f,n-1)) =>           \r\n        compose1(f, repeated(f,n-1))        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    if n == 1:\n        return f\n    else:\n        return compose1(f, repeated(f,n-1))\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), Tutor.synthesis.MagicK)))), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":487,"studentId":0,"date":null,"diff":"\r\nInputObject                      SideIndicator\r\n-----------                      -------------\r\n        return lambda x: x       =>           \r\n        return compose1(f, f)(0) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(f, f)(0)\r\n    else:\r\n        k = 2\r\n        x = compose1(f, f)\r\n        while k<n:\r\n            x = compose1(x, f)\r\n            k += 1\r\n        return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \n    if n == 0:\n        return lambda x: x\n    else:\n        k = 2\n        x = compose1(f, f)\n        while k < n:\n            x = compose1(x, f)\n            k += 1\n        return x\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==0:\r\n        return compose1(f, f)(0)\r\n    else:\r\n        k = 2\r\n        x = compose1(f, f)\r\n        while k<n:\r\n            x = compose1(x, f)\r\n            k += 1\r\n        return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":488,"studentId":0,"date":null,"diff":"\r\nInputObject                                             SideIndicator\r\n-----------                                             -------------\r\n    def returnFunction(x):                              =>           \r\n        ans = x                                         =>           \r\n        for z in range(n):                              =>           \r\n            ans = f(ans)                                =>           \r\n        return ans                                      =>           \r\n    returnFunction = f                                  <=           \r\n    for z in range(1,n):                                <=           \r\n        returnFunction = lambda y: f(returnFunction(y)) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    returnFunction = f\n    for z in range(1,n):\n    \treturnFunction = lambda y: f(returnFunction(y))\n    return returnFunction\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def returnFunction(x):\n    \tans = x\n    \tfor z in range(n):\n    \t\tans = f(ans)\n    \treturn ans\n    return returnFunction\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in <lambda>","    returnFunction = lambda y: f(returnFunction(y))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in <lambda>","    returnFunction = lambda y: f(returnFunction(y))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in <lambda>","    returnFunction = lambda y: f(returnFunction(y))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in <lambda>","    returnFunction = lambda y: f(returnFunction(y))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in <lambda>","    returnFunction = lambda y: f(returnFunction(y))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in <lambda>","    returnFunction = lambda y: f(returnFunction(y))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in <lambda>","    returnFunction = lambda y: f(returnFunction(y))","RecursionError: maximum recursion depth exceeded","","# Error: expected","#     8","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":489,"studentId":0,"date":null,"diff":"\r\nInputObject                              SideIndicator\r\n-----------                              -------------\r\n            return f(repeated(f,n-1)(x)) =>           \r\n            return f(repeated(f,n-1))    <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def function(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return f(repeated(f, n-1))\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def function(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f,n-1)(x))\n    return function\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def function(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in function","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":490,"studentId":0,"date":null,"diff":"\r\nInputObject                         SideIndicator\r\n-----------                         -------------\r\n    def poop(f, y):                 =>           \r\n        def z(x):                   =>           \r\n            return f(y(x))          =>           \r\n        return z                    =>           \r\n    return poop(f, repeated(f,n-1)) =>           \r\n    f = f(f)                        <=           \r\n    return repeated(f, n-1)         <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return lambda x: x\n    f = f(f)\n    return repeated(f, n-1)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return lambda x: x\n    def poop(f, y):\n        def z(x):\n            return f(y(x))\n        return z\n    return poop(f, repeated(f,n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 174, in repeated","    f = f(f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":491,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    if n == 0: =>           \r\n    if i == 0: <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    new_func, i = f, 1\r\n    if i==0:\r\n        return lambda x: x\r\n    while i<n:\r\n        new_func = compose1(f, new_func)\r\n        i += 1\r\n    return new_func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    new_func, i = f, 1\n    \n    if n == 0:\n        return lambda x: x\n    while i < n:\n        new_func = compose1 (f, new_func)\n        i += 1\n\n    return new_func\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    new_func, i = f, 1\r\n    if i==0:\r\n        return lambda x: x\r\n    while i<n:\r\n        new_func = compose1(f, new_func)\r\n        i += 1\r\n    return new_func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":492,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n            return x =>           \r\n            return f <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def compute(x):\r\n        if n==0:\r\n            return f\r\n        value = f(x)\r\n        i = 1\r\n        while i<n:\r\n            value = f(value)\r\n            i += 1\r\n        return value\r\n    return compute\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def compute(x):\n        if n == 0:\n            return x\n        value = f(x)\n        i = 1\n        while i < n:\n            value = f(value)\n            i += 1\n        return value\n    return compute\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compute(x):\r\n        if n==0:\r\n            return x\r\n        value = f(x)\r\n        i = 1\r\n        while i<n:\r\n            value = f(value)\r\n            i += 1\r\n        return value\r\n    return compute\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","<function square at 0x00000163E49A7D08>","","# Error: expected","#     5","# but got","#     <function square at 0x00000163E49A7D08>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":493,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        return identity  =>           \r\n        return f         <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f\r\n    def helper(e, t):\r\n        if t==n:\r\n            return f\r\n        else:\r\n            return compose1(f, helper(f, t+1))\r\n    return helper(f, 1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity \n    def helper(e, t):\n        if t == n:\n            return f\n        else:\n            return compose1(f, helper(f, t + 1))\n    return helper(f, 1)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def helper(e, t):\r\n        if t==n:\r\n            return f\r\n        else:\r\n            return compose1(f, helper(f, t+1))\r\n    return helper(f, 1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":494,"studentId":0,"date":null,"diff":"\r\nInputObject                              SideIndicator\r\n-----------                              -------------\r\n        function = compose1(function, f) =>           \r\n        funciton = compose1(function,f)  <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    function = f\r\n    if n==0:\r\n        return identity\r\n    while n>1:\r\n        funciton = compose1(function, f)\r\n        n = n-1\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    function = f\n    if n == 0:\n        return identity\n    while n > 1:\n        function = compose1(function, f)\n        n = n - 1\n    return function\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    a = f\r\n    if n==0:\r\n        return identity\r\n    while n>1:\r\n        a = compose1(a, f)\r\n        n = n-1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","6","","# Error: expected","#     8","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":495,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n            q=f(q)  =>           \r\n            q==f(q) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def compose1(q):\n        m = n\n        while m > 0:\n            q==f(q)\n            m-=1\n        return q\n    return compose1\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def compose1(q):\n        m = n\n        while m > 0:\n            q=f(q)\n            m-=1\n        return q\n    return compose1\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":496,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        return k      =>           \r\n    return m          =>           \r\n        return answer <=           \r\n    return m          <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def m(x):\n        i, k = 0 , x\n        while i < n:\n            k = f(k)\n            i += 1\n        return answer\n    return m \n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def m(x):\n        i, k = 0 , x\n        while i < n:\n            k = f(k)\n            i += 1\n        return k\n    return m\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 167, in m","    return answer","NameError: name 'answer' is not defined","","# Error: expected","#     8","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":497,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    elif n==0:          =>           \r\n        return identity =>           \r\n    elif n==1:          <=           \r\n        return n        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    elif n==1:\r\n        return n\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==1:\n        return f\n    elif n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f,n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    elif n==1:\r\n        return n\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in repeated","    if n==1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":498,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        return compose1(f, repeated(f, n-1)) =>           \r\n        compose1(repeated(f, n-1))           <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return identity\n    else:\n        compose1(repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeated","    compose1(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeated","    compose1(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeated","    compose1(repeated(f, n-1))","TypeError: compose1() missing 1 required positional argument: 'g'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":499,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n    if n == 0:                 =>           \r\n        return lambda x: x     =>           \r\n        if n == 0:             <=           \r\n            return lambda x: x <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    counter = 1\r\n    func = f\r\n    while counter<n:\r\n        if n==0:\r\n            return lambda x: x\r\n        counter += 1\r\n        func = compose1(func, f)\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter = 1\n    func = f \n    if n == 0:\n        return lambda x: x\n    while counter < n:\n        counter +=1\n        func = compose1(func, f) \n    return func\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    counter = 1\r\n    func = f\r\n    while counter<n:\r\n        if n==0:\r\n            return lambda x: x\r\n        counter += 1\r\n        func = compose1(func, f)\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":500,"studentId":0,"date":null,"diff":"\r\nInputObject   SideIndicator\r\n-----------   -------------\r\n    g = f     =>           \r\n        g = f <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        f = lambda z: z\n        g = lambda y: y\n        return compose1(f, g)\n    while n > 1:\n        g = f\n        g = compose1(f, g)\n        n -= 1\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    g = f\n    if n == 0:\n        f = lambda z: z\n        g = lambda y: y\n        return compose1(f, g)\n    while n > 1:\n        g = compose1(f, g)\n        n -= 1\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":501,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n        while k != 0 : =>           \r\n        while k != 1 : <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def repeated_2(x):\r\n        k = n\r\n        sum5 = x\r\n        while k!=1:\r\n            sum5 = f(sum5)\r\n            k -= 1\r\n        return sum5\r\n    return repeated_2\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def repeated_2(x) :\n        k = n\n        sum5 = x\n        while k != 0 :\n            sum5 = f(sum5)\n            k -= 1\n        return sum5\n    return repeated_2\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeated_2(x):\r\n        k = n\r\n        sum5 = x\r\n        while k!=0:\r\n            sum5 = f(sum5)\r\n            k -= 1\r\n        return sum5\r\n    return repeated_2\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":502,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n        return x        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return x\r\n    else:\r\n        count = n\r\n        g = f\r\n        while count>1:\r\n            g = compose1(g, f)\r\n            count -= 1\r\n        return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n        return identity\n    else:\n        count = n\n        g = f\n        while count>1:\n            g = compose1(g,f)\n            count -= 1\n        return g\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        count = n\r\n        g = f\r\n        while count>1:\r\n            g = compose1(g, f)\r\n            count -= 1\r\n        return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 155, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":503,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        return result =>           \r\n    return h          =>           \r\n        return h      <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        counter=n\n        result=x\n        while counter>0:\n            result=f(result)\n            counter-=1\n        return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        counter=n\n        result=x\n        while counter>0:\n            result=f(result)\n            counter-=1\n        return result\n    return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":504,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n            return compose1(f,repeated(f,n-1))(x) =>           \r\n            return compose1(f,repeated(f,n-1))    <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    assert n>=0\n    def func(x):\n        if n==0:\n            return x\n        if n==1:\n            return f(x)\n        else:  \n            return compose1(f,repeated(f,n-1))\n    return func        \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    assert n>=0\n    def func(x):\n        if n==0:\n            return x\n        if n==1:\n            return f(x)\n        else:  \n            return compose1(f,repeated(f,n-1))(x)\n    return func        \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function compose1.<locals>.h at 0x0000021871D39D90>","","# Error: expected","#     8","# but got","#     <function compose1.<locals>.h at 0x0000021871D39D90>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":505,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n        return          <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    elif n==0:\r\n        return \r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 1:\n        return f\n    elif n == 0:\n        return identity\n    else:\n        return compose1(f,repeated(f,n-1))    \n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    elif n==0:\r\n        return \r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":506,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n    def applyrepeated(x, a = n):          =>           \r\n        return f(applyrepeated(x, a - 1)) =>           \r\n    def applyrepeated(x):                 <=           \r\n        a -= 1                            <=           \r\n        return f(applyrepeated(x))        <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    a = n\n    def applyrepeated(x):\n        if a == 0:\n            return x\n        a -= 1\n        return f(applyrepeated(x))\n    return applyrepeated\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    a = n\n    def applyrepeated(x, a = n):\n        if a == 0:\n            return x\n        return f(applyrepeated(x, a - 1))\n    return applyrepeated\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 152, in applyrepeated","    if a == 0:","UnboundLocalError: local variable 'a' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":507,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    if n == 0:          =>           \r\n        return identity =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    if n == 1:\n        return f\n    return compose1(f,repeated(f,n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 150, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 150, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 150, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 150, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 150, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 150, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 148, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":508,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    if n == 0:          =>           \r\n        return identity =>           \r\n    if n == 1:          <=           \r\n        return f        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))    #repeated(compose1(f(n), f(n-1), n-1)    #repeated(compose1(f, n), n-1)    #compose1(f, n) + repeated(f, n-1)  \n        #return repeated(helper(f, n), n-1)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 176, in repeated","    return compose1(f, repeated(f, n-1))    #repeated(compose1(f(n), f(n-1), n-1)    #repeated(compose1(f, n), n-1)    #compose1(f, n) + repeated(f, n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 176, in repeated","    return compose1(f, repeated(f, n-1))    #repeated(compose1(f(n), f(n-1), n-1)    #repeated(compose1(f, n), n-1)    #compose1(f, n) + repeated(f, n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 176, in repeated","    return compose1(f, repeated(f, n-1))    #repeated(compose1(f(n), f(n-1), n-1)    #repeated(compose1(f, n), n-1)    #compose1(f, n) + repeated(f, n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 176, in repeated","    return compose1(f, repeated(f, n-1))    #repeated(compose1(f(n), f(n-1), n-1)    #repeated(compose1(f, n), n-1)    #compose1(f, n) + repeated(f, n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 176, in repeated","    return compose1(f, repeated(f, n-1))    #repeated(compose1(f(n), f(n-1), n-1)    #repeated(compose1(f, n), n-1)    #compose1(f, n) + repeated(f, n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 176, in repeated","    return compose1(f, repeated(f, n-1))    #repeated(compose1(f(n), f(n-1), n-1)    #repeated(compose1(f, n), n-1)    #compose1(f, n) + repeated(f, n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 173, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":509,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        if copy_n == 0: =>           \r\n            return x    =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def apply(x):\r\n        part = f\r\n        copy_n = n\r\n        while copy_n>1:\r\n            part = compose1(part, f)\r\n            copy_n = copy_n-1\r\n        return part(x)\r\n    return apply\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def apply(x):\n        part = f\n        copy_n = n\n        if copy_n == 0:\n            return x\n        while copy_n > 1:\n            part = compose1(part, f)\n            copy_n = copy_n-1\n        return part(x)\n    return apply\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def apply(x):\r\n        part = f\r\n        copy_n = n\r\n        while copy_n>1:\r\n            part = compose1(part, f)\r\n            copy_n = copy_n-1\r\n        return part(x)\r\n    return apply\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":510,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    if n==0:               =>           \r\n        return lambda x: x =>           \r\n    if n==1:               <=           \r\n        return f           <=           \r\n    elif n==0:             <=           \r\n        return x           <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    elif n==0:\r\n        return x\r\n    else:\r\n        return lambda x: f(repeated(f, n-1)(x))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n        return lambda x: x\n    else:\n        return lambda x: f(repeated(f, n-1)(x))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    elif n==0:\r\n        return identity\r\n    else:\r\n        return lambda x: f(repeated(f, n-1)(x))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 158, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":511,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return identity =>           \r\n        return f        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f\r\n    fun = compose1(f, f)\r\n    i = 2\r\n    while i<n:\r\n        fun = compose1(f, fun)\r\n        i += 1\r\n    return fun\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    fun = compose1(f, f)\n    i = 2\n    while i < n:\n        fun = compose1(f, fun)\n        i += 1\n    return fun\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    fun = compose1(f, f)\r\n    i = 2\r\n    while i<n:\r\n        fun = compose1(f, fun)\r\n        i += 1\r\n    return fun\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":512,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n    if n == 0:                 =>           \r\n        return lambda x: x     =>           \r\n    else:                      =>           \r\n        g = f                  =>           \r\n        while n > 1:           =>           \r\n            f = compose1(f, g) =>           \r\n            n -= 1             =>           \r\n    # if n == 0:               <=           \r\n    #     return               <=           \r\n    # else:                    <=           \r\n    g = f                      <=           \r\n    while n > 1:               <=           \r\n        f = compose1(f, g)     <=           \r\n        n -= 1                 <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>1:\r\n        f = compose1(f, g)\r\n        n -= 1\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return lambda x: x\n    else:\n        g = f\n        while n > 1:\n            f = compose1(f, g)\n            n -= 1\n    return f\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    while n>1:\r\n        f = compose1(f, g)\r\n        n -= 1\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":513,"studentId":0,"date":null,"diff":"\r\nInputObject                                                              SideIndicator\r\n-----------                                                              -------------\r\n        i = 1                                                            =>           \r\n        while i <= n:                                                    =>           \r\n            i += 1                                                       =>           \r\n    def change(coin, amount):                                            =>           \r\n        elif coin > amount:                                              =>           \r\n            return change(coin, amount - coin) + count(2 * coin, amount) =>           \r\n    return change(1, amount)                                             =>           \r\n        while n >= 0:                                                    <=           \r\n            n -= 1                                                       <=           \r\n    def count_using(min_coin, amount):                                   <=           \r\n        elif min_coin > amount:                                          <=           \r\n            with_min = count_using(min_coin, amount - min_coin)          <=           \r\n            without_min = count_using(2 * min_coin, amount)              <=           \r\n            return with_min + without_min                                <=           \r\n    return count_using(1, amount)                                        <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeat_function(e):\n        while n >= 0:\n            e = f(e)\n            n -= 1\n        return e\n    return repeat_function\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeat_function(e):\n        i = 1\n        while i <= n:\n            e = f(e)\n            i += 1\n        return e\n    return repeat_function\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 30","    ? = 1","    ^","SyntaxError: invalid syntax","","Error loading assignment: Error importing file hw02.py"]},{"ErrorFlag":0,"Id":514,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        while i > 1:  =>           \r\n            i -= 1    =>           \r\n        while n > 1:  <=           \r\n            n = n - 1 <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def func(x):\n        g = f\n        if n == 0:\n            return x\n        i = n\n        while n > 1:\n            g = compose1(f, g)\n            n = n - 1\n        return g(x)\n    return func\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def func(x):\n        g = f\n        if n == 0:\n            return x\n        i = n\n        while i > 1:\n            g = compose1(f, g)\n            i -= 1\n        return g(x)\n    return func\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in func","    if n == 0:","UnboundLocalError: local variable 'n' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":515,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n        k = 0                         =>           \r\n        while k < n:                  =>           \r\n            x, k = f(x), k + 1        =>           \r\n        return x                      =>           \r\n                                      <=           \r\n        return pow(f(x),pow(2, n -1)) <=           \r\n                                      <=           \r\n                                      <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n  \n\n    def h(x):\n        return pow(f(x),pow(2, n -1))\n    return h\n  \n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def h(x):\n        k = 0\n        while k < n:\n            x, k = f(x), k + 1\n        return x\n    return h\n  \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","1296","","# Error: expected","#     8","# but got","#     1296","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":516,"studentId":0,"date":null,"diff":"\r\nInputObject                                        SideIndicator\r\n-----------                                        -------------\r\n    def helper(x):                                 =>           \r\n        i = 1                                      =>           \r\n        while i <= n:                              =>           \r\n            x = f(x)                               =>           \r\n            i += 1                                 =>           \r\n        return x                                   =>           \r\n    return helper                                  =>           \r\n    return reduce(compose1, [f for i in range(n)]) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return reduce(compose1, [f for i in range(n)])\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x):\n        i = 1\n        while i <= n:\n            x = f(x)\n            i += 1\n        return x\n    return helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 172, in repeated","    return reduce(compose1, [f for i in range(n)])","NameError: name 'reduce' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":517,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        while counter < n: =>           \r\n        while k < n:       <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    def y(x):\n        counter, solution = 0, x\n        while k < n:\n            solution = f(solution)\n            counter += 1\n        return solution\n    return y\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    def y(x):\n        counter, solution = 0, x\n        while counter < n:\n            solution = f(solution)\n            counter += 1\n        return solution\n    return y\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 167, in y","    while k < n:","NameError: name 'k' is not defined","","# Error: expected","#     8","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":518,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        c = n             =>           \r\n        if c == 0:        =>           \r\n            while c > 0:  =>           \r\n                c = c - 1 =>           \r\n        if n == 0:        <=           \r\n            while n > 0:  <=           \r\n                n = n - 1 <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def apply(x):\n        if n == 0:\n            return x\n        else:\n            while n > 0:\n                x = f(x)\n                n = n - 1\n            return x\n    return apply\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def apply(x):\n        c = n\n        if c == 0:\n            return x\n        else:\n            while c > 0:\n                x = f(x)\n                c = c - 1\n            return x\n    return apply\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in apply","    if n == 0:","UnboundLocalError: local variable 'n' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":519,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n            b = compose1(f ,b) =>           \r\n        return b               =>           \r\n            b = compose1(f ,g) <=           \r\n        return g               <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def helper(f, n):\r\n        if n==0:\r\n            return lambda input_a: input_a\r\n        b = f\r\n        while n>=2:\r\n            b = compose1(f, g)\r\n            n -= 1\r\n        return g\r\n    return helper(f, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def helper(f, n):\n        if n == 0:\n            return lambda input_a: input_a\n        b = f\n        while n >= 2:\n            b = compose1(f ,b)\n            n -= 1\n        return b \n    return helper(f, n)\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(f, n):\r\n        if n==0:\r\n            return lambda input_a: input_a\r\n        a = f\r\n        while n>=2:\r\n            a = compose1(f, a)\r\n            n -= 1\r\n        return a\r\n    return helper(f, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","22","","# Error: expected","#     8","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":520,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n        return id =>           \r\n    return id     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n        def id(x):\n            return x\n    return id\n    count=1\n    func=f\n    while count<n:\n        func=compose1(func,f)\n        count+=1\n    return func\n     \n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n        def id(x):\n            return x\n        return id\n    count=1\n    func=f\n    while count<n:\n        func=compose1(func,f)\n        count+=1\n    return func\n     \n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in repeated","    return id","UnboundLocalError: local variable 'id' referenced before assignment","","# Error: expected","#     ","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":521,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        if n == 0:   =>           \r\n            return x =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def function(x):\r\n        number = n\r\n        total = f\r\n        while (number>1):\r\n            total = compose1(f, total)\r\n            number -= 1\r\n        return total(x)\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def function(x):\n        number = n\n        total = f\n        if n == 0:\n            return x\n        while(number>1):\n            total = compose1(f, total)\n            number -= 1\n        return total(x)\n    return function\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def function(x):\r\n        number = n\r\n        total = f\r\n        while (number>1):\r\n            total = compose1(f, total)\r\n            number -= 1\r\n        return total(x)\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":522,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        while z > 0: =>           \r\n        while n > 0: <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def helper(y):\r\n        z = n\r\n        while n>0:\r\n            y = f(y)\r\n            z -= 1\r\n        return y\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def helper(y):\n        z = n\n        while z > 0:\n            y = f(y)\n            z -= 1\n        return y\n    return helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(y):\r\n        j = n\r\n        while j>0:\r\n            y = f(y)\r\n            j -= 1\r\n        return y\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-j)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-j)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-j)), Selected(\\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     8","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":523,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        if n <= 0:                                    =>           \r\n            return compose1(f,repeated(f, n-1))(x)    =>           \r\n        if n == 0:                                    <=           \r\n            return repeated(compose1(f, f)(x), n - 1) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def rep(x):\n        if n == 0:\n            return x\n        else:\n            return repeated(compose1(f, f)(x), n - 1)\n    return rep\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def rep(x):\n        if n <= 0:\n            return x\n        else:\n            return compose1(f,repeated(f, n-1))(x)\n    return rep\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function repeated.<locals>.rep at 0x00000268A7BB6D08>","","# Error: expected","#     8","# but got","#     <function repeated.<locals>.rep at 0x00000268A7BB6D08>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":524,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n    def donothing(x):    =>           \r\n        return x         =>           \r\n    if n == 0:           =>           \r\n        return donothing =>           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    assert n >= 0\n    def doit(x):\n        i = f(x)\n        for j in range(0, n-1):\n            i = f(i)\n        return i\n    return doit\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    assert n >= 0\n    def doit(x):\n        i = f(x)\n        for j in range(0, n-1):\n            i = f(i)\n        return i\n    def donothing(x):\n        return x\n    if n == 0:\n        return donothing\n    return doit\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":525,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        return identity   =>           \r\n        return identity() <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity()\r\n    h = f\r\n    for i in range(0, n-1):\r\n        h = compose1(h, f)\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==0:\n        return identity\n    h=f\n    for i in range(0,n-1):\n        h= compose1(h,f)\n    return h\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==0:\r\n        return identity()\r\n    h = f\r\n    for i in range(0, n-1):\r\n        h = compose1(h, f)\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 175, in repeated","    return identity()","TypeError: identity() missing 1 required positional argument: 'x'","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":526,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        g = identity     =>           \r\n        return g         =>           \r\n        return indentity <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    x = 2\r\n    g = f\r\n    if n==0:\r\n        return indentity\r\n    while not n<x:\r\n        g = compose1(g, f)\r\n        x += 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    x = 2\n    g = f\n    if n == 0:\n        g = identity\n        return g\n    while not n < x:\n        g = compose1(g, f)\n        x += 1\n    return g\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    x = 2\r\n    g = f\r\n    if n==0:\r\n        return identity\r\n    while not n<x:\r\n        g = compose1(g, f)\r\n        x += 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in repeated","    return indentity","NameError: name 'indentity' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":527,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n            return func1                          =>           \r\n            return compose1(func1, constant_func) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    def looper(func1, index, constant_func = f):\r\n        if index==n:\r\n            return compose1(func1, constant_func)\r\n        else:\r\n            return looper(compose1(func1, constant_func), index+1, constant_func)\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return looper(f, 1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    def looper(func1, index, constant_func = f):\n        if index == n:\n            return func1\n        else:\n            return looper(compose1(func1, constant_func), index + 1, constant_func)\n    if n == 0:\n        return identity\n    else:\n        return looper(f, 1)\n    \"*** YOUR CODE HERE ***\"\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    def looper(func1, index, constant_func = f):\r\n        if index==n:\r\n            return compose1(func1, identity)\r\n        else:\r\n            return looper(compose1(func1, constant_func), index+1, constant_func)\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return looper(f, 1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":528,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n        return compose1(identity,identity) =>           \r\n        return 5                           <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return 5\r\n    else:\r\n        if n==1:\r\n            return f\r\n        else:\r\n            return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return compose1(identity,identity)\n    else:\n        if n == 1:\n            return f\n        else:\n            return compose1(f, repeated (f, n - 1) )\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        if n==1:\r\n            return f\r\n        else:\r\n            return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":529,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                   SideIndicator\r\n-----------                                                                   -------------\r\n        times = n                                                             =>           \r\n        else:                   #if not, then apply f to x, n amount of times =>           \r\n    if n <= 3:                                                                =>           \r\n        return n                                                              =>           \r\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)                         =>           \r\n    else:                                                                     =>           \r\n                                                                              =>           \r\n    times = n                                                                 <=           \r\n        else:               #if not, then apply f to x, n amount of times     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    #returns a function.. it'll take second argument\n    times = n \n    def base(x): \n        if times == 0:          #if the nth applicatio of f is 0, then just return x\n            return x \n        else:               #if not, then apply f to x, n amount of times\n            while times != 0:\n                x = f(x)\n                times -= 1 \n        return x\n    return base\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    #returns a function.. it'll take second argument\n    def base(x): \n        times = n \n        if times == 0:          #if the nth applicatio of f is 0, then just return x\n            return x \n        else:                   #if not, then apply f to x, n amount of times\n            while times != 0:\n                x = f(x)\n                times -= 1 \n        return x\n    return base\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 176, in base","    if times == 0:          #if the nth applicatio of f is 0, then just return x","UnboundLocalError: local variable 'times' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":530,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    if n == 0: =>           \r\n    if n == 1: <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return lambda x: x\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    else:\n        return compose1(f, repeated(f, n - 1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":531,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n        return f(repeated(f, n-1)(x)) =>           \r\n        return repeated(f, n-1)(x)    <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def apply(x):\n        if n == 0:\n            return x\n        return repeated(f, n-1)(x)\n    return apply  \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def apply(x):\n        if n == 0:\n            return x\n        return f(repeated(f, n-1)(x))\n    return apply  \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":532,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    if n == 0:             =>           \r\n        return lambda x: x =>           \r\n    if n == 1:             <=           \r\n        return f           <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    return compose1(f, repeated(f, n-1))\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 155, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 155, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 155, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 155, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 155, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 155, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 153, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":533,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n            g = compose1(f,g) =>           \r\n            g = compose(f,g)  <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        k = 1\r\n        while k<n:\r\n            g = compose(f, g)\r\n            k += 1\r\n        return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    g = f\n    if n == 0:\n        return identity\n    elif n == 1:\n        return f\n    else:\n        k = 1\n        while k < n:\n            g = compose1(f,g)\n            k += 1\n        return g\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    g = f\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        k = 1\r\n        while k<n:\r\n            g = compose1(f, g)\r\n            k += 1\r\n        return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(LeafWildcard(\"ArgNode\"))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in repeated","    g = compose(f,g)","NameError: name 'compose' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":534,"studentId":0,"date":null,"diff":"\r\nInputObject                                      SideIndicator\r\n-----------                                      -------------\r\n        i = 1                                    =>           \r\n        while i <= n:                            =>           \r\n            x = f(x)                             =>           \r\n            i += 1                               =>           \r\n        return x                                 =>           \r\n        if n == 0:                               <=           \r\n            return x                             <=           \r\n        if n == 1:                               <=           \r\n            return f(x)                          <=           \r\n        else:                                    <=           \r\n            return compose1(f, repeated(f, n-1)) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def repeated_helper(x):\r\n        if n==0:\r\n            return x\r\n        if n==1:\r\n            return f(x)\r\n        else:\r\n            return compose1(f, repeated(f, n-1))\r\n    return repeated_helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeated_helper(x):\n        i = 1\n        while i <= n:\n            x = f(x)\n            i += 1\n        return x\n    return repeated_helper\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeated_helper(x):\r\n        if n==0:\r\n            return x\r\n        if n==1:\r\n            return f(x)\r\n        else:\r\n            return compose1(f, repeated(f, n-1))(x)\r\n    return repeated_helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function compose1.<locals>.h at 0x0000027295498D90>","","# Error: expected","#     8","# but got","#     <function compose1.<locals>.h at 0x0000027295498D90>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":535,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        return lambda x: x =>           \r\n        return ()          <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    v = f\r\n    if n==0:\r\n        return \r\n    while n>1:\r\n        v = compose1(f, v)\r\n        n = n-1\r\n    return v\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \n    v = f\n    if n == 0:\n        return lambda x: x\n    while n > 1:\n        v = compose1(f, v)\n        n = n - 1\n    return v\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    v = f\r\n    if n==0:\r\n        return \r\n    while n>1:\r\n        v = compose1(f, v)\r\n        n = n-1\r\n    return v\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'tuple' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":536,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    if n==0:            =>           \r\n        return identity =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    x = f\r\n    while n>1:\r\n        x = compose1(x, f)\r\n        n -= 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    x = f\n    if n==0:\n        return identity\n    while n>1:\n        x = compose1(x,f)\n        n-=1\n    return x\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    x = f\r\n    while n>1:\r\n        x = compose1(x, f)\r\n        n -= 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":537,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    if n == 0:             =>           \r\n        return lambda x: x =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    k = 1\r\n    g = f\r\n    while k<=n-1:\r\n        g = compose1(f, g)\r\n        n -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    k = 1\n    g = f\n    if n == 0:\n        return lambda x: x\n    while k <= n - 1:\n        g = compose1(f, g)\n        n -= 1\n    return g\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    k = 1\r\n    g = f\r\n    while k<=n-1:\r\n        g = compose1(f, g)\r\n        n -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":538,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        return identity  =>           \r\n        return f         <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f\r\n    function, k = f, 1\r\n    while k<n:\r\n        function, k = compose1(f, function), k+1\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity \n    function, k = f, 1\n    while k < n:\n        function, k = compose1(f, function), k + 1\n    return function\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    function, k = f, 1\r\n    while k<n:\r\n        function, k = compose1(f, function), k+1\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":539,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n    g = lambda x: x    =>           \r\n    while n > 0:       =>           \r\n    g = f              <=           \r\n    while n > 1:       <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>1:\r\n        g = compose1(g, f)\r\n        n -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    g = lambda x: x   \n    while n > 0:\n        g = compose1(g, f)\n        n -= 1\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    while n>1:\r\n        g = compose1(g, f)\r\n        n -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":540,"studentId":0,"date":null,"diff":"\r\nInputObject                                                      SideIndicator\r\n-----------                                                      -------------\r\n        return identity                                          =>           \r\n        return f                                                 =>           \r\n        return compose1( f, repeated( f, n - 1 ) )               =>           \r\n        return x                                                 <=           \r\n        return f(n)                                              <=           \r\n        return compose1(repeated( compose1(f, f), n - 1 ), f(n)) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return x\n    elif n == 1:\n        return f(n)\n    else:\n        return compose1(repeated( compose1(f, f), n - 1 ), f(n))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    elif n == 1:\n        return f\n    else:\n        return compose1( f, repeated( f, n - 1 ) )\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":541,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n    while n > 1: =>           \r\n    while n > 0: <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    number = compose1(f, identity)\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    while n>0:\r\n        number = compose1(f, number)\r\n        n = n-1\r\n    return number\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    number  = compose1(f,identity)\n    'print(number(5))'\n    \n    if n ==0:\n        return compose1(identity,identity)\n\n    while n > 1:\n        \n        number = compose1(f,number)\n        n= n-1\n    return number\n\n    \"\"\"if n == 0:\n        return compose1(identity,identity)\n    else:\n        \"\"\"\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    number = compose1(identity, identity)\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    while n>0:\r\n        number = compose1(f, number)\r\n        n = n-1\r\n    return number\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":542,"studentId":0,"date":null,"diff":"\r\nInputObject                          SideIndicator\r\n-----------                          -------------\r\n    h = lambda x: f(x) if n>0 else x =>           \r\n    h = lambda x: f(x)               <=           \r\n    # if n>0 else x                  <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    h = lambda x: f(x)\r\n    counter = 1\r\n    while counter<n:\r\n        h = compose1(f, h)\r\n        counter += 1\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    h = lambda x: f(x) if n>0 else x\n    # def argument(func):\n    #     func = lambda x: f(x)\n    #     return x\n    # if n == 0:\n    #     return h\n    # else:\n    counter = 1\n    while counter < n:\n        h = compose1(f,h)\n        counter += 1\n    return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    h = lambda x: f(x)\r\n    counter = 1\r\n    while counter<n:\r\n        h = compose1(f, h)\r\n        counter += 1\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":543,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n                           =>           \r\n        return lambda x: x =>           \r\n                           <=           \r\n        return n           <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if (n==0):\r\n        return n\r\n    if (n==1):\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if (n==0):\n        return lambda x: x\n    if (n==1):\n        return f\n    return compose1(f,repeated(f,n-1))\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if (n==0):\r\n        return identity\r\n    if (n==1):\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":544,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n    def total(x): =>           \r\n        return x  =>           \r\n    total = x     <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    count = 1\r\n    total = x\r\n    while count<=n:\r\n        total = compose1(f, total)\r\n        count += 1\r\n    return total\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    count = 1\n    def total(x):\n        return x\n    while count <= n:\n        total = compose1(f, total)\n        count += 1\n    return total\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    count = 1\r\n    total = identity\r\n    while count<=n:\r\n        total = compose1(f, total)\r\n        count += 1\r\n    return total\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeated","    total = x","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":545,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    elif n == 0:        =>           \r\n        return identity =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return f\n    elif n == 0:\n        return identity\n    else:\n        return compose1(repeated(f, n-1), f)\n    # if n == 0:\n    #     return lambda x: x\n    # return lambda x: f(repeated(f,n-1)(x))\n   \n    \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 179, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 179, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 179, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 179, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 179, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 179, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 176, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":546,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n            return compose1(f, g)(x)    =>           \r\n            return compose1(f(x), g(x)) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def helper(x):\n        if n == 0:\n            return x\n        else:\n            g = repeated(f, n-1)\n            return compose1(f(x), g(x))\n    return helper\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def helper(x):\n        if n == 0:\n            return x\n        else:\n            g = repeated(f, n-1)\n            return compose1(f, g)(x)\n    return helper\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function compose1.<locals>.h at 0x00000214F3727EA0>","","# Error: expected","#     8","# but got","#     <function compose1.<locals>.h at 0x00000214F3727EA0>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":547,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                      SideIndicator\r\n-----------                                                                      -------------\r\n    def apply_function(x):                                                       =>           \r\n        i = 1                                                                    =>           \r\n        while i <= n:                                                            =>           \r\n            x, i = f(x), i + 1                                                   =>           \r\n    return apply_function                                                        =>           \r\n    first_term, second_term, third_term = 1, 2, 3                                =>           \r\n        next_term = (3 * first_term) + (2 * second_term) + third_term            =>           \r\n        first_term, second_term, third_term = second_term, third_term, next_term =>           \r\n    def f(x):                                                                    <=           \r\n        counter = 1                                                              <=           \r\n        while counter <= n:                                                      <=           \r\n            x = f(x)                                                             <=           \r\n            counter += 1                                                         <=           \r\n    return f                                                                     <=           \r\n    first, second, third = 1, 2, 3                                               <=           \r\n        next_term = (3 * first) + (2 * second) + third                           <=           \r\n        first, second, third = second, third, next_term                          <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def f(x):\n        counter = 1\n        while counter <= n:\n            x = f(x)\n            counter += 1\n        return x\n    return f   \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def apply_function(x):\n        i = 1\n        while i <= n:\n            x, i = f(x), i + 1\n        return x\n    return apply_function   \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in f","    x = f(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in f","    x = f(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in f","    x = f(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in f","    x = f(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in f","    x = f(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 166, in f","    x = f(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in f","    while counter <= n:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     8","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":548,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n            result = compose1(f, result)    =>           \r\n                                            =>           \r\n            result = lambda x: func(result) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def repeater(func, i):\n    \tresult = lambda x: func(x)\n    \tif i == 1:\n    \t\treturn result\n    \telse:\n    \t\tresult = lambda x: func(result)\n    \t\treturn repeater(result, i - 1)\n\n    if n == 0:\n    \treturn lambda x: x\n    else:\n    \treturn repeater(f, n)\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def repeater(func, i):\n    \tresult = lambda x: func(x)\n    \tif i == 1:\n    \t\treturn result\n    \telse:\n    \t\tresult = compose1(f, result)\n    \t\treturn repeater(result, i - 1)\n    \t\t\n\n    if n == 0:\n    \treturn lambda x: x\n    else:\n    \treturn repeater(f, n)\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 177, in <lambda>","    result = lambda x: func(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 181, in <lambda>","    result = lambda x: func(result)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 181, in <lambda>","    result = lambda x: func(result)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":549,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    if n == 0:             =>           \r\n        return lambda x: x =>           \r\n    if n == 1:             <=           \r\n        return             <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 1:\n        return \n    return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in h","    return f(g(x))","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":550,"studentId":0,"date":null,"diff":"\r\nInputObject                                        SideIndicator\r\n-----------                                        -------------\r\n        i = 0                                      =>           \r\n        while i < n:                               =>           \r\n            x, i = f(x), i + 1                     =>           \r\n        return x                                   =>           \r\n    def h(x):                                      =>           \r\n    return h                                       =>           \r\n    return accumulate(compose1, f, n, lambda i: f) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    return accumulate(compose1, f, n, lambda i: f)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        i = 0\n        while i < n:\n            x, i = f(x), i + 1\n        return x\n    return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":551,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n    return lambda x: f(repeated(f, n-1)(x)) =>           \r\n    return lambda x: f(repeat(f, n-1)(x))   <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n < 1:\n        return lambda x: x\n    return lambda x: f(repeat(f, n-1)(x))\n   \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n < 1:\n        return lambda x: x\n    return lambda x: f(repeated(f, n-1)(x))\n   \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in <lambda>","    return lambda x: f(repeat(f, n-1)(x))","NameError: name 'repeat' is not defined","","# Error: expected","#     8","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":552,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n    return helper_repeat =>           \r\n        return           <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"\"\"g= f\n    while n > 1:\n        n -= 1\n        g= compose1(f,g)\n    return g\"\"\"\n\n    def helper_repeat(x):\n        if n==0:\n            return x\n        else:\n            return compose1(f, repeated(f, n-1))(x)\n        return \n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"\"\"g= f\n    while n > 1:\n        n -= 1\n        g= compose1(f,g)\n    return g\"\"\"\n\n    def helper_repeat(x):\n        if n==0:\n            return x\n        else:\n            return compose1(f, repeated(f, n-1))(x)\n    return helper_repeat\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":553,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n            g = compose1(f,g) =>           \r\n            g = compose(f,g)  <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        i = 1\r\n        g = identity\r\n        while i<=n:\r\n            g = compose(f, g)\r\n            i += 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return identity\n    else:\n        i = 1\n        g = identity\n        while i <= n:\n            g = compose1(f,g)\n            i += 1\n    return g\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        i = 1\r\n        g = identity\r\n        while i<=n:\r\n            g = compose1(f, g)\r\n            i += 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(LeafWildcard(\"ArgNode\"))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 171, in repeated","    g = compose(f,g)","NameError: name 'compose' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":554,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n            if u == 0: =>           \r\n            if n == 0: <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \n    def compose(g,n):\n        def app(x, u=n):\n            if n == 0:\n                return x   \n            return app(g(x), u-1)\n        return app\n\n    return compose(f,n)\n\n    \n    \n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \n    def compose(g,n):\n        def app(x, u=n):\n            if u == 0:\n                return x   \n            return app(g(x), u-1)\n        return app\n\n    return compose(f,n)\n\n    \n    \n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 169, in app","    return app(g(x), u-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 169, in app","    return app(g(x), u-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 169, in app","    return app(g(x), u-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 169, in app","    return app(g(x), u-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 169, in app","    return app(g(x), u-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 169, in app","    return app(g(x), u-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 167, in app","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     8","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":555,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n                 =>           \r\n    if n == 0:   <=           \r\n        return n <=           \r\n                 <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return n\r\n    def fxn(num):\r\n        return num\r\n    while (n>0):\r\n        fxn = compose1(f, fxn)\r\n        n -= 1\r\n    return fxn\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def fxn(num):\n        return num\n\n    while (n > 0):\n        fxn = compose1(f, fxn)\n        n -= 1\n    return fxn\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if identity==0:\r\n        return n\r\n    def fxn(num):\r\n        return num\r\n    while (n>0):\r\n        fxn = compose1(f, fxn)\r\n        n -= 1\r\n    return fxn\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":556,"studentId":0,"date":null,"diff":"\r\nInputObject                                                     SideIndicator\r\n-----------                                                     -------------\r\n        if n==0:                                                =>           \r\n            return arg                                          =>           \r\n        else:                                                   =>           \r\n            return f(arg) if n==1 else f(repeated(f, n-1)(arg)) =>           \r\n                                                                =>           \r\n        return f(arg) if n==1 else f(repeated(f, n-1)(arg))     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def repeat(arg):\n        return f(arg) if n==1 else f(repeated(f, n-1)(arg))\n    return repeat\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def repeat(arg):\n        if n==0:\n            return arg\n        else: \n            return f(arg) if n==1 else f(repeated(f, n-1)(arg))\n    return repeat\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in repeat","    return f(arg) if n==1 else f(repeated(f, n-1)(arg))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in repeat","    return f(arg) if n==1 else f(repeated(f, n-1)(arg))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in repeat","    return f(arg) if n==1 else f(repeated(f, n-1)(arg))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in repeat","    return f(arg) if n==1 else f(repeated(f, n-1)(arg))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in repeat","    return f(arg) if n==1 else f(repeated(f, n-1)(arg))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in repeat","    return f(arg) if n==1 else f(repeated(f, n-1)(arg))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 160, in repeat","    return f(arg) if n==1 else f(repeated(f, n-1)(arg))","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":557,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n    h = f                 =>           \r\n        h = compose1(h,f) =>           \r\n        h = compose1(f,f) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    while n > 1:\n        h = compose1(f,f)\n        n -= 1\n\n    def evaluated(x):\n        if n == 0:\n            return x \n        return h(x)\n\n    return evaluated\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    h = f \n    while n > 1:\n        h = compose1(h,f)\n        n -= 1\n\n    def evaluated(x):\n        if n == 0:\n            return x \n        return h(x)\n\n    return evaluated\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":558,"studentId":0,"date":null,"diff":"\r\nInputObject                                                       SideIndicator\r\n-----------                                                       -------------\r\n    def helper_func(x):#takes the third argument                  =>           \r\n        k = 0 #sets up the number that will count up to equal n   =>           \r\n        while k < n:                                              =>           \r\n            x, k = f(x), k + 1 #this line makes the counter go up =>           \r\n        return x                                                  =>           \r\n    return helper_func                                            =>           \r\n    def helper_func(h):                                           <=           \r\n        k= 0                                                      <=           \r\n        while k< n:                                               <=           \r\n            h, k = f(x), k+1                                      <=           \r\n        return h                                                  <=           \r\n    return x                                                      <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def helper_func(h):\n        k= 0\n        while k< n:\n            h, k = f(x), k+1\n        return h\n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def helper_func(x):#takes the third argument\n        k = 0 #sets up the number that will count up to equal n\n        while k < n: \n            x, k = f(x), k + 1 #this line makes the counter go up\n        return x\n    return helper_func\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":559,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        return repeat(n) =>           \r\n        return repeat    <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def function(x):\n        def repeat(n):\n            if n == 0:\n                return x\n            return f(repeat(n - 1))\n        return repeat\n    return function\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def function(x):\n        def repeat(n):\n            if n == 0:\n                return x\n            return f(repeat(n - 1))\n        return repeat(n)\n    return function\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function repeated.<locals>.function.<locals>.repeat at 0x000002B8B8D58D08>","","# Error: expected","#     8","# but got","#     <function repeated.<locals>.function.<locals>.repeat at 0x000002B8B8D58D08>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":560,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n                return num    =>           \r\n                return f(num) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def func(num):\r\n        def helper(x):\r\n            if x==n:\r\n                return f(num)\r\n            else:\r\n                return f(helper(x+1))\r\n        return helper(0)\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def func(num):\n        def helper(x):\n            if x == n:\n                return num\n            else:\n                return f(helper(x + 1))\n        return helper(0)\n    return func\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def func(num):\r\n        def helper(x):\r\n            if x==n:\r\n                return identity(num)\r\n            else:\r\n                return f(helper(x+1))\r\n        return helper(0)\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":561,"studentId":0,"date":null,"diff":"\r\nInputObject   SideIndicator\r\n-----------   -------------\r\n    def h(x): =>           \r\n    return h  =>           \r\n    def f(x): <=           \r\n    return f  <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def f(x):\n        i = 1\n        while i <= n:\n            x = f(x)\n            i += 1\n        return x\n    return f\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        i = 1\n        while i <= n:\n            x = f(x)\n            i += 1\n        return x\n    return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in f","    x = f(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in f","    x = f(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in f","    x = f(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in f","    x = f(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in f","    x = f(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 157, in f","    x = f(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in f","    while i <= n:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     8","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":562,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n    def final(x):                         =>           \r\n        answer= x                         =>           \r\n            answer = f(answer)            =>           \r\n    if n<=1:                              =>           \r\n        return n                          =>           \r\n    def num(a):                           =>           \r\n        if a==1:                          =>           \r\n            return answer                 =>           \r\n        else:                             =>           \r\n            answer+=a*g(n-a)              =>           \r\n            return num(a-1)               =>           \r\n    return num(a=n)                       =>           \r\n                                          =>           \r\n                                          =>           \r\n                                          =>           \r\n                                          =>           \r\n                                          =>           \r\n                                          =>           \r\n    def final(x=1):                       <=           \r\n        answer=0                          <=           \r\n        answer=lambda f,n: lambda x: f(x) <=           \r\n            answer = lambda: f(answer)    <=           \r\n    \"*** YOUR CODE HERE ***\"              <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def final(x=1):\n        number=1\n        answer=0\n        answer=lambda f,n: lambda x: f(x)\n        while number <n+1:\n            answer = lambda: f(answer)\n            number+=1\n        return answer\n    return final\n           \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def final(x):\n        number=1\n        answer= x\n        while number <n+1:\n            answer = f(answer)\n            number+=1\n        return answer\n    return final\n           \n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function repeated.<locals>.final.<locals>.<lambda> at 0x000001B5A6608D90>","","# Error: expected","#     8","# but got","#     <function repeated.<locals>.final.<locals>.<lambda> at 0x000001B5A6608D90>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":563,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        return f                             =>           \r\n        return compose1(f, repeated(f, n-1)) =>           \r\n        return compose1(f, f)                <=           \r\n        return f(repeated(f, n-1))           <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return identity\n    elif n == 1:\n        return compose1(f, f)\n    else:\n        return f(repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return identity\n    elif n == 1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 13, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":564,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        while i <= n: =>           \r\n        return x      =>           \r\n    return h          =>           \r\n        while i < n:  <=           \r\n            return x  <=           \r\n        return h      <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def h(x):\n        i = 1\n        while i < n:\n            x, i = f(x), i + 1\n            return x\n        return h\n    \n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def h(x):\n        i = 1\n        while i <= n:\n            x, i = f(x), i + 1\n        return x\n    return h\n    \n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":565,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        while c <= n: =>           \r\n        while c != n: <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def applier(a):\r\n        c = 1\r\n        out = a\r\n        while c!=n:\r\n            out = f(out)\r\n            c += 1\r\n        return out\r\n    return applier\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def applier(a):\n        c = 1\n        out = a\n        while c <= n:\n            out = f(out)\n            c += 1\n        return out\n    return applier\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def applier(a):\r\n        c = 0\r\n        out = a\r\n        while c!=n:\r\n            out = f(out)\r\n            c += 1\r\n        return out\r\n    return applier\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":566,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n        return compose1(repeated(f,n-1),f) =>           \r\n    if n == 1:                             <=           \r\n        return f                           <=           \r\n        return repeated(compose1(f,f),n-1) <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return repeated(compose1(f, f), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    else:\n        return compose1(repeated(f,n-1),f)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":567,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        i = 0         =>           \r\n        while i < n:  =>           \r\n    return recRep     =>           \r\n        i = 1         <=           \r\n        while i <= n: <=           \r\n    return g          <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def recRep(x):\n        i = 1\n        while i <= n:\n            x = f(x)\n            i += 1\n        return x\n    return g\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def recRep(x):\n        i = 0\n        while i < n:\n            x = f(x)\n            i += 1\n        return x\n    return recRep\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","22","","# Error: expected","#     8","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":568,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        return compose1(f, repeated(f, n-1)) =>           \r\n        return compose1(repeated(f, n-1))    <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if (n==0):\r\n        return lambda x: x\r\n    else:\r\n        return compose1(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if(n==0):\n        return lambda x: x\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if (n==0):\r\n        return lambda x: x\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"any\"))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 185, in repeated","    return compose1(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 185, in repeated","    return compose1(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 185, in repeated","    return compose1(repeated(f, n-1))","TypeError: compose1() missing 1 required positional argument: 'g'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":569,"studentId":0,"date":null,"diff":"\r\nInputObject                 SideIndicator\r\n-----------                 -------------\r\n        return lambda g: g  =>           \r\n        return g            <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n>1:\r\n        return compose1(repeated(f, n-1), f)\r\n    elif n==0:\r\n        return g\r\n    else:\r\n        return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n > 1:\n        return compose1(repeated(f, n - 1), f) \n    elif n == 0:\n        return lambda g: g \n    else: \n        return f\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n>1:\r\n        return compose1(repeated(f, n-1), f)\r\n    elif n==0:\r\n        return identity\r\n    else:\r\n        return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","","# Error: expected","#     5","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":570,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        return lambda x: x                  =>           \r\n    if n <= 3:                              =>           \r\n        return n                            =>           \r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3) =>           \r\n    else:                                   =>           \r\n        return x                            <=           \r\n    \"*** YOUR CODE HERE ***\"                <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return x\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    else:\n        return compose1(f, repeated(f, n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 165, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 163, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":571,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n            return counter(total,count+1,f,n) =>           \r\n            return counter(count+1,f)         <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def counter(total,count,f,n):\n        if count <= n:\n\n            total = f(total)\n            return counter(count+1,f)\n        else:\n            return total\n\n    return lambda x: counter(x,1,f,n)\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def counter(total,count,f,n):\n        if count <= n:\n\n            total = f(total)\n            return counter(total,count+1,f,n)\n        else:\n            return total\n\n    return lambda x: counter(x,1,f,n)\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 187, in <lambda>","    return lambda x: counter(x,1,f,n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 183, in counter","    return counter(count+1,f)","TypeError: counter() missing 2 required positional arguments: 'f' and 'n'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":572,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    return f2  =>           \r\n    return 8   <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    f2 = lambda x: x\n    #f = compose1(f)\n    while n > 0:\n    \tf2 = compose1(f2, f)\n    \tn-=1\n    return 8 \n\n    \n\ndef compose1(f,g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    f2 = lambda x: x\n    #f = compose1(f)\n    while n > 0:\n    \tf2 = compose1(f2, f)\n    \tn-=1\n    return f2 \n\n    \n\ndef compose1(f,g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":573,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n        return x =>           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def inner(x):\n        i =1\n        while i <= n:\n            x = f(x)\n            i+=1\n    return inner\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def inner(x):\n        i =1\n        while i <= n:\n            x = f(x)\n            i+=1\n        return x\n    return inner\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","","# Error: expected","#     8","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":574,"studentId":0,"date":null,"diff":"\r\nInputObject                                          SideIndicator\r\n-----------                                          -------------\r\n    def function_ception(f, n,function=identity):    =>           \r\n        return function_ception(f, n-1, function)    =>           \r\n    return function_ception(f,n)                     =>           \r\n        if n==0:                                     =>           \r\n    def function_ception(f,n, i=1,function=0):       <=           \r\n        if n == 0 or i==1:                           <=           \r\n            function = identity                      <=           \r\n        if n == 0:                                   <=           \r\n        if i > n:                                    <=           \r\n            return function                          <=           \r\n        return function_ception(f, n, i+1, function) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def function_ception(f,n, i=1,function=0):\n        if n == 0 or i==1:\n            function = identity\n        if n == 0:\n            return function\n        if i > n:\n            return function\n        function = compose1(f,function)\n        return function_ception(f, n, i+1, function)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def function_ception(f, n,function=identity):\n        if n==0:\n            return function\n        function = compose1(f,function)\n        return function_ception(f, n-1, function)\n    return function_ception(f,n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":575,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    m = 1      =>           \r\n    if 0 == n: =>           \r\n    m = 0      <=           \r\n    if m == n: <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    func = f\r\n    m = 0\r\n    if m==n:\r\n        return identity\r\n    while m<n:\r\n        func = compose1(func, f)\r\n        m += 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    func = f\n    m = 1\n    if 0 == n:\n        return identity\n    while m < n:\n        func = compose1(func, f)\n        m += 1\n    return func\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    func = identity\r\n    m = 0\r\n    if m==n:\r\n        return identity\r\n    while m<n:\r\n        func = compose1(func, f)\r\n        m += 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":576,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n    def repeater(argument):                     =>           \r\n        def repeat(increment):                  =>           \r\n            if increment == 0:                  =>           \r\n                return argument                 =>           \r\n            else:                               =>           \r\n                return f(repeat(increment - 1)) =>           \r\n        return repeat(n)                        =>           \r\n                                                =>           \r\n                                                =>           \r\n    def repeater(incr):                         <=           \r\n        if incr == 0:                           <=           \r\n            return n                            <=           \r\n        else:                                   <=           \r\n            return f(repeater(n - 1))           <=           \r\n                                                <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def repeater(incr):\n        if incr == 0:\n            return n\n        else:\n            return f(repeater(n - 1))\n\n    return repeater\n    \ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def repeater(argument):\n        def repeat(increment):\n            if increment == 0:\n                return argument\n            else:\n                return f(repeat(increment - 1))\n\n        return repeat(n)\n\n    return repeater\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeater","    return f(repeater(n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeater","    return f(repeater(n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeater","    return f(repeater(n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeater","    return f(repeater(n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeater","    return f(repeater(n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 162, in repeater","    return f(repeater(n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in repeater","    if incr == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     8","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":577,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n    if(n==0): return identity =>           \r\n    if(n==0): return x        <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if (n==0):\r\n        return x\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \"\"\"\n    def nested_func(x):\n        for i in range(1,n+1):\n            x=f(x)\n        return x\n    return nested_func\n    \"\"\"\n    def compose1(f,g):\n        def h(x):\n            return f(g(x))\n        return h\n    if(n==0): return identity\n    else: return compose1(f, repeated(f,n-1))\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if (n==0):\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 175, in repeated","    else: return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 175, in repeated","    else: return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 175, in repeated","    else: return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 174, in repeated","    if(n==0): return x","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":578,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n    i = 1   =>           \r\n    i = 0   <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if (n==0):\r\n        return identity\r\n    g = f\r\n    i = 0\r\n    while (i<n):\r\n        f = compose1(f, g)\r\n        i += 1\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if (n == 0):\n        return identity\n    g = f\n    i = 1\n    while (i < n):\n        f = compose1(f, g)\n        i += 1\n    return f\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if (n==0):\r\n        return identity\r\n    g = f\r\n    i = 1\r\n    while (i<n):\r\n        f = compose1(f, g)\r\n        i += 1\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":579,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    if n == 0:          =>           \r\n        return identity =>           \r\n                        =>           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    result = f\r\n    while n>1:\r\n        result = compose1(f, result)\r\n        n -= 1\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return identity\n\n    result = f\n    while n > 1:\n        result = compose1(f, result)\n        n -= 1\n\n    return result\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    result = f\r\n    while n>1:\r\n        result = compose1(f, result)\r\n        n -= 1\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":580,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        while k < n:  =>           \r\n        while k <= n: <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    k = 1\r\n    func = f\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return lambda x: f(x)\r\n    else:\r\n        while k<=n:\r\n            func = compose1(func, f)\r\n            k += 1\r\n    return func","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    k = 1\n    func = f\n    def compose1(f, g):\n        \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n        def h(x):\n            return f(g(x))\n        return h\n    if n == 0:\n        return lambda x: x\n    elif n == 1:\n        return lambda x: f(x)\n    else:\n        while k < n:\n            func = compose1(func, f)\n            k += 1\n    return func\n\n    \"\"\"total = 0\n    k = 1\n    while k <= n:  \n    func= compose1(f, f)\n    k += 1\n    return func\"\"\"\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    k = 1\r\n    func = identity\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return lambda x: f(x)\r\n    else:\r\n        while k<=n:\r\n            func = compose1(func, f)\r\n            k += 1\r\n    return func","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":581,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n    return repeater(f, n) =>           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    h = f\n    def repeater(f, n):\n        if n > 1:\n            f = compose1(f, h)\n            return repeater(f, n-1)\n        elif n == 0:\n            return lambda x: x\n        else:\n            return lambda x: f(x)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    h = f\n    def repeater(f, n):\n        if n > 1:\n            f = compose1(f, h)\n            return repeater(f, n-1)\n        elif n == 0:\n            return lambda x: x\n        else:\n            return lambda x: f(x)\n    return repeater(f, n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":582,"studentId":0,"date":null,"diff":"\r\nInputObject                                                         SideIndicator\r\n-----------                                                         -------------\r\n        return compose1(repeated(f,n-1),f)#   repeated(f(n),n-1)    =>           \r\n        return compose1(repeated(f,n-1),f)(n)#   repeated(f(n),n-1) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    else:\n        return compose1(repeated(f,n-1),f)(n)#   repeated(f(n),n-1)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    else:\n        return compose1(repeated(f,n-1),f)#   repeated(f(n),n-1)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in repeated","    return compose1(repeated(f,n-1),f)(n)#   repeated(f(n),n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 156, in repeated","    return compose1(repeated(f,n-1),f)(n)#   repeated(f(n),n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 161, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":583,"studentId":0,"date":null,"diff":"\r\nInputObject                          SideIndicator\r\n-----------                          -------------\r\n    count = 1                        =>           \r\n    while count <= n:                =>           \r\n        result = compose1(f, result) =>           \r\n        count += 1                   =>           \r\n    result = compose1(f, result)     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    result = lambda x: x\n    result = compose1(f, result)\n    return result\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    count = 1\n    result = lambda x: x\n    while count <= n:\n        result = compose1(f, result)\n        count += 1\n    return result\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","6","","# Error: expected","#     8","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":584,"studentId":0,"date":null,"diff":"\r\nInputObject                              SideIndicator\r\n-----------                              -------------\r\n        prev_val = f(increment)          =>           \r\n        for x in range (0, n-1):         =>           \r\n        prev_val = f(n)                  <=           \r\n        for x in range (0, increment-1): <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def loop(increment):\n        prev_val = f(n)\n        for x in range (0, increment-1):\n            prev_val = f(prev_val)\n\n        return prev_val\n\n    if n == 0:\n        return lambda x : x\n    else:\n        return loop\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def loop(increment):\n        prev_val = f(increment)\n        for x in range (0, n-1):\n            prev_val = f(prev_val)\n\n        return prev_val\n\n    if n == 0:\n        return lambda x : x\n    else:\n        return loop\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","15","","# Error: expected","#     243","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":585,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n    for _ in range(n):                            =>           \r\n    if n == 1:                                    =>           \r\n        print_move(start, end)                    =>           \r\n    else:                                         =>           \r\n        move_stack(n - 1, start, 6 - start - end) =>           \r\n        print_move(start, end)                    =>           \r\n        move_stack(n - 1, 6 - start - end, end)   =>           \r\n                                                  =>           \r\n    while n > 1:                                  <=           \r\n        n = n - 1                                 <=           \r\n    \"*** YOUR CODE HERE ***\"                      <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    g = identity\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \n    g = identity\n    for _ in range(n):\n        g = compose1(f, g)\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    g = identity\r\n    while n>0:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":586,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n    if n == 0:                               =>           \r\n        return compose1(identity, identity)  =>           \r\n    elif n == 1:                             =>           \r\n        return compose1(identity, f)         =>           \r\n    return compose1(f, repeated(f, n-1))     =>           \r\n    if n != 0:                               <=           \r\n        func = compose1(f, repeated(f, n-1)) <=           \r\n    return func                              <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n!=0:\r\n        func = compose1(f, repeated(f, n-1))\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n): \n    \"\"\"Return the function that computes the nth application of f.\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \"\"\"def dolo(x):\n        i = 1\n        z = x\n        if n == 0:\n            return x\n        while i <= n:\n            z += f(z)\n            i += 1 \n            print(z)\n        return z\n    return dolo\"\"\"\n    if n == 0:\n        return compose1(identity, identity)\n    elif n == 1:\n        return compose1(identity, f)\n    return compose1(f, repeated(f, n-1))    \n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n!=0:\r\n        func = compose1(f, repeated(f, n-1))\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 167, in repeated","    func = compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 167, in repeated","    func = compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 167, in repeated","    func = compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 168, in repeated","    return func","UnboundLocalError: local variable 'func' referenced before assignment","","# Error: expected","#     ","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":587,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n    if (n == 0):                  =>           \r\n        return identity;          =>           \r\n    # final = f;                  <=           \r\n    # if (n == 0):                <=           \r\n    #     final = identity;       <=           \r\n    # while (n > 1):              <=           \r\n    #     g = final;              <=           \r\n    #     final = compose1(f, g); <=           \r\n    #     n -=1;                  <=           \r\n    # return final;               <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    ans = f\r\n    for i in range(1, n):\r\n        ans = compose1(f, ans)\r\n    return ans\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if (n == 0):\n        return identity;\n    ans = f;\n    for i in range(1, n):\n        ans = compose1(f, ans);\n    return ans;\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    ans = f\r\n    for i in range(1, n):\r\n        ans = compose1(f, ans)\r\n    return ans\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":588,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        return lambda x: x =>           \r\n        return             <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return \r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n        return lambda x: x\n    if n==1:\n        return f\n    else:\n        return compose1(repeated(f,n-1),f)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==0:\r\n        return \r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":589,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        return compose1(identity, identity)  =>           \r\n        return compose1(True, True)          <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return compose1(True, True)\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def compose1(f,g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n == 0:\n        return compose1(identity, identity) \n    if n == 1:\n        return f\n    else:\n        return compose1(f,repeated(f, n - 1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return compose1(True, True)\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 159, in h","    return f(g(x))","TypeError: 'bool' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":590,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        while i <= n: =>           \r\n        while i < n:  <=           \r\n\r\n\r\n","before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        i = 1\r\n        total = x\r\n        while i<n:\r\n            total = f(total)\r\n            i = i+1\r\n        return total\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    def h(x):\n        i = 1\n        total = x\n        while i <= n:\n            total = f(total)\n            i = i + 1\n        return total\n    return h\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n    # def h(x):\n    #     if n == 0:\n    #         return f(x)\n    #     else:\n    #         return f(x) * repeated (f, n-1)\n\n    # def hannah(x):\n    #     total = f(x)\n    #     if n == 0:\n    #         return total\n    #     else:\n    #         a = repeated(f, n-1)\n    #         total = a + total\n    #     return total\n    # return hannah\n\n    # def hannah(x):\n    #     result = f(x)\n    #     for i in range(n-1):\n    #         result = f(result)\n    #     return result\n    # return hannah\n\n    # def compose(f, n, x):\n    #     if n == 0:\n    #         return f(x)\n    #     return compose(f, n-1, f(x))\n    # return compose(f, n, x)\n\n\n","Time":0,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        i = 0\r\n        total = x\r\n        while i<n:\r\n            total = f(total)\r\n            i = i+1\r\n        return total\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":591,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n    return output_fuction =>           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \n\n    def output_fuction(x):\n        i=0\n        while i<n:\n            x=f(x)\n            i+=1\n        return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \n\n    def output_fuction(x):\n        i=0\n        while i<n:\n            x=f(x)\n            i+=1\n        return x\n    return output_fuction\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]}]